{
    "project": {
        "name": "VaccineSurvey",
        "description": "",
        "version": "0.0.1"
    },
    "files": {
        "sdk/adapter/adapter.factory.js": {
            "name": "sdk/adapter/adapter.factory.js",
            "modules": {
                "adapter": 1
            },
            "classes": {
                "$adapterFactory": 1,
                "Adapter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/adapter/adapter.module.js": {
            "name": "sdk/adapter/adapter.module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/adapter/dispatcher.factory.js": {
            "name": "sdk/adapter/dispatcher.factory.js",
            "modules": {},
            "classes": {
                "$dispatcherFactory": 1,
                "Dispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/adapter/http.adapter.factory.js": {
            "name": "sdk/adapter/http.adapter.factory.js",
            "modules": {},
            "classes": {
                "$httpAdapterFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/adapter/http_client.factory.js": {
            "name": "sdk/adapter/http_client.factory.js",
            "modules": {},
            "classes": {
                "$httpClientFactory": 1,
                "HttpClient": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/adapter/mock_server.factory.js": {
            "name": "sdk/adapter/mock_server.factory.js",
            "modules": {},
            "classes": {
                "$mockServerFactory": 1,
                "MockServer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/adapters/adapters.module.js": {
            "name": "sdk/adapters/adapters.module.js",
            "modules": {
                "adapters": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/adapters/default.adapter.factory.js": {
            "name": "sdk/adapters/default.adapter.factory.js",
            "modules": {},
            "classes": {
                "$vaccineSurveySdkDefaultAdapter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/adapters/dispatcher.factory.js": {
            "name": "sdk/adapters/dispatcher.factory.js",
            "modules": {},
            "classes": {
                "$vaccineSurveySdkDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/ap/ap.module.js": {
            "name": "sdk/ap/ap.module.js",
            "modules": {
                "AP": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/application/definition.module.js": {
            "name": "sdk/application/definition.module.js",
            "modules": {
                "VaccineSurveySdk": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/auth/authentication.factory.js": {
            "name": "sdk/auth/authentication.factory.js",
            "modules": {
                "authentication": 1
            },
            "classes": {
                "$authenticationFactory": 1,
                "Authentication": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/auth/authentication.module.js": {
            "name": "sdk/auth/authentication.module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/auth/authentication_manager.factory.js": {
            "name": "sdk/auth/authentication_manager.factory.js",
            "modules": {},
            "classes": {
                "$authenticationManagerFactory": 1,
                "AuthenticationManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/auth/authentication_storage.service.js": {
            "name": "sdk/auth/authentication_storage.service.js",
            "modules": {},
            "classes": {
                "$authenticationStorageService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/config/config.module.js": {
            "name": "sdk/config/config.module.js",
            "modules": {
                "config": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/config/config.service.js": {
            "name": "sdk/config/config.service.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/lib/angular/angular.js": {
            "name": "sdk/lib/angular/angular.js",
            "modules": {
                "ng": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/lib/ngStorage/ngStorage-0.3.7.js": {
            "name": "sdk/lib/ngStorage/ngStorage-0.3.7.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/model/model.factory.js": {
            "name": "sdk/model/model.factory.js",
            "modules": {
                "model": 1
            },
            "classes": {
                "$modelFactory": 1,
                "Model": 1,
                "Resource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/model/model.module.js": {
            "name": "sdk/model/model.module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/model/registry.service.js": {
            "name": "sdk/model/registry.service.js",
            "modules": {},
            "classes": {
                "ModelRegistry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/clinician_block_randomizer.factory.js": {
            "name": "sdk/models/clinician_block_randomizer.factory.js",
            "modules": {
                "models": 1
            },
            "classes": {
                "$clinicianBlockRandomizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/clinician_code.factory.js": {
            "name": "sdk/models/clinician_code.factory.js",
            "modules": {},
            "classes": {
                "$clinicianCode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/education.factory.js": {
            "name": "sdk/models/education.factory.js",
            "modules": {},
            "classes": {
                "$education": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/healthcare_provider_content.factory.js": {
            "name": "sdk/models/healthcare_provider_content.factory.js",
            "modules": {},
            "classes": {
                "$healthcareProviderContent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/job_audit_logging.factory.js": {
            "name": "sdk/models/job_audit_logging.factory.js",
            "modules": {},
            "classes": {
                "$jobAuditLogging": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/model.module.js": {
            "name": "sdk/models/model.module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/question_category.factory.js": {
            "name": "sdk/models/question_category.factory.js",
            "modules": {},
            "classes": {
                "$questionCategory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/question_code.factory.js": {
            "name": "sdk/models/question_code.factory.js",
            "modules": {},
            "classes": {
                "$questionCode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/question_type.factory.js": {
            "name": "sdk/models/question_type.factory.js",
            "modules": {},
            "classes": {
                "$questionType": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/race.factory.js": {
            "name": "sdk/models/race.factory.js",
            "modules": {},
            "classes": {
                "$race": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/search_audit_logging.factory.js": {
            "name": "sdk/models/search_audit_logging.factory.js",
            "modules": {},
            "classes": {
                "$searchAuditLogging": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/send_grid.factory.js": {
            "name": "sdk/models/send_grid.factory.js",
            "modules": {},
            "classes": {
                "$sendGrid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/setting.factory.js": {
            "name": "sdk/models/setting.factory.js",
            "modules": {},
            "classes": {
                "$setting": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/survey.factory.js": {
            "name": "sdk/models/survey.factory.js",
            "modules": {},
            "classes": {
                "$survey": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/survey_answer.factory.js": {
            "name": "sdk/models/survey_answer.factory.js",
            "modules": {},
            "classes": {
                "$surveyAnswer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/survey_question.factory.js": {
            "name": "sdk/models/survey_question.factory.js",
            "modules": {},
            "classes": {
                "$surveyQuestion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/survey_question_skip_logic.factory.js": {
            "name": "sdk/models/survey_question_skip_logic.factory.js",
            "modules": {},
            "classes": {
                "$surveyQuestionSkipLogic": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/topic.factory.js": {
            "name": "sdk/models/topic.factory.js",
            "modules": {},
            "classes": {
                "$topic": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/twilio.factory.js": {
            "name": "sdk/models/twilio.factory.js",
            "modules": {},
            "classes": {
                "$twilio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/user.factory.js": {
            "name": "sdk/models/user.factory.js",
            "modules": {},
            "classes": {
                "$user": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/user_audit_logging.factory.js": {
            "name": "sdk/models/user_audit_logging.factory.js",
            "modules": {},
            "classes": {
                "$userAuditLogging": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/user_survey.factory.js": {
            "name": "sdk/models/user_survey.factory.js",
            "modules": {},
            "classes": {
                "$userSurvey": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/user_survey_answer.factory.js": {
            "name": "sdk/models/user_survey_answer.factory.js",
            "modules": {},
            "classes": {
                "$userSurveyAnswer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/user_survey_video.factory.js": {
            "name": "sdk/models/user_survey_video.factory.js",
            "modules": {},
            "classes": {
                "$userSurveyVideo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/vaccination_reminder.factory.js": {
            "name": "sdk/models/vaccination_reminder.factory.js",
            "modules": {},
            "classes": {
                "$vaccinationReminder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/video.factory.js": {
            "name": "sdk/models/video.factory.js",
            "modules": {},
            "classes": {
                "$video": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/models/video_audit_logging.factory.js": {
            "name": "sdk/models/video_audit_logging.factory.js",
            "modules": {},
            "classes": {
                "$videoAuditLogging": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/utility/cache.service.js": {
            "name": "sdk/utility/cache.service.js",
            "modules": {
                "utility": 1
            },
            "classes": {
                "{Cache}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/utility/helpers.service.js": {
            "name": "sdk/utility/helpers.service.js",
            "modules": {},
            "classes": {
                "$helpers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/utility/timestamps.service.js": {
            "name": "sdk/utility/timestamps.service.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/utility/utility.module.js": {
            "name": "sdk/utility/utility.module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "AP": {
            "name": "AP",
            "submodules": {
                "adapter": 1,
                "authentication": 1,
                "model": 1,
                "utility": 1
            },
            "classes": {
                "$adapterFactory": 1,
                "Adapter": 1,
                "$dispatcherFactory": 1,
                "Dispatcher": 1,
                "$httpAdapterFactory": 1,
                "$httpClientFactory": 1,
                "HttpClient": 1,
                "$mockServerFactory": 1,
                "MockServer": 1,
                "$authenticationFactory": 1,
                "Authentication": 1,
                "$authenticationManagerFactory": 1,
                "AuthenticationManager": 1,
                "$authenticationStorageService": 1,
                "$modelFactory": 1,
                "Model": 1,
                "Resource": 1,
                "ModelRegistry": 1,
                "{Cache}": 1,
                "$helpers": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "sdk/utility/helpers.service.js",
            "line": 3
        },
        "adapter": {
            "name": "adapter",
            "submodules": {},
            "classes": {
                "$adapterFactory": 1,
                "Adapter": 1,
                "$dispatcherFactory": 1,
                "Dispatcher": 1,
                "$httpAdapterFactory": 1,
                "$httpClientFactory": 1,
                "HttpClient": 1,
                "$mockServerFactory": 1,
                "MockServer": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "AP",
            "namespace": "",
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 13,
            "description": "This factory creates {Adapter} objects. An Adapter represents a connection to an API, and it is meant to handle how to configure an HttpClient\nin order to connect to its API. By default, an Adapter does nothing more than pass on the options for requests down to an HttpClient, but its\nmethods can easily be overrided to achieve custom behaviour.\nAlso, an Adapter instance can choose whether to send requests through its HttpClient or through its MockServer instance, in such funcionality\nhas been enabled."
        },
        "VaccineSurveySdk": {
            "name": "VaccineSurveySdk",
            "submodules": {
                "adapters": 1,
                "config": 1,
                "models": 1
            },
            "classes": {
                "$vaccineSurveySdkDefaultAdapter": 1,
                "$vaccineSurveySdkDispatcher": 1,
                "$clinicianBlockRandomizer": 1,
                "$clinicianCode": 1,
                "$education": 1,
                "$healthcareProviderContent": 1,
                "$jobAuditLogging": 1,
                "$questionCategory": 1,
                "$questionCode": 1,
                "$questionType": 1,
                "$race": 1,
                "$searchAuditLogging": 1,
                "$sendGrid": 1,
                "$setting": 1,
                "$survey": 1,
                "$surveyAnswer": 1,
                "$surveyQuestion": 1,
                "$surveyQuestionSkipLogic": 1,
                "$topic": 1,
                "$twilio": 1,
                "$user": 1,
                "$userAuditLogging": 1,
                "$userSurvey": 1,
                "$userSurveyAnswer": 1,
                "$userSurveyVideo": 1,
                "$vaccinationReminder": 1,
                "$video": 1,
                "$videoAuditLogging": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "sdk/models/video_audit_logging.factory.js",
            "line": 3
        },
        "adapters": {
            "name": "adapters",
            "submodules": {},
            "classes": {
                "$vaccineSurveySdkDefaultAdapter": 1,
                "$vaccineSurveySdkDispatcher": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "VaccineSurveySdk",
            "namespace": "",
            "file": "sdk/adapters/dispatcher.factory.js",
            "line": 3,
            "description": "Default adapter for VaccineSurveySdk"
        },
        "authentication": {
            "name": "authentication",
            "submodules": {},
            "classes": {
                "$authenticationFactory": 1,
                "Authentication": 1,
                "$authenticationManagerFactory": 1,
                "AuthenticationManager": 1,
                "$authenticationStorageService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "AP",
            "namespace": "",
            "file": "sdk/auth/authentication_storage.service.js",
            "line": 3,
            "description": "Provides methods for user authentication and deauthentication.\n\nTo login:\n```\nApplicationDefinitionNameSdk.login({\n  username: \"johndoe\",\n  password: \"doe123\"\n});\n\nApplicationDefinitionNameSdk.isAuthenticated();\n// true\n```\n\nTo logout:\n```\nApplicationDefinitionNameSdk.logout();\n\nApplicationDefinitionNameSdk.isAuthenticated();\n// false\n```"
        },
        "config": {
            "name": "config",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "VaccineSurveySdk",
            "namespace": "",
            "file": "sdk/config/config.module.js",
            "line": 3,
            "description": "Configuration service for VaccineSurveySdk"
        },
        "ng": {
            "name": "ng",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "sdk/lib/angular/angular.js",
            "line": 170,
            "ngdoc": "module",
            "kind": "function",
            "params": [
                {
                    "name": "string",
                    "description": "String to be converted to lowercase.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Lowercased string.",
                "type": "String"
            },
            "example": [
                "\n<example module=\"copyExample\">\n<file name=\"index.html\">\n<div ng-controller=\"ExampleController\">\n<form novalidate class=\"simple-form\">\nName: <input type=\"text\" ng-model=\"user.name\" /><br />\nE-mail: <input type=\"email\" ng-model=\"user.email\" /><br />\nGender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n<input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />\n<button ng-click=\"reset()\">RESET</button>\n<button ng-click=\"update(user)\">SAVE</button>\n</form>\n<pre>form = {{user | json}}</pre>\n<pre>master = {{master | json}}</pre>\n</div>\n\n<script>\n angular.module('copyExample', [])\n   .controller('ExampleController', ['$scope', function($scope) {\n     $scope.master= {};\n\n     $scope.update = function(user) {\n       // Example with 1 argument\n       $scope.master= angular.copy(user);\n     };\n\n     $scope.reset = function() {\n       // Example with 2 arguments\n       angular.copy($scope.master, $scope.user);\n     };\n\n     $scope.reset();\n   }]);\n</script>\n</file>\n</example>"
            ],
            "element": "ANY"
        },
        "model": {
            "name": "model",
            "submodules": {},
            "classes": {
                "$modelFactory": 1,
                "Model": 1,
                "Resource": 1,
                "ModelRegistry": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "AP",
            "namespace": "",
            "file": "sdk/model/registry.service.js",
            "line": 17,
            "description": "Factory that creates Model instances. A Model instance is a basically a service that exposes methods for CRUD operations and\nQuery Scopes. In order to create an instance, a dispatcher and a model definition must be passed as arguments. The dispatcher\nis needed so that the Model instance will know how to connect to the backend when its methods are called.",
            "params": [
                {
                    "name": "$injector",
                    "description": "the angular service used to do dependency injection",
                    "type": "Object"
                }
            ]
        },
        "models": {
            "name": "models",
            "submodules": {},
            "classes": {
                "$clinicianBlockRandomizer": 1,
                "$clinicianCode": 1,
                "$education": 1,
                "$healthcareProviderContent": 1,
                "$jobAuditLogging": 1,
                "$questionCategory": 1,
                "$questionCode": 1,
                "$questionType": 1,
                "$race": 1,
                "$searchAuditLogging": 1,
                "$sendGrid": 1,
                "$setting": 1,
                "$survey": 1,
                "$surveyAnswer": 1,
                "$surveyQuestion": 1,
                "$surveyQuestionSkipLogic": 1,
                "$topic": 1,
                "$twilio": 1,
                "$user": 1,
                "$userAuditLogging": 1,
                "$userSurvey": 1,
                "$userSurveyAnswer": 1,
                "$userSurveyVideo": 1,
                "$vaccinationReminder": 1,
                "$video": 1,
                "$videoAuditLogging": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "VaccineSurveySdk",
            "namespace": "",
            "file": "sdk/models/video_audit_logging.factory.js",
            "line": 3,
            "description": "Model service for ClinicianBlockRandomizer"
        },
        "utility": {
            "name": "utility",
            "submodules": {},
            "classes": {
                "{Cache}": 1,
                "$helpers": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "AP",
            "namespace": "",
            "file": "sdk/utility/helpers.service.js",
            "line": 3,
            "description": "Local cache class, uses ngStorage internally to persist data across sessions in the browser",
            "params": [
                {
                    "name": "$localStorage",
                    "description": "Web Storage instance for persisting session data.",
                    "type": "Object"
                }
            ]
        }
    },
    "classes": {
        "$adapterFactory": {
            "name": "$adapterFactory",
            "shortname": "$adapterFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/adapter.factory.js",
            "line": 3,
            "description": "This factory creates {Adapter} objects. An Adapter represents a connection to an API, and it is meant to handle how to configure an HttpClient\nin order to connect to its API. By default, an Adapter does nothing more than pass on the options for requests down to an HttpClient, but its\nmethods can easily be overrided to achieve custom behaviour.\nAlso, an Adapter instance can choose whether to send requests through its HttpClient or through its MockServer instance, in such funcionality\nhas been enabled."
        },
        "Adapter": {
            "name": "Adapter",
            "shortname": "Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/adapter.factory.js",
            "line": 17,
            "description": "Adapter Constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "configuration options for Adapter constructor",
                    "type": "Object"
                }
            ]
        },
        "$dispatcherFactory": {
            "name": "$dispatcherFactory",
            "shortname": "$dispatcherFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/dispatcher.factory.js",
            "line": 3,
            "description": "Factory that creates Dispatcher instances. A Dispatcher contains the Adapter instances for a specific SDK.\nThere is always one Adapter which is the default one, so when someone asks for an Adapter instance that doesn't\nexist, the Dispatcher will just return the default one."
        },
        "Dispatcher": {
            "name": "Dispatcher",
            "shortname": "Dispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/dispatcher.factory.js",
            "line": 15,
            "description": "Dispatcher Constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "configuration options for Dispatcher constructor",
                    "type": "Object"
                }
            ]
        },
        "$httpAdapterFactory": {
            "name": "$httpAdapterFactory",
            "shortname": "$httpAdapterFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 3,
            "description": "Factory that creates http adapters. An http adapter works almost the same as a regular adapter, only it allows some extra features like value interpolation.\nUnlike a regular adapter, which delegates configurations like headers, params, etc to an http client instance, an http adapter handles those configurations\nmanually. This is because most of the configuration values can have placeholders {{}} for interpolation, so the http adapter will first interpolate all the values,\nbuild the request object itself (instead of letting the http client do it) and send everything to the http client once its built."
        },
        "$httpClientFactory": {
            "name": "$httpClientFactory",
            "shortname": "$httpClientFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/http_client.factory.js",
            "line": 3,
            "description": "Factory that creates http clients. This clients act as wrappers for angular's $http service.\nThis allows configurations to be set for http calls but within a closed environment,\nthus not polluting the global http connection with defaults."
        },
        "HttpClient": {
            "name": "HttpClient",
            "shortname": "HttpClient",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/http_client.factory.js",
            "line": 15,
            "description": "Constructor for HttpClient instances",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "configuration options for HttpClient constructor",
                    "type": "Object"
                }
            ]
        },
        "$mockServerFactory": {
            "name": "$mockServerFactory",
            "shortname": "$mockServerFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 3,
            "description": "Factory that creates MockServer instances. A MockServer simulates the AJAX calls usually sent to a backend server\nby a Model instance, returning fake data in order to allow offline development."
        },
        "MockServer": {
            "name": "MockServer",
            "shortname": "MockServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "adapter",
            "namespace": "",
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 13,
            "description": "MockServer Constructor",
            "is_constructor": 1
        },
        "$vaccineSurveySdkDefaultAdapter": {
            "name": "$vaccineSurveySdkDefaultAdapter",
            "shortname": "$vaccineSurveySdkDefaultAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "adapters",
            "namespace": "",
            "file": "sdk/adapters/default.adapter.factory.js",
            "line": 3,
            "description": "Default adapter for VaccineSurveySdk"
        },
        "$vaccineSurveySdkDispatcher": {
            "name": "$vaccineSurveySdkDispatcher",
            "shortname": "$vaccineSurveySdkDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "adapters",
            "namespace": "",
            "file": "sdk/adapters/dispatcher.factory.js",
            "line": 3,
            "description": "Dispatcher for VaccineSurveySdk"
        },
        "$authenticationFactory": {
            "name": "$authenticationFactory",
            "shortname": "$authenticationFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "authentication",
            "namespace": "",
            "file": "sdk/auth/authentication.factory.js",
            "line": 3,
            "description": "Provides methods for user authentication and deauthentication.\n\nTo login:\n```\nApplicationDefinitionNameSdk.login({\n  username: \"johndoe\",\n  password: \"doe123\"\n});\n\nApplicationDefinitionNameSdk.isAuthenticated();\n// true\n```\n\nTo logout:\n```\nApplicationDefinitionNameSdk.logout();\n\nApplicationDefinitionNameSdk.isAuthenticated();\n// false\n```"
        },
        "Authentication": {
            "name": "Authentication",
            "shortname": "Authentication",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "authentication",
            "namespace": "",
            "file": "sdk/auth/authentication.factory.js",
            "line": 33,
            "description": "Authentication Constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "authentication",
                    "description": "strategies coordinator and manager",
                    "type": "AuthenticationManager"
                }
            ]
        },
        "$authenticationManagerFactory": {
            "name": "$authenticationManagerFactory",
            "shortname": "$authenticationManagerFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "authentication",
            "namespace": "",
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 3,
            "description": "Manages multiple authentication strategies and the common tasks among all strategies."
        },
        "AuthenticationManager": {
            "name": "AuthenticationManager",
            "shortname": "AuthenticationManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "authentication",
            "namespace": "",
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 12,
            "description": "AuthenticationManager constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dispatcher",
                    "description": "the dispatcher used by the SDK",
                    "type": "Dispatcher"
                }
            ]
        },
        "$authenticationStorageService": {
            "name": "$authenticationStorageService",
            "shortname": "$authenticationStorageService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "authentication",
            "namespace": "",
            "file": "sdk/auth/authentication_storage.service.js",
            "line": 3,
            "description": "Handles storing, retrieving and deleting authentication info using the localStorage API. Also handles expiration of stored data."
        },
        "$modelFactory": {
            "name": "$modelFactory",
            "shortname": "$modelFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "model",
            "namespace": "",
            "file": "sdk/model/model.factory.js",
            "line": 3,
            "description": "Factory that creates Model instances. A Model instance is a basically a service that exposes methods for CRUD operations and\nQuery Scopes. In order to create an instance, a dispatcher and a model definition must be passed as arguments. The dispatcher\nis needed so that the Model instance will know how to connect to the backend when its methods are called."
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "model",
            "namespace": "",
            "file": "sdk/model/model.factory.js",
            "line": 15,
            "description": "Constructor for Model instances\nModel Constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dispatcher",
                    "description": "the dispatcher used by the SDK",
                    "type": "Dispatcher"
                },
                {
                    "name": "definition",
                    "description": "configuration data describing the model",
                    "type": "Object"
                }
            ]
        },
        "Resource": {
            "name": "Resource",
            "shortname": "Resource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "model",
            "namespace": "",
            "file": "sdk/model/model.factory.js",
            "line": 166,
            "description": "A Resource is nothing more than an object with a $save method. This class is defined dynamically so that\nwhenever a Model creates a Resource, the resources's $save method will have access to the \"save\" method of the specific Model that created it"
        },
        "ModelRegistry": {
            "name": "ModelRegistry",
            "shortname": "ModelRegistry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "model",
            "namespace": "",
            "file": "sdk/model/registry.service.js",
            "line": 17,
            "description": "The ModelRegistry is merely a store where Model services difined in one or more SDKs are kept.\nThis is used for relationships between Models, so any model can access another without needing to inject\nit as a dependecy when the service is defined. Since the registry is global (it is not specific to any SDK)\nregistered Models are grouped by SDK name."
        },
        "$clinicianBlockRandomizer": {
            "name": "$clinicianBlockRandomizer",
            "shortname": "$clinicianBlockRandomizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/clinician_block_randomizer.factory.js",
            "line": 3,
            "description": "Model service for ClinicianBlockRandomizer"
        },
        "$clinicianCode": {
            "name": "$clinicianCode",
            "shortname": "$clinicianCode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/clinician_code.factory.js",
            "line": 3,
            "description": "Model service for ClinicianCode"
        },
        "$education": {
            "name": "$education",
            "shortname": "$education",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/education.factory.js",
            "line": 3,
            "description": "Model service for Education"
        },
        "$healthcareProviderContent": {
            "name": "$healthcareProviderContent",
            "shortname": "$healthcareProviderContent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/healthcare_provider_content.factory.js",
            "line": 3,
            "description": "Model service for HealthcareProviderContent"
        },
        "$jobAuditLogging": {
            "name": "$jobAuditLogging",
            "shortname": "$jobAuditLogging",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/job_audit_logging.factory.js",
            "line": 3,
            "description": "Model service for JobAuditLogging"
        },
        "$questionCategory": {
            "name": "$questionCategory",
            "shortname": "$questionCategory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/question_category.factory.js",
            "line": 3,
            "description": "Model service for QuestionCategory"
        },
        "$questionCode": {
            "name": "$questionCode",
            "shortname": "$questionCode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/question_code.factory.js",
            "line": 3,
            "description": "Model service for QuestionCode"
        },
        "$questionType": {
            "name": "$questionType",
            "shortname": "$questionType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/question_type.factory.js",
            "line": 3,
            "description": "Model service for QuestionType"
        },
        "$race": {
            "name": "$race",
            "shortname": "$race",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/race.factory.js",
            "line": 3,
            "description": "Model service for Race"
        },
        "$searchAuditLogging": {
            "name": "$searchAuditLogging",
            "shortname": "$searchAuditLogging",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/search_audit_logging.factory.js",
            "line": 3,
            "description": "Model service for SearchAuditLogging"
        },
        "$sendGrid": {
            "name": "$sendGrid",
            "shortname": "$sendGrid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/send_grid.factory.js",
            "line": 3,
            "description": "Model service for SendGrid"
        },
        "$setting": {
            "name": "$setting",
            "shortname": "$setting",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/setting.factory.js",
            "line": 3,
            "description": "Model service for Setting"
        },
        "$survey": {
            "name": "$survey",
            "shortname": "$survey",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/survey.factory.js",
            "line": 3,
            "description": "Model service for Survey"
        },
        "$surveyAnswer": {
            "name": "$surveyAnswer",
            "shortname": "$surveyAnswer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/survey_answer.factory.js",
            "line": 3,
            "description": "Model service for SurveyAnswer"
        },
        "$surveyQuestion": {
            "name": "$surveyQuestion",
            "shortname": "$surveyQuestion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/survey_question.factory.js",
            "line": 3,
            "description": "Model service for SurveyQuestion"
        },
        "$surveyQuestionSkipLogic": {
            "name": "$surveyQuestionSkipLogic",
            "shortname": "$surveyQuestionSkipLogic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/survey_question_skip_logic.factory.js",
            "line": 3,
            "description": "Model service for SurveyQuestionSkipLogic"
        },
        "$topic": {
            "name": "$topic",
            "shortname": "$topic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/topic.factory.js",
            "line": 3,
            "description": "Model service for Topic"
        },
        "$twilio": {
            "name": "$twilio",
            "shortname": "$twilio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/twilio.factory.js",
            "line": 3,
            "description": "Model service for Twilio"
        },
        "$user": {
            "name": "$user",
            "shortname": "$user",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/user.factory.js",
            "line": 3,
            "description": "Model service for User"
        },
        "$userAuditLogging": {
            "name": "$userAuditLogging",
            "shortname": "$userAuditLogging",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/user_audit_logging.factory.js",
            "line": 3,
            "description": "Model service for UserAuditLogging"
        },
        "$userSurvey": {
            "name": "$userSurvey",
            "shortname": "$userSurvey",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/user_survey.factory.js",
            "line": 3,
            "description": "Model service for UserSurvey"
        },
        "$userSurveyAnswer": {
            "name": "$userSurveyAnswer",
            "shortname": "$userSurveyAnswer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/user_survey_answer.factory.js",
            "line": 3,
            "description": "Model service for UserSurveyAnswer"
        },
        "$userSurveyVideo": {
            "name": "$userSurveyVideo",
            "shortname": "$userSurveyVideo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/user_survey_video.factory.js",
            "line": 3,
            "description": "Model service for UserSurveyVideo"
        },
        "$vaccinationReminder": {
            "name": "$vaccinationReminder",
            "shortname": "$vaccinationReminder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/vaccination_reminder.factory.js",
            "line": 3,
            "description": "Model service for VaccinationReminder"
        },
        "$video": {
            "name": "$video",
            "shortname": "$video",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/video.factory.js",
            "line": 3,
            "description": "Model service for Video"
        },
        "$videoAuditLogging": {
            "name": "$videoAuditLogging",
            "shortname": "$videoAuditLogging",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VaccineSurveySdk",
            "submodule": "models",
            "namespace": "",
            "file": "sdk/models/video_audit_logging.factory.js",
            "line": 3,
            "description": "Model service for VideoAuditLogging"
        },
        "{Cache}": {
            "name": "{Cache}",
            "shortname": "{Cache}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "utility",
            "namespace": "",
            "file": "sdk/utility/cache.service.js",
            "line": 3,
            "description": "Local cache class, uses ngStorage internally to persist data across sessions in the browser"
        },
        "$helpers": {
            "name": "$helpers",
            "shortname": "$helpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AP",
            "submodule": "utility",
            "namespace": "",
            "file": "sdk/utility/helpers.service.js",
            "line": 3
        }
    },
    "classitems": [
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 24,
            "itemtype": "property",
            "name": "useMockServer",
            "type": "{Boolean}",
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 32,
            "itemtype": "property",
            "name": "$restClient",
            "type": "{HttpClient}",
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 37,
            "itemtype": "property",
            "name": "$mockServer",
            "type": "{MockServer}",
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 44,
            "description": "Returns a request transformation depending on whether the model has fields that are of type file or not. When files are\npresent, the transformation returned will give back FormData with the data, else the data will just be returned as is.",
            "itemtype": "method",
            "name": "encodeDataTransformation",
            "params": [
                {
                    "name": "the",
                    "description": "data to transform",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "array containing the name of all the file fields in the model (empty if none present)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "request transformation to apply to the request",
                "type": "Function"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 75,
            "description": "Setting the base url for an adapter will change the base url in the Adapter's HttpClient, so all requests will be directed\nto the new url.",
            "itemtype": "method",
            "name": "setBaseUrl",
            "params": [
                {
                    "name": "url",
                    "description": "the new url to use as base of the API",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 88,
            "description": "Returns an array containing the names of all the fields in the given model that are of type file,\nor an empty array if none are present.",
            "itemtype": "method",
            "name": "getModelFileFields",
            "params": [
                {
                    "name": "the",
                    "description": "model to which the fields belong",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the array of field names",
                "type": "Array"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 105,
            "description": "Given an array of transformations to apply to a request, it will return a new array containing Angular's default request transformations\nwith the passed transformations appended to its tail.",
            "itemtype": "method",
            "name": "appendToDefaultRequestTransformations",
            "params": [
                {
                    "name": "array",
                    "description": "of transformations to add to the default ones",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the concatenation of both default transformations and passed transformations",
                "type": "Array"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 120,
            "description": "Given an array of transformations to apply to a response, it will return a new array containing Angular's default resṕonse transformations\nwith the passed transformations appended to its tail.",
            "itemtype": "method",
            "name": "appendToDefaultRequestTransformations",
            "params": [
                {
                    "name": "array",
                    "description": "of transformations to add to the default ones",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the concatenation of both default transformations and passed transformations",
                "type": "Array"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 135,
            "description": "Sends an ajax request for a Model instance. Here the Adapter routes the request to the HttpClient or the MockServer.",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "method",
                    "description": "HTTP verb (GET, POST, PUT, PATCH or DELETE)",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "a Model executing the request, for example $person or $employee (this is not a specific resource but the Model service)",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "request options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise obtained from either HttpClient or MockServer doing an AJAX request",
                "type": "Promise"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 161,
            "description": "Handles the create action on a Model",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "the",
                    "description": "model service to get the url from and to send to the ajax method of the adapter",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "data to send in the request for creation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise object returned by the ajax method",
                "type": "Promise"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 190,
            "description": "Handles the update action on a Model",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "the",
                    "description": "model service to get the url from and to send to the ajax method of the adapter",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "data to update in the server",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise object returned by the ajax method",
                "type": "Promise"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 219,
            "description": "Handles the read action on a Model",
            "itemtype": "method",
            "name": "read",
            "params": [
                {
                    "name": "the",
                    "description": "model service to get the url from and to send to the ajax method of the adapter",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "object containing the id of the instance being read from the server",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise object returned by the ajax method",
                "type": "Promise"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 234,
            "description": "Handles the delete action on a Model",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "the",
                    "description": "model service to get the url from and to send to the ajax method of the adapter",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "data containing the id of the instance to delete",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise object returned by the ajax method",
                "type": "Promise"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 248,
            "description": "Handles query scope requests on a Model",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "the",
                    "description": "model service to get the url from and to send to the ajax method of the adapter",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "name of the query scope to execute",
                    "type": "String"
                },
                {
                    "name": "the",
                    "description": "configuration of the query to send as query scope params",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "to be executed if the request is successful",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "to be executed in the event of an error",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "/{Object} an empty array or an object with an empty value field (an array for object query scopes, and an object for aggregate query scope)\n            that will be populated when the data comes back from the server",
                "type": "Array"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 309,
            "description": "Formats the query attributes like so:\n{\n  query: {\n    name: \"John\",\n    age: 30\n  }\n}\n>>>> INTO >>>>\n{\n  \"query[name]\": \"John\",\n  \"query[age]\": 30\n}\n\nTo accomodate to the query string params expected by AP backend services",
            "itemtype": "method",
            "name": "mapQueryParams",
            "params": [
                {
                    "name": "the",
                    "description": "query configuration for a query scope",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the changed version of the configuration object",
                "type": "Object"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 341,
            "description": "Formats an Object to send as request parameters of a query scope",
            "itemtype": "method",
            "name": "buildParams",
            "params": [
                {
                    "name": "the",
                    "description": "name of the scope",
                    "type": "String"
                },
                {
                    "name": "the",
                    "description": "attributes for the query",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "key/value pairs for query string parameters name/values",
                "type": "Object"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/adapter.factory.js",
            "line": 359,
            "description": "Creates an Adapter instance",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "configuration options for the request instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Adapter"
            },
            "class": "Adapter",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/dispatcher.factory.js",
            "line": 22,
            "description": "The default Adapter instance",
            "itemtype": "property",
            "name": "default",
            "type": "{Adapter}",
            "class": "Dispatcher",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/dispatcher.factory.js",
            "line": 28,
            "description": "List of registered Adapters",
            "itemtype": "property",
            "name": "adapters",
            "type": "{Object[]}",
            "class": "Dispatcher",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/dispatcher.factory.js",
            "line": 36,
            "description": "Registers an adapter by name within the Dispatcher",
            "itemtype": "method",
            "name": "addAdapter",
            "params": [
                {
                    "name": "name",
                    "description": "the name by which this Adapter will be known and located",
                    "type": "String"
                },
                {
                    "name": "adapter",
                    "description": "the Adapter instance to add",
                    "type": "Adapter"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Dispatcher",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/dispatcher.factory.js",
            "line": 49,
            "description": "Gets a registered Adapter given a name. If no Adapter is found with that name the default one will be returned",
            "itemtype": "method",
            "name": "adapter",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the wanted Adapter",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Adapter"
            },
            "class": "Dispatcher",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/dispatcher.factory.js",
            "line": 72,
            "description": "Creates a Dispatcher instance",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "configuration options for creating a new Dispatcher",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Dispatcher"
            },
            "class": "Dispatcher",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 17,
            "description": "The http adapter does not have a class constructor it is quite simply a regular adapter with extra behaviour attached to it",
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 24,
            "itemtype": "property",
            "name": "config",
            "type": "{Object} a configuration object for the http adapter. Its configurable values include things like base url, default headers and query string params, etc.",
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 30,
            "itemtype": "property",
            "name": "interpolationRegexp",
            "type": "{RegExp} regular expression used to find the string \"{{}}\" within another string. This enables interpolation.",
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 36,
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "the",
                    "description": "string to interpolate values into",
                    "type": "String"
                },
                {
                    "name": "the",
                    "description": "interpolation context from which the interpolated values are taken from (i.e. str \"{{myId}}\" with context {myId: 1})",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a new string copied from \"str\" but with interpolated values into it",
                "type": "String"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 43,
            "description": "Interpolate strings using {{}} notation",
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 67,
            "description": "Takes the appropiate adapter configuration from a Model based on the name of an action passed as an argument. For example if we wanted the adapter\nconfiguration for the action \"create\" of the Model \"Person\" it would return that adapter configuration object. In the case of adapter configurations for\nquery scopes, the method will first look for an action with the name given and if none is found by that name then it will attempt to find a query scope\nwith that name.",
            "itemtype": "method",
            "name": "getConfiguration",
            "params": [
                {
                    "name": "the",
                    "description": "model service from which the adapter configuration is taken",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "name of the action within the model whose configuration",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the adapter configuration from model for the given action",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 89,
            "description": "Helper method. It evaluates a string that contains a javascript object, for example the string \"{id: 1, name: 'Sarah'}\". Evaluating that string\nwill basically create that object in memory, so the result of parsing the object above would be an object {id: 1, name: 'Sarah'}.\nThis method is used to parse body payload templates in json format",
            "itemtype": "method",
            "name": "parseObject",
            "params": [
                {
                    "name": "the",
                    "description": "string to parse the object from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the result of parsing str",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 106,
            "description": "Creates an object with key value pairs where keys are the names of the headers to send in a request and values are the values of those headers.\nThe resulting headers will be a union of the default headers set for the http adapter itself (those headers are taken from the http adapter's \"config\" property)\nand the headers in the adapter configuration for a specific model/action pair. Also values from the model's adapter configuration can override headers from\nthe http adapter. For example, having an http adapter with this headers\n\n{\n  \"Adapter-Header-One\": \"foo\",\n  \"Adapter-Header-Two\": \"bar\"\n}\n\nand a model with the following adapter configuration for the \"create\" action\n\n{\n  adapterConfigurations: {\n    create: {\n      headers: {\n        \"Adpater-Header-Two\": \"Some-Other-Stuff\",\n        \"Custom-Header\": \"Hello\"\n      }\n    }\n  }\n}\n\nthe resulting object will be\n\n{\n  \"Adapter-Header-One\": \"foo\",\n  \"Adapter-Header-Two\": \"Some-Other-Stuff\",\n  \"Custom-Header\": \"Hello\"\n}\n\nAlso, any and all headers, from the http adapter or the model's adapter configuration can have values with the \"{{}}\" placeholder",
            "itemtype": "method",
            "name": "buildHeaders",
            "params": [
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "object to act as interpolation context in the event that some header values require interpolated values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "key/value pair object where keys are header names and values are the values for those headers",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 172,
            "description": "Creates an Object where keys are query string parameters's name and their corresponding value. Like with headers the resulting Object will inlcude params\nfrom the http adapter's default params as well as params from the adapter configuration passed as an argument. The adapter configuration's params can override\nthe default configuration in the http adapter. (See the example in \"buildHeaders\" as it works the same way).\n\nParams can have interpolation placeholders \"{{}}\" so values will be interpolated in",
            "itemtype": "method",
            "name": "buildParams",
            "params": [
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "object to act as interpolation context in the event that some header values require interpolated values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "key/value pair object where keys are query string parameter names and values are the values for those parameters",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 211,
            "description": "Creates a full url from the url in the http adapter's config object and the incrementalPath taken from an adapter configuration passed\nas an argument. Also interpolates values into that full url if \"{{}}\" placeholders are present in the url.",
            "itemtype": "method",
            "name": "buildUrl",
            "params": [
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "object to act as interpolation context in the event that some header values require interpolated values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the full url where the request will be sent to",
                "type": "String"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 234,
            "description": "Creates an object to send as a request's data. The data object is created from the request field mappings defined in the adapter configuration\npassed as an argument. It also supports value interpolation in the mappings.\nThis method is used whenever a body payload template is not specified for the adapter configuration argument.\nRequest field mappings map the fields from the recieved context to another name.\nFor example, given the following request field mappings:\n  {\n    id: \"foo\",\n    name: \"bar\",\n    age: \"{{name}}\"\n  }\nAnd a context:\n  {\n    id: 1,\n    name: \"Helen\",\n    age: 30\n  }\nIt will yield the following data object to send in the request:\n  {\n    foo: 1,\n    bar: \"Helen\",\n    Helen: 30\n  }\nIf the format of the request is xml then that final object will be converted to an xml string with this structure\nThe value if the field \"objectNameMapping\" is used as a top level node in this case\nAssuming an objectNameMapping = \"person\"\n\n<person>\n  <foo>1</foo>\n  <bar>Helen</bar>\n  <Helen>30</Helen>\n</person>",
            "itemtype": "method",
            "name": "buildRequestMappings",
            "params": [
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "object to act as interpolation context in the event that some header values require interpolated values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "/{String} the object to send as data within the request or an xml string version of that same object",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 294,
            "description": "Creates the data to send in a request out of a body payload template in the adapter configuration passed as a parameter.\nUnlike \"buildRequestMappings\" the structure of the resulting object is defined by the template itself and all that is done\nis interpolating values into that template.\nIf the format of the request is json then once values are interpolated in the template string will be parsed into an actual\nobject literal to send as data. If its xml then the returned data will be a string.",
            "itemtype": "method",
            "name": "buildBodyPayload",
            "params": [
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "object to act as interpolation context in the event that some header values require interpolated values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "/{String} the object literal to send as data (json) or the xml string to send as data (xml)",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 320,
            "description": "Creates the entire request configuration to pass to the {HttpClient} to be sent to the server. It builds the request headers, query string parameters,\nurl, data and adds the appropiate content type header according to the format of the request. The created request is based on both the http adapter's\nconfig object and the adapter configuration passed as an argument.",
            "itemtype": "method",
            "name": "buildRequest",
            "params": [
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "object to act as interpolation context in the event that some header values require interpolated values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a request configuration object to pass to an {HttpClient}",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 365,
            "description": "Evaluates an XPath or JSONPath expression on a response data object. Whether the path selector is XPath or JSONPath is infered from\nthe format of the adapter configuration that is passed along with the response data.\nThis feature requires external libraries (both included with the SDK):\n  for JSON  -> jsonPath\n  for XML   -> wicked-good-xpath",
            "itemtype": "method",
            "name": "getPathFromSelector",
            "params": [
                {
                    "name": "an",
                    "description": "object holding some response data from the server",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "/{XPathResult} An array of javascript objects which are the result of evaluating the expression (in the case of json) or an\n              {XPathResult} object (in case of xml)",
                "type": "Array"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 406,
            "description": "Analogous to \"buildRequestMappings\" but used to map the values recieved from a response into the fields of a context.\nThe response mappings do NOT allow interpolation on the mapping name, however you can set an XPath or JSONPath expression\nas a mapping so you can select any fragment of the response to map to a field.\nIn the case of an XML response, and response field mappings with XPath expressions, the result of evaluating the XPath expression\nis not a text node, the value of the mapped field will be a string representation of the node structure.\nFor example:\n\n  If the response is:\n\n  <person>\n    <name>John</name>\n    <description>\n      <short>A short version of the description</short>\n      <large>\n        A much larger description going in depth...\n      </large>\n    </description>\n  </person>\n\n  and the following response mappings:\n\n  {\n    name: \"/person/name/text()\",\n    description: \"/person/description\"\n  }\n\n  The resulting object will be:\n\n  {\n    name: \"John\",\n    description: \"<short>A short version of the description</short><large>A much larger description going in depth...</large>\"\n  }\n\n  The selected response passed as a first argument is the result of evaluating the pathSelector in the adapter configuration\n  on the full response from the server.\n  There are two levels of expression evaluation:\n    1) The pathSelector, specified in the adapter configuration, is evaluated on the actual response from the server and\n        returns just a fragment/s of the entire response\n    2) Out of that fragment/s gotten from the first evaluation, if any response field mappings have expressions as mappings, then that\n        expression is evaluated on the fragment/s of the response not the entire response (unless the fragment is equal to the entire response)",
            "itemtype": "method",
            "name": "mapResponse",
            "params": [
                {
                    "name": "the",
                    "description": "selected response after evaluating the \"pathSelector\" on the entire response",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data to use in a Model instance or {Resource} object",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 483,
            "description": "Handles the response for single element actions (i.e. create, update, etc).\nIt evaluates the \"pathSelector\" from the adapter configuration passed as an argument on the response passed as an argument.\nThe result from the evaluation is used as a selected response in \"mapResponse\".\nIt will return the mapped data for that single element.",
            "itemtype": "method",
            "name": "handleResponse",
            "params": [
                {
                    "name": "the",
                    "description": "response data coming from the server",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the mapped data for a {Resource} instance",
                "type": "Object"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 510,
            "description": "Handles the response for query scopes.\nIt evaluates the \"pathSelector\" from the adapter configuration passed as an argument on the response passed as an argument.\nThe result of that evaluation should be a collection. That collection will be iterated over and for each element \"mapResponse\"\nwill be called using that item in the collection as the selected response.\nIt will return a collection of mapped data.",
            "itemtype": "method",
            "name": "handleQueryResponse",
            "params": [
                {
                    "name": "the",
                    "description": "response data coming from the server",
                    "type": "Object"
                },
                {
                    "name": "an",
                    "description": "adapter configuration for some action on some Model (which adapter configuration in which Model is irrelevant)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "collection of mapped data",
                "type": "Array"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 548,
            "description": "Handles the create action of a Model",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "the",
                    "description": "model from where the adapter configuration for the \"create\" action will be taken",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "data to send to the server for creation",
                    "type": "Object"
                },
                {
                    "name": "the",
                    "description": "interpolation context to use to build the request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise returned by the adapter's ajax method",
                "type": "Promise"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 579,
            "description": "Handles the update action of a Model",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "the",
                    "description": "model from where the adapter configuration for the \"update\" action will be taken",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "data to send to the server for updating",
                    "type": "Object"
                },
                {
                    "name": "the",
                    "description": "interpolation context to use to build the request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise returned by the adapter's ajax method",
                "type": "Promise"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 610,
            "description": "Handles the read action of a Model",
            "itemtype": "method",
            "name": "read",
            "params": [
                {
                    "name": "the",
                    "description": "model from where the adapter configuration for the \"read\" action will be taken",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "interpolation context to use to build the request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise returned by the adapter's ajax method",
                "type": "Promise"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 636,
            "description": "Handles the delete action of a Model",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "the",
                    "description": "model from where the adapter configuration for the \"delete\" action will be taken",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "interpolation context to use to build the request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise returned by the adapter's ajax method",
                "type": "Promise"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http.adapter.factory.js",
            "line": 659,
            "description": "Handles the query scopes for a Model",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "the",
                    "description": "model from where the adapter configuration for the appropiate query scope will be taken",
                    "type": "Model"
                },
                {
                    "name": "the",
                    "description": "name of the query scope being executed",
                    "type": "String"
                },
                {
                    "name": "the",
                    "description": "interpolation context to use to build the request",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "to be run if the request is successful",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "to be run if there is an error",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "an empty array that will be populated when the response comes from the server",
                "type": "Array"
            },
            "class": "$httpAdapterFactory",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 33,
            "itemtype": "property",
            "name": "useOfflineCache",
            "type": "{Boolean}",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 38,
            "itemtype": "property",
            "name": "user",
            "type": "{String} the username of the currently logged in user (if there is a user logged in)",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 43,
            "itemtype": "property",
            "name": "url",
            "type": "{String} url route",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 48,
            "itemtype": "property",
            "name": "headers",
            "type": "{Object} key-value pairs where \"key\" is the header name and \"value\" is the header value",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 53,
            "itemtype": "property",
            "name": "params",
            "type": "{Object} key-value pairs for query string parameters",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 58,
            "itemtype": "property",
            "name": "data",
            "type": "{Object} key-value pairs for data to send inside the request body (not applicable when executing GET requests)",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 63,
            "itemtype": "property",
            "name": "onSuccess",
            "type": "{Function} callback to apply when a request returns successfully from the server",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 68,
            "itemtype": "property",
            "name": "onError",
            "type": "{Function} callback function to apply when there is an error after sending a request to the server",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 73,
            "itemtype": "property",
            "name": "withCredentials",
            "type": "{Boolean} specifies whether the request to send is a cross-domain kind of request",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 78,
            "description": "Request transformations are executed after the request is built and before it is sent to the server\nThis array contains Function objects which execute in order and the return value of each function is passed\nto the next one in the Array. The first transformation recieves the request data. If a Function returns a value then this\nvalue is passed to the next in the chain, if no value is returned then the object being passed along the chain passed to the next\nFunction as it was recieved by the former. Query string params can't be altered by this transformations, only payload data.",
            "itemtype": "property",
            "name": "requestTransformations",
            "type": "{Function[]} array of transformations to apply to the request data before sending it to the server",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 88,
            "description": "Response transformations are executed after the response comes back from the server and before the success or error\ncallbacks are executed. This array contains Functions that execute in order and the return value of each one of these is passed\non to the next in the chain. The first Function on the array recieves the response from the server. If a Function returns\nno value then the object being passed is not altered, and it is passed to the next Function as an argument.",
            "itemtype": "property",
            "name": "responseTransformations",
            "type": "{Function[]} array of transformations to apply to the response data after it comes back from the server and before the success or error callbacks are executed",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 97,
            "description": "Request interceptor chain to modify a request object before sending it to the server",
            "itemtype": "property",
            "name": "requestInterceptors",
            "type": "Array",
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 105,
            "description": "Creates the Object that is passed to angular's $http service. This resulting Object will contain the default $http configuration,\noverriden by the HttpClient's configuration properties, and then also overriden by any additional configuration passed as arguments to\nthis Function.\n\nFor example:\n\nIf\n```\n$http.defaults.headers = { \"Foo\": \"Bar\" }\n```\nAnd\n```\nthis.headers = { \"Foo2\": \"Bar2\" }\n```\nAnd\n```\nheaders (Function argument) =\n{\n  \"Foo\": \"NotBar\",\n  \"Foo3\": \"Bar3\"\n}\n```\nThe resulting Object will contain\n```\n{\n  headers: {\n    \"Foo\": \"NotBar\",\n    \"Foo2\": \"Bar2\",\n    \"Foo3\": \"Bar3\"\n  }\n}\n```\n\nAlso the request and response transformations will each be the union of the default transformations,\nthe HttpClient's transformations and any transformations passed as arguments.\nThe urls will also be concatenated using the same hierarchy.",
            "itemtype": "method",
            "name": "buildRequest",
            "params": [
                {
                    "name": "method",
                    "description": "http verb to use",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "url to append to the HttpClient's url",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "query string parameters to send with this request",
                    "type": "Object"
                },
                {
                    "name": "headers",
                    "description": "headers to send with this request",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "payload data to send with this request (not used for GET requests)",
                    "type": "Object"
                },
                {
                    "name": "success",
                    "description": "success callback to execute after this request comes back from the server",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "error callback to execute after this request comes back from the server",
                    "type": "Function"
                },
                {
                    "name": "withCredentials",
                    "description": "whether the request should be cross-domain or not",
                    "type": "Boolean"
                },
                {
                    "name": "requestTransformations",
                    "description": "array of transformations to apply to this request",
                    "type": "Function[]"
                },
                {
                    "name": "responseTransformations",
                    "description": "array of transformations to apply to the response of this request",
                    "type": "Function[]"
                }
            ],
            "return": {
                "description": "the request to pass to angular's $http service",
                "type": "Object"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 214,
            "description": "Applies success and error callbacks to a promise returned by angular's $http service",
            "itemtype": "method",
            "name": "applyCallbacks",
            "params": [
                {
                    "name": "promise",
                    "description": "promise Object obtained as a result of calling $http",
                    "type": "Promise"
                },
                {
                    "name": "successCallbacks",
                    "description": "Array of success callbacks to apply in order to promise",
                    "type": "Function[]"
                },
                {
                    "name": "errorCallbacks",
                    "description": "Array of error callbacks to apply in order to promise",
                    "type": "Function[]"
                }
            ],
            "return": {
                "description": "the same promise passed as an argument but with all callbacks subscribed",
                "type": "Promise"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 244,
            "description": "Execute the HTTP request by calling angular's $http service. If offline caching is enabled it will \"fake\" a response from the\n$http service and return the data from the cache (if there is data available for that request). If the data hasn't been cached\nthen it will make the request to the server and cache the response for later",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "req",
                    "description": "Object representing the configuration of the request to make",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the same promise returned by $http but with all success and error callbacks subscribed to it",
                "type": "Promise"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 281,
            "description": "Runs a chain of {Function} sending them the request object as an argument so they can mutate it, where every\nfunction in the chain gets the result of the previous function.",
            "itemtype": "method",
            "name": "interceptRequest",
            "params": [
                {
                    "name": "the",
                    "description": "request configuration object, which is passed to the first function in the chain",
                    "type": "Object"
                },
                {
                    "name": "chain",
                    "description": "of {Function} objects to execute",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the result of running the entire chain",
                "type": "Object"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 297,
            "description": "Sends an AJAX request. Builds the request, sends it and returns a promise.",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "options",
                    "description": "configuration Object similar to what is passed to the $http service",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 324,
            "description": "Execute a GET request",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "options",
                    "description": "options to configure the request to make",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 335,
            "description": "Execute a POST request",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "options",
                    "description": "options to configure the request to make",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 346,
            "description": "Execute a PUT request",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "options",
                    "description": "options to configure the request to make",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 357,
            "description": "Execute a PATCH request",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "options",
                    "description": "options to configure the request to make",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 368,
            "description": "Execute a DELETE request",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "options",
                    "description": "options to configure the request to make",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/http_client.factory.js",
            "line": 380,
            "description": "Creates an instance of {HttpClient} given a configuration Object",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "configuration options for creating a new HttpClient",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "HttpClient"
            },
            "class": "HttpClient",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 22,
            "description": "Extract the id value from a url, for example given \"http://localhost/api/v1/people/1u987s\"\nthe result would be \"1u987s\"",
            "itemtype": "method",
            "name": "getInstanceIdFromUrl",
            "params": [
                {
                    "name": "url",
                    "description": "the url to extract the id from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "url the id",
                "type": "String"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 42,
            "description": "Given a Model and an id, it creates a complete instance of a that Model, as to simulate\na GET request for a single element, where sending ```GET { id: 1 }```, would usually return something like ```{ id: 1, name: \"John\", age: 30 }```.\nThe reason it takes an id is to keep consistency, so the returned instance has the same id that was searched.",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "model",
                    "description": "the model to create an instance of",
                    "type": "Model"
                },
                {
                    "name": "id",
                    "description": "the id for the instance calling GET",
                    "type": "String"
                }
            ],
            "return": {
                "description": "representation of a JSON response contaning a single instance",
                "type": "Object"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 63,
            "description": "Given an Object containing the data sent by a POST request, it completes that data with every field that\nis defined as auto as those values would usually be filled in by the backend.",
            "itemtype": "method",
            "name": "completeAutoFieldsForInstance",
            "params": [
                {
                    "name": "model",
                    "description": "the model service that holds the fields descriptions for the instance",
                    "type": "Model"
                },
                {
                    "name": "instance",
                    "description": "the request data sent in a POST",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the same data with auto fields filled in",
                "type": "Object"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 84,
            "description": "Generates random data for an instance of a given Model based of its defined fields",
            "itemtype": "method",
            "name": "generateDataForInstance",
            "params": [
                {
                    "name": "model",
                    "description": "the Model for which the data is generated",
                    "type": "Model"
                }
            ],
            "return": {
                "description": "the data for the instance",
                "type": "Object"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 102,
            "description": "Generates a response for an Object Query Scope, basically an Array of a specified length with fake instances of that Model.\nIf no length is passed then it will create 3 instances in the Array",
            "itemtype": "method",
            "name": "generateDataForObjectQueryScope",
            "params": [
                {
                    "name": "model",
                    "description": "the model to which the query scope belongs to",
                    "type": "Model"
                },
                {
                    "name": "length",
                    "description": "the amount of instances wanted in the response",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 119,
            "description": "Generates a response for an Aggregate Query Scope, that is, an Array with a single Object that contains the\nwith the aggregate field for that query scope and a generated value for that aggregate field",
            "itemtype": "method",
            "name": "generateDataForAggregateQueryScope",
            "params": [
                {
                    "name": "model",
                    "description": "the Model service to which the aggregate query scope belongs to",
                    "type": "Model"
                },
                {
                    "name": "aggregateField",
                    "description": "the name of the aggregate field for this Aggregate Query Scope",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 133,
            "description": "Given a field definition for a Model, it generates a random value for that field",
            "itemtype": "method",
            "name": "randomDataForField",
            "params": [
                {
                    "name": "field",
                    "description": "field definition",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "/{String} depending on the field type",
                "type": "Number"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 165,
            "description": "Handles what response to generate for a request, depending on the verb (GET, POST, etc.) and\non whether the request is for an instance or if its a query scope",
            "itemtype": "method",
            "name": "mockDataForRequest",
            "params": [
                {
                    "name": "method",
                    "description": "the HTTP verb of the request",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "the Model instance that triggered the request",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "request options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "/{Object} the fake resonse for the request",
                "type": "Object[]"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 209,
            "description": "Applies transformations to the fake response, simulating what the HttpClient would do.",
            "itemtype": "method",
            "name": "transformResponse",
            "params": [
                {
                    "name": "/{Object}",
                    "description": "response the fake response generated by the MockServer",
                    "type": "Object[]"
                },
                {
                    "name": "transformations",
                    "description": "list of transfomations to apply to the response",
                    "type": "Function[]"
                }
            ],
            "return": {
                "description": "transformed data (could be of any type depending on what the transformations do)"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 226,
            "description": "Handles all responses for the MockServer. It decides if data should be mocked for a request, applies transformations,\nand creates a Promise to return as a result of the fake AJAX call. This promised is resolved immediately, so error callbacks\nadded to the Promise will not be called.",
            "itemtype": "method",
            "name": "respondTo",
            "params": [
                {
                    "name": "method",
                    "description": "the HTTP verb for the request",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "the Model service being synced with the server",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "request options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 271,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the Model service being synced with the server",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "request options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 281,
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "model",
                    "description": "the Model service being synced with the server",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "request options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 291,
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "model",
                    "description": "the Model service being synced with the server",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "request options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 301,
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "model",
                    "description": "the Model service being synced with the server",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "request options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 311,
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "model",
                    "description": "the Model service being synced with the server",
                    "type": "Model"
                },
                {
                    "name": "options",
                    "description": "request options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/adapter/mock_server.factory.js",
            "line": 325,
            "description": "Creates a MockServer instance",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "",
                "type": "MockServer"
            },
            "class": "MockServer",
            "module": "AP",
            "submodule": "adapter"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 44,
            "description": "Stores details about authentication and authorization.",
            "itemtype": "property",
            "name": "settings",
            "type": "Object",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 51,
            "description": "The type of the authentication strategy",
            "itemtype": "property",
            "name": "settings.strategyType",
            "type": "String",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 58,
            "description": "The name of the authentication strategy",
            "itemtype": "property",
            "name": "settings.strategyName",
            "type": "String",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 65,
            "description": "The name of the field to match for authentication.  Only one value is used\nat this time:  `password`.",
            "itemtype": "property",
            "name": "settings.matchField",
            "type": "String",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 73,
            "description": "The name of the field used to find a user.  For example:  `username`.",
            "itemtype": "property",
            "name": "settings.lookupField",
            "type": "String",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 80,
            "description": "The name of the field on the object returned after authenticating that\nstores user roles.  The role field is used by `AP.auth.Authorization`.",
            "itemtype": "property",
            "name": "settings.roleField",
            "type": "String",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 88,
            "description": "The URL of the API endpoint to authenticate",
            "itemtype": "property",
            "name": "settings.authentication_url",
            "type": "String",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 95,
            "description": "URL of logout API endpoint.  Logout requests must be made to this URL.",
            "itemtype": "property",
            "name": "settings.deauthentication_url",
            "type": "String",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 105,
            "description": "Gets the Adapter for the API to which this Auth Object belongs to\nNOTE: For now all Auth Objects belong to an AP backend",
            "itemtype": "method",
            "name": "client",
            "return": {
                "description": "",
                "type": "Adapter"
            },
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 115,
            "description": "Executes login request with passed `credentials`.",
            "itemtype": "method",
            "name": "login",
            "static": 1,
            "params": [
                {
                    "name": "credentials",
                    "description": "the credentials for the user attempting to login",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 130,
            "description": "Executes logout request.",
            "itemtype": "method",
            "name": "logout",
            "static": 1,
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 144,
            "itemtype": "method",
            "name": "isAuthenticated",
            "static": 1,
            "return": {
                "description": "`true` if a user is logged-in",
                "type": "Boolean"
            },
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 153,
            "description": "Performs authentication request with HTTP basic auth.  Upon a successful\nlogin the user object returned by the API is stored for later use.",
            "itemtype": "method",
            "name": "authenticate",
            "static": 1,
            "params": [
                {
                    "name": "credentials",
                    "description": "user credentials object, for example:\n```{\"username\": \"johndoe\", \"password\": \"doe123\"}```.",
                    "type": "Object"
                }
            ],
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 169,
            "itemtype": "event",
            "name": "'auth:error'\nAn auth error event is emitted if a login or logout fails for\nany reason.",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 178,
            "itemtype": "event",
            "name": "'auth:error'\nAn auth error event is emitted if a login or logout fails for\nany reason.",
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 188,
            "description": "Performs deauthentication request.  Upon a successful logout, stored user data\nis removed.",
            "itemtype": "method",
            "name": "deauthenticate",
            "static": 1,
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 202,
            "description": "Returns the lookup field value (username) of the currently logged-in user.",
            "itemtype": "method",
            "name": "getUsername",
            "static": 1,
            "return": {
                "description": "the authenticated user's lookup field value (username)",
                "type": "Object/null"
            },
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication.factory.js",
            "line": 213,
            "description": "Returns the role(s) of the currently logged-in user.",
            "itemtype": "method",
            "name": "getUserRole",
            "static": 1,
            "return": {
                "description": "the authenticated user's role(s)",
                "type": "Object/null"
            },
            "class": "Authentication",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 22,
            "description": "Returns the base url",
            "itemtype": "method",
            "name": "url",
            "return": {
                "description": "the base url string for the SDK",
                "type": "String"
            },
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 31,
            "description": "Convenience method to get a strategy by name",
            "itemtype": "method",
            "name": "strategy",
            "params": [
                {
                    "name": "the",
                    "description": "name of the strategy to get",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the authentication strategy",
                "type": "Authentication"
            },
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 41,
            "description": "Adds a new strategy to be handled by the manager",
            "itemtype": "method",
            "name": "addStrategy",
            "params": [
                {
                    "name": "options",
                    "description": "to construct the strategy",
                    "type": "Object"
                }
            ],
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 50,
            "description": "Sets the X-Session-Id header in the default HttpClient",
            "itemtype": "method",
            "name": "setSessionAsHeader",
            "params": [
                {
                    "name": "the",
                    "description": "session returned as response from authenticating",
                    "type": "Object"
                }
            ],
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 59,
            "description": "Removes the X-Session-Id header in the default HttpClient",
            "itemtype": "method",
            "name": "removeSessionAsHeader",
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 67,
            "description": "Called by the different strategies after getting the response from authenticating.",
            "itemtype": "method",
            "name": "setSession",
            "params": [
                {
                    "name": "the",
                    "description": "session returned as response from authenticating",
                    "type": "Object"
                }
            ],
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 76,
            "itemtype": "event",
            "name": "'auth:authenticated'\nAn authenticated event is emitted after a successful login.",
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 83,
            "description": "Called by the different strategies after deauthenticating",
            "itemtype": "method",
            "name": "destroySession",
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 91,
            "itemtype": "event",
            "name": "auth:deauthenticated\nA deauthenticated event is emitted after the session is destroyed.",
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 98,
            "description": "Convenience method for users to retrieve session data",
            "itemtype": "method",
            "name": "getSession",
            "return": {
                "description": "the session object stored by authentication storage",
                "type": "Object"
            },
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 107,
            "description": "Restores a session from authentication storage. This is used when changing the base url for the SDK, as authentication data might be already\nstored for the new url",
            "itemtype": "method",
            "name": "restoreSession",
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_manager.factory.js",
            "line": 120,
            "description": "Returns whether the user is authenticated",
            "itemtype": "method",
            "name": "isAuthenticated",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AuthenticationManager",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_storage.service.js",
            "line": 17,
            "description": "Object in localStorage dedicated to authentication data",
            "itemtype": "property",
            "name": "store",
            "type": "Object",
            "class": "$authenticationStorageService",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_storage.service.js",
            "line": 24,
            "description": "Gets the localStorage key used to store the authentication data.",
            "itemtype": "method",
            "name": "key",
            "params": [
                {
                    "name": "The",
                    "description": "base url for the SDK",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string key composed from the base url",
                "type": "String"
            },
            "class": "$authenticationStorageService",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_storage.service.js",
            "line": 34,
            "itemtype": "method",
            "name": "isValidSession",
            "params": [
                {
                    "name": "the",
                    "description": "response data returned by the api after authenticating",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "whether the session is valid",
                "type": "Boolean"
            },
            "class": "$authenticationStorageService",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_storage.service.js",
            "line": 46,
            "description": "Saves the session into localStorage",
            "itemtype": "method",
            "name": "saveSession",
            "params": [
                {
                    "name": "the",
                    "description": "base url for the SDK",
                    "type": "String"
                },
                {
                    "name": "the",
                    "description": "response data returned by the api after authenticating",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if success, false otherwise",
                "type": "Boolean"
            },
            "class": "$authenticationStorageService",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_storage.service.js",
            "line": 65,
            "description": "Gets the session from localStorage",
            "itemtype": "method",
            "name": "getSession",
            "params": [
                {
                    "name": "the",
                    "description": "base url for the SDK",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the stored session",
                "type": "Object"
            },
            "class": "$authenticationStorageService",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/auth/authentication_storage.service.js",
            "line": 87,
            "description": "Deletes the session in localStorage",
            "itemtype": "method",
            "name": "deleteSession",
            "params": [
                {
                    "name": "the",
                    "description": "base url for the SDK",
                    "type": "String"
                }
            ],
            "class": "$authenticationStorageService",
            "module": "AP",
            "submodule": "authentication"
        },
        {
            "file": "sdk/config/config.service.js",
            "line": 15,
            "description": "BASE URL SETTINGS",
            "class": "$modelFactory",
            "module": "VaccineSurveySdk",
            "submodule": "config"
        },
        {
            "file": "sdk/config/config.service.js",
            "line": 30,
            "itemtype": "property",
            "name": "baseUrl",
            "type": "{UrlManager}",
            "class": "$modelFactory",
            "module": "VaccineSurveySdk",
            "submodule": "config"
        },
        {
            "file": "sdk/config/config.service.js",
            "line": 38,
            "description": "MOCK SERVER SETTINGS",
            "class": "$modelFactory",
            "module": "VaccineSurveySdk",
            "submodule": "config"
        },
        {
            "file": "sdk/config/config.service.js",
            "line": 51,
            "itemtype": "property",
            "name": "mockServer",
            "type": "{MockServerManager}",
            "class": "$modelFactory",
            "module": "VaccineSurveySdk",
            "submodule": "config"
        },
        {
            "file": "sdk/config/config.service.js",
            "line": 58,
            "description": "OFFLINE CACHE SETTINGS",
            "class": "$modelFactory",
            "module": "VaccineSurveySdk",
            "submodule": "config"
        },
        {
            "file": "sdk/config/config.service.js",
            "line": 71,
            "itemtype": "property",
            "name": "offlineCache",
            "type": "{OfflineCacheManager}",
            "class": "$modelFactory",
            "module": "VaccineSurveySdk",
            "submodule": "config"
        },
        {
            "file": "sdk/config/config.service.js",
            "line": 78,
            "description": "AJAX SETTINGS",
            "class": "$modelFactory",
            "module": "VaccineSurveySdk",
            "submodule": "config"
        },
        {
            "file": "sdk/config/config.service.js",
            "line": 82,
            "itemtype": "method",
            "name": "ajaxSettings",
            "params": [
                {
                    "name": "options",
                    "description": "- http configuration options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "HttpClient"
            },
            "class": "$modelFactory",
            "module": "VaccineSurveySdk",
            "submodule": "config"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1,
            "license": "AngularJS v1.4.3\n(c) 2010-2015 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": "$modelFactory",
            "module": "VaccineSurveySdk"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8,
            "description": "This object provides a utility for producing rich Error messages within\nAngular. It can be called as follows:\n\nvar exampleMinErr = minErr('example');\nthrow exampleMinErr('one', 'This {0} is {1}', foo, bar);\n\nThe above creates an instance of minErr in the example namespace. The\nresulting error will have a namespaced error code of example.one.  The\nresulting error will replace {0} with the value of foo, and {1} with the\nvalue of bar. The object is not restricted in the number of arguments it can\ntake.\n\nIf fewer arguments are specified than necessary for interpolation, the extra\ninterpolation markers will be preserved in the final string.\n\nSince data will be parsed statically during a build step, some restrictions\nare applied with respect to how minErr instances are created and called.\nInstances should have names of the form namespaceMinErr for a minErr created\nusing minErr('namespace') . Error codes, namespaces and template strings\nshould all be static strings, not variables or general expressions.",
            "params": [
                {
                    "name": "module",
                    "description": "The namespace to use for the new minErr instance.",
                    "type": "String"
                },
                {
                    "name": "ErrorConstructor",
                    "description": "Custom error constructor to be instantiated when returning\n  error from returned function, for cases when a particular type of error is useful.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "minErr instance",
                "type": "function(code:string, template:string, ...templateArgs): Error"
            },
            "class": "$modelFactory",
            "module": "VaccineSurveySdk"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 251,
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 256,
            "description": "documentMode is an IE-only property\nhttp://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 263,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns true if `obj` is an array or array-like object (NodeList, Arguments,\n                  String ...)",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 374,
            "description": "when using forEach the params are value, key, but it is often useful to have key, value.",
            "params": [
                {
                    "name": "iteratorFn",
                    "description": "",
                    "type": "Function(string, *)"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*, string)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 383,
            "description": "A consistent way of creating unique IDs in angular.\n\nUsing simple numbers allows us to generate 28.6 million unique ids per second for 10 years before\nwe hit number precision issues in JavaScript.\n\nMath.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M",
            "return": {
                "description": "an unique alpha-numeric string",
                "type": "Number"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 398,
            "description": "Set or clear the hashkey for an object.",
            "params": [
                {
                    "name": "obj",
                    "description": "object"
                },
                {
                    "name": "h",
                    "description": "the hashkey (!truthy to delete the hashkey)"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 594,
            "description": "Determine if a value is an object with a null prototype",
            "return": {
                "description": "True if `value` is an `Object` with a null prototype",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 686,
            "description": "Determines if a value is a regular expression object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "Reference to check.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "True if `value` is a `RegExp`.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 698,
            "description": "Checks if `obj` is a window object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to check",
                    "type": "*"
                }
            ],
            "return": {
                "description": "True if `obj` is a window obj.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 777,
            "params": [
                {
                    "name": "str",
                    "description": "'key1,key2,...'"
                }
            ],
            "return": {
                "description": "in the form of {key1:true, key2:true, ...}",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 958,
            "description": "Creates a shallow copy of an object, an array or a primitive.\n\nAssumes that there are no proto properties for objects.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1256,
            "return": {
                "description": "Returns the string representation of the element.",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1281,
            "description": "Tries to decode the URI component without throwing an exception.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "value potential URI component to check."
                }
            ],
            "return": {
                "description": "True if `value` can be decoded\nwith the decodeURIComponent function.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1298,
            "description": "Parses an escaped url query string into key-value pairs.",
            "return": {
                "description": "",
                "type": "Object.<string,boolean|Array>"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1340,
            "description": "We need our custom method because encodeURIComponent is too aggressive and doesn't follow\nhttp://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\nsegments:\n   segment       = *pchar\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1359,
            "description": "This method is intended for encoding *key* or *value* parts of query component. We need a custom\nmethod because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\nencoded per http://tools.ietf.org/html/rfc3986:\n   query       = *( pchar / \"/\" / \"?\" )\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1765,
            "description": "throw error if the argument is falsy.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1785,
            "description": "throw error if the name given is hasOwnProperty",
            "params": [
                {
                    "name": "name",
                    "description": "the name to test",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "the context in which the name is used, such as module or directive",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1796,
            "description": "Return the value accessible from the object by path. Any undefined traversals are ignored",
            "params": [
                {
                    "name": "obj",
                    "description": "starting object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "path to traverse",
                    "type": "String"
                },
                {
                    "name": "bindFnToScope",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "value as accessible by path",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1823,
            "description": "Return the DOM siblings between the first and last node in the given array.",
            "params": [
                {
                    "name": "array",
                    "description": "like object",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "jqLite collection containing the nodes",
                "type": "JqLite"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1845,
            "description": "Creates a new object without a prototype. This object is useful for lookup without having to\nguard against prototypically inherited properties via hasOwnProperty.\n\nRelated micro-benchmarks:\n- http://jsperf.com/object-create2\n- http://jsperf.com/proto-map-lookup/2\n- http://jsperf.com/for-in-vs-object-keys2",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1891,
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1963,
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1966,
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1969,
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 1974,
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 2184,
            "params": [
                {
                    "name": "provider",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "insertMethod",
                    "description": "",
                    "type": "String="
                }
            ],
            "return": {
                "description": "",
                "type": "angular.Module"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 2198,
            "params": [
                {
                    "name": "provider",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "angular.Module"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 2637,
            "description": "Converts snake_case to camelCase.\nAlso there is special case for Moz prefix starting with upper case letter.",
            "params": [
                {
                    "name": "name",
                    "description": "Name to normalize"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3183,
            "description": "Properties: writes return selection, reads return first value",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3502,
            "description": "chaining functions",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3548,
            "description": "Computes a hash of an 'obj'.\nHash of a:\n string is string\n number is number as string\n object is either result of calling $$hashKey function on the object or uniquely generated id,\n        that is also assigned to the $$hashKey property of the object.",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "hash string such that the same input will have the same hash string.\n        The resulting string key is in 'type:hashKey' format.",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3580,
            "description": "HashMap which can use objects as keys",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3593,
            "description": "Store key value pair",
            "params": [
                {
                    "name": "key",
                    "description": "key to store can be any type"
                },
                {
                    "name": "value",
                    "description": "value to store can be any type"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3602,
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "the value for the key",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3610,
            "description": "Remove the key/value pair",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3681,
            "ngdoc": "module",
            "name": "auto",
            "description": "Implicit module which gets automatically added to each {@link auto.$injector $injector}.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3745,
            "ngdoc": "service",
            "name": "$injector",
            "description": "`$injector` is used to retrieve object instances as defined by\n{@link auto.$provide provider}, instantiate types, invoke methods,\nand load modules.\n\nThe following always holds true:\n\n```js\n  var $injector = angular.injector();\n  expect($injector.get('$injector')).toBe($injector);\n  expect($injector.invoke(function($injector) {\n    return $injector;\n  })).toBe($injector);\n```\n\n# Injection Function Annotation\n\nJavaScript does not have annotations, and annotations are needed for dependency injection. The\nfollowing are all valid ways of annotating function with injection arguments and are equivalent.\n\n```js\n  // inferred (only works if code not minified/obfuscated)\n  $injector.invoke(function(serviceA){});\n\n  // annotated\n  function explicit(serviceA) {};\n  explicit.$inject = ['serviceA'];\n  $injector.invoke(explicit);\n\n  // inline\n  $injector.invoke(['serviceA', function(serviceA){}]);\n```\n\n## Inference\n\nIn JavaScript calling `toString()` on a function returns the function definition. The definition\ncan then be parsed and the function arguments can be extracted. This method of discovering\nannotations is disallowed when the injector is in strict mode.\n*NOTE:* This does not work with minification, and obfuscation tools since these tools change the\nargument names.\n\n## `$inject` Annotation\nBy adding an `$inject` property onto a function the injection parameters can be specified.\n\n## Inline\nAs an array of injection names, where the last item in the array is the function to call.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3798,
            "ngdoc": "method",
            "name": "$injector#get",
            "description": "Return an instance of the service.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance to retrieve.",
                    "type": "String"
                },
                {
                    "name": "caller",
                    "description": "An optional string to provide the origin of the function call for error messages.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "The instance.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3810,
            "ngdoc": "method",
            "name": "$injector#invoke",
            "description": "Invoke the method and supply the method arguments from the `$injector`.",
            "params": [
                {
                    "name": "fn",
                    "description": "The injectable function to invoke. Function parameters are\n  injected according to the {@link guide/di $inject Annotation} rules.",
                    "type": "Function|Array.<string|Function>"
                },
                {
                    "name": "self",
                    "description": "The `this` for the invoked method.",
                    "type": "Object="
                },
                {
                    "name": "locals",
                    "description": "Optional object. If preset then any argument names are read from this\n                        object first, before the `$injector` is consulted.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the value returned by the invoked `fn` function.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3825,
            "ngdoc": "method",
            "name": "$injector#has",
            "description": "Allows the user to query if the particular service exists.",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the service to query.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`true` if injector has given service.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3836,
            "ngdoc": "method",
            "name": "$injector#instantiate",
            "description": "Create a new instance of JS type. The method takes a constructor function, invokes the new\noperator, and supplies all of the arguments to the constructor function as specified by the\nconstructor annotation.",
            "params": [
                {
                    "name": "Type",
                    "description": "Annotated constructor function.",
                    "type": "Function"
                },
                {
                    "name": "locals",
                    "description": "Optional object. If preset then any argument names are read from this\nobject first, before the `$injector` is consulted.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "new instance of `Type`.",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3850,
            "ngdoc": "method",
            "name": "$injector#annotate",
            "description": "Returns an array of service names which the function is requesting for injection. This API is\nused by the injector to determine which services need to be injected into the function when the\nfunction is invoked. There are three ways in which the function can be annotated with the needed\ndependencies.\n\n# Argument names\n\nThe simplest form is to extract the dependencies from the arguments of the function. This is done\nby converting the function into a string using `toString()` method and extracting the argument\nnames.\n```js\n  // Given\n  function MyController($scope, $route) {\n    // ...\n  }\n\n  // Then\n  expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\nYou can disallow this method by using strict injection mode.\n\nThis method does not work with code minification / obfuscation. For this reason the following\nannotation strategies are supported.\n\n# The `$inject` property\n\nIf a function has an `$inject` property and its value is an array of strings, then the strings\nrepresent names of services to be injected into the function.\n```js\n  // Given\n  var MyController = function(obfuscatedScope, obfuscatedRoute) {\n    // ...\n  }\n  // Define function dependencies\n  MyController['$inject'] = ['$scope', '$route'];\n\n  // Then\n  expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\n# The array notation\n\nIt is often desirable to inline Injected functions and that's when setting the `$inject` property\nis very inconvenient. In these situations using the array notation to specify the dependencies in\na way that survives minification is a better choice:\n\n```js\n  // We wish to write this (not minification / obfuscation safe)\n  injector.invoke(function($compile, $rootScope) {\n    // ...\n  });\n\n  // We are forced to write break inlining\n  var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n    // ...\n  };\n  tmpFn.$inject = ['$compile', '$rootScope'];\n  injector.invoke(tmpFn);\n\n  // To better support inline function the inline annotation is supported\n  injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n    // ...\n  }]);\n\n  // Therefore\n  expect(injector.annotate(\n     ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n   ).toEqual(['$compile', '$rootScope']);\n```",
            "params": [
                {
                    "name": "fn",
                    "description": "Function for which dependent service names need to\nbe retrieved as described above.",
                    "type": "Function|Array.<string|Function>"
                },
                {
                    "name": "strictDi",
                    "description": "Disallow argument name annotation inference.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The names of the services which the function requires.",
                "type": "Array.<string>"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3937,
            "ngdoc": "service",
            "name": "$provide",
            "description": "The {@link auto.$provide $provide} service has a number of methods for registering components\nwith the {@link auto.$injector $injector}. Many of these functions are also exposed on\n{@link angular.Module}.\n\nAn Angular **service** is a singleton object created by a **service factory**.  These **service\nfactories** are functions which, in turn, are created by a **service provider**.\nThe **service providers** are constructor functions. When instantiated they must contain a\nproperty called `$get`, which holds the **service factory** function.\n\nWhen you request a service, the {@link auto.$injector $injector} is responsible for finding the\ncorrect **service provider**, instantiating it and then calling its `$get` **service factory**\nfunction to get the instance of the **service**.\n\nOften services have no configuration options and there is no need to add methods to the service\nprovider.  The provider will be no more than a constructor function with a `$get` property. For\nthese cases the {@link auto.$provide $provide} service has additional helper methods to register\nservices without specifying a provider.\n\n* {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the\n    {@link auto.$injector $injector}\n* {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by\n    providers and services.\n* {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by\n    services, not providers.\n* {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,\n    that will be wrapped in a **service provider** object, whose `$get` property will contain the\n    given factory function.\n* {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`\n    that will be wrapped in a **service provider** object, whose `$get` property will instantiate\n     a new object using the given constructor function.\n\nSee the individual methods for more information and examples.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 3977,
            "ngdoc": "method",
            "name": "$provide#provider",
            "description": "Register a **provider function** with the {@link auto.$injector $injector}. Provider functions\nare constructor functions, whose instances are responsible for \"providing\" a factory for a\nservice.\n\nService provider names start with the name of the service they provide followed by `Provider`.\nFor example, the {@link ng.$log $log} service has a provider called\n{@link ng.$logProvider $logProvider}.\n\nService provider objects can have additional methods which allow configuration of the provider\nand its service. Importantly, you can configure what kind of service is created by the `$get`\nmethod, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a\nmethod {@link ng.$logProvider#debugEnabled debugEnabled}\nwhich lets you specify whether the {@link ng.$log $log} service will log debug messages to the\nconsole or not.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance. NOTE: the provider will be available under `name +\n                       'Provider'` key.",
                    "type": "String"
                },
                {
                    "name": "provider",
                    "description": "If the provider is:\n\n  - `Object`: then it should have a `$get` method. The `$get` method will be invoked using\n    {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.\n  - `Constructor`: a new instance of the provider will be created using\n    {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.",
                    "type": "(Object|function())"
                }
            ],
            "return": {
                "description": "registered provider instance",
                "type": "Object"
            },
            "example": [
                "\n\nThe following example shows how to create a simple event tracking service and register it using\n{@link auto.$provide#provider $provide.provider()}.\n\n```js\n // Define the eventTracker provider\n function EventTrackerProvider() {\n   var trackingUrl = '/track';\n\n   // A provider method for configuring where the tracked events should been saved\n   this.setTrackingUrl = function(url) {\n     trackingUrl = url;\n   };\n\n   // The service factory function\n   this.$get = ['$http', function($http) {\n     var trackedEvents = {};\n     return {\n       // Call this to track an event\n       event: function(event) {\n         var count = trackedEvents[event] || 0;\n         count += 1;\n         trackedEvents[event] = count;\n         return count;\n       },\n       // Call this to save the tracked events to the trackingUrl\n       save: function() {\n         $http.post(trackingUrl, trackedEvents);\n       }\n     };\n   }];\n }\n\n describe('eventTracker', function() {\n   var postSpy;\n\n   beforeEach(module(function($provide) {\n     // Register the eventTracker provider\n     $provide.provider('eventTracker', EventTrackerProvider);\n   }));\n\n   beforeEach(module(function(eventTrackerProvider) {\n     // Configure eventTracker provider\n     eventTrackerProvider.setTrackingUrl('/custom-track');\n   }));\n\n   it('tracks events', inject(function(eventTracker) {\n     expect(eventTracker.event('login')).toEqual(1);\n     expect(eventTracker.event('login')).toEqual(2);\n   }));\n\n   it('saves to the tracking url', inject(function(eventTracker, $http) {\n     postSpy = spyOn($http, 'post');\n     eventTracker.event('login');\n     eventTracker.save();\n     expect(postSpy).toHaveBeenCalled();\n     expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');\n     expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');\n     expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });\n   }));\n });\n```"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4073,
            "ngdoc": "method",
            "name": "$provide#factory",
            "description": "Register a **service factory**, which will be called to return the service instance.\nThis is short for registering a service where its provider consists of only a `$get` property,\nwhich is the given service factory function.\nYou should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to\nconfigure your service in a provider.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance.",
                    "type": "String"
                },
                {
                    "name": "$getFn",
                    "description": "The injectable $getFn for the instance creation.\n                     Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.",
                    "type": "Function|Array.<string|Function>"
                }
            ],
            "return": {
                "description": "registered provider instance",
                "type": "Object"
            },
            "example": [
                "\nHere is an example of registering a service\n```js\n  $provide.factory('ping', ['$http', function($http) {\n    return function ping() {\n      return $http.send('/ping');\n    };\n  }]);\n```\nYou would then inject and use this service like this:\n```js\n  someModule.controller('Ctrl', ['ping', function(ping) {\n    ping();\n  }]);\n```"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4107,
            "ngdoc": "method",
            "name": "$provide#service",
            "description": "Register a **service constructor**, which will be invoked with `new` to create the service\ninstance.\nThis is short for registering a service where its provider's `$get` property is the service\nconstructor function that will be used to instantiate the service instance.\n\nYou should use {@link auto.$provide#service $provide.service(class)} if you define your service\nas a type/class.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance.",
                    "type": "String"
                },
                {
                    "name": "constructor",
                    "description": "An injectable class (constructor function)\n    that will be instantiated.",
                    "type": "Function|Array.<string|Function>"
                }
            ],
            "return": {
                "description": "registered provider instance",
                "type": "Object"
            },
            "example": [
                "\nHere is an example of registering a service using\n{@link auto.$provide#service $provide.service(class)}.\n```js\n  var Ping = function($http) {\n    this.$http = $http;\n  };\n\n  Ping.$inject = ['$http'];\n\n  Ping.prototype.send = function() {\n    return this.$http.get('/ping');\n  };\n  $provide.service('ping', Ping);\n```\nYou would then inject and use this service like this:\n```js\n  someModule.controller('Ctrl', ['ping', function(ping) {\n    ping.send();\n  }]);\n```"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4149,
            "ngdoc": "method",
            "name": "$provide#value",
            "description": "Register a **value service** with the {@link auto.$injector $injector}, such as a string, a\nnumber, an array, an object or a function.  This is short for registering a service where its\nprovider's `$get` property is a factory function that takes no arguments and returns the **value\nservice**.\n\nValue services are similar to constant services, except that they cannot be injected into a\nmodule configuration function (see {@link angular.Module#config}) but they can be overridden by\nan Angular\n{@link auto.$provide#decorator decorator}.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "registered provider instance",
                "type": "Object"
            },
            "example": [
                "\nHere are some examples of creating value services.\n```js\n  $provide.value('ADMIN_USER', 'admin');\n\n  $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });\n\n  $provide.value('halfOf', function(value) {\n    return value / 2;\n  });\n```"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4182,
            "ngdoc": "method",
            "name": "$provide#constant",
            "description": "Register a **constant service**, such as a string, a number, an array, an object or a function,\nwith the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be\ninjected into a module configuration function (see {@link angular.Module#config}) and it cannot\nbe overridden by an Angular {@link auto.$provide#decorator decorator}.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the constant.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The constant value.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "registered instance",
                "type": "Object"
            },
            "example": [
                "\nHere a some examples of creating constants:\n```js\n  $provide.constant('SHARD_HEIGHT', 306);\n\n  $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);\n\n  $provide.constant('double', function(value) {\n    return value * 2;\n  });\n```"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4210,
            "ngdoc": "method",
            "name": "$provide#decorator",
            "description": "Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator\nintercepts the creation of a service, allowing it to override or modify the behaviour of the\nservice. The object returned by the decorator may be the original service, or a new service\nobject which replaces or wraps and delegates to the original service.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the service to decorate.",
                    "type": "String"
                },
                {
                    "name": "decorator",
                    "description": "This function will be invoked when the service needs to be\n   instantiated and should return the decorated service instance. The function is called using\n   the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.\n   Local injection arguments:\n\n   * `$delegate` - The original service instance, which can be monkey patched, configured,\n     decorated or delegated to.",
                    "type": "Function|Array.<string|Function>"
                }
            ],
            "example": [
                "\nHere we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting\ncalls to {@link ng.$log#error $log.warn()}.\n```js\n  $provide.decorator('$log', ['$delegate', function($delegate) {\n    $delegate.warn = $delegate.error;\n    return $delegate;\n  }]);\n```"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4477,
            "ngdoc": "provider",
            "name": "$anchorScrollProvider",
            "description": "Use `$anchorScrollProvider` to disable automatic scrolling whenever\n{@link ng.$location#hash $location.hash()} changes.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4489,
            "ngdoc": "method",
            "name": "$anchorScrollProvider#disableAutoScrolling",
            "description": "By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to\n{@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />\nUse this method to disable automatic scrolling.\n\nIf automatic scrolling is disabled, one must explicitly call\n{@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the\ncurrent hash.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4506,
            "ngdoc": "service",
            "name": "yOffset!~YUIDOC_LINE~!If set, specifies a vertical scroll-offset. This is often useful when there are fixed!~YUIDOC_LINE~!positioned elements at the top of the page, such as navbars, headers etc.!~YUIDOC_LINE~!!~YUIDOC_LINE~!`yOffset` can be specified in various ways:!~YUIDOC_LINE~!- **number**: A fixed number of pixels to be used as offset.<br /><br />!~YUIDOC_LINE~!- **function**: A getter function called everytime `$anchorScroll()` is executed. Must return!~YUIDOC_LINE~!  a number representing the offset (in pixels).<br /><br />!~YUIDOC_LINE~!- **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from!~YUIDOC_LINE~!  the top of the page to the element's bottom will be used as offset.<br />!~YUIDOC_LINE~!  **Note**: The element will be taken into account only as long as its `position` is set to!~YUIDOC_LINE~!  `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust!~YUIDOC_LINE~!  their height and/or positioning according to the viewport's size.!~YUIDOC_LINE~!!~YUIDOC_LINE~!<br />!~YUIDOC_LINE~!<div class=\"alert alert-warning\">!~YUIDOC_LINE~!In order for `yOffset` to work properly, scrolling should take place on the document's root and!~YUIDOC_LINE~!not some child element.!~YUIDOC_LINE~!</div>",
            "kind": "function",
            "requires": [
                "$window",
                "$location",
                "$rootScope"
            ],
            "description": "When called, it scrolls to the element related to the specified `hash` or (if omitted) to the\ncurrent value of {@link ng.$location#hash $location.hash()}, according to the rules specified\nin the\n[HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).\n\nIt also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to\nmatch any anchor whenever it changes. This can be disabled by calling\n{@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.\n\nAdditionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a\nvertical scroll-offset (either fixed or dynamic).",
            "itemtype": "property",
            "type": "(number|function|jqLite)",
            "example": [
                "\n    <example module=\"anchorScrollExample\">\n      <file name=\"index.html\">\n        <div id=\"scrollArea\" ng-controller=\"ScrollController\">\n          <a ng-click=\"gotoBottom()\">Go to bottom</a>\n          <a id=\"bottom\"></a> You're at the bottom!\n        </div>\n      </file>\n      <file name=\"script.js\">\n        angular.module('anchorScrollExample', [])\n          .controller('ScrollController', ['$scope', '$location', '$anchorScroll',\n            function ($scope, $location, $anchorScroll) {\n              $scope.gotoBottom = function() {\n                // set the location.hash to the id of\n                // the element you wish to scroll to.\n                $location.hash('bottom');\n\n                // call $anchorScroll()\n                $anchorScroll();\n              };\n            }]);\n      </file>\n      <file name=\"style.css\">\n        #scrollArea {\n          height: 280px;\n          overflow: auto;\n        }\n\n        #bottom {\n          display: block;\n          margin-top: 2000px;\n        }\n      </file>\n    </example>\n\n<hr />\nThe example below illustrates the use of a vertical scroll-offset (specified as a fixed value).\nSee {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.",
                "\n    <example module=\"anchorScrollOffsetExample\">\n      <file name=\"index.html\">\n        <div class=\"fixed-header\" ng-controller=\"headerCtrl\">\n          <a href=\"\" ng-click=\"gotoAnchor(x)\" ng-repeat=\"x in [1,2,3,4,5]\">\n            Go to anchor {{x}}\n          </a>\n        </div>\n        <div id=\"anchor{{x}}\" class=\"anchor\" ng-repeat=\"x in [1,2,3,4,5]\">\n          Anchor {{x}} of 5\n        </div>\n      </file>\n      <file name=\"script.js\">\n        angular.module('anchorScrollOffsetExample', [])\n          .run(['$anchorScroll', function($anchorScroll) {\n            $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels\n          }])\n          .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',\n            function ($anchorScroll, $location, $scope) {\n              $scope.gotoAnchor = function(x) {\n                var newHash = 'anchor' + x;\n                if ($location.hash() !== newHash) {\n                  // set the $location.hash to `newHash` and\n                  // $anchorScroll will automatically scroll to it\n                  $location.hash('anchor' + x);\n                } else {\n                  // call $anchorScroll() explicitly,\n                  // since $location.hash hasn't changed\n                  $anchorScroll();\n                }\n              };\n            }\n          ]);\n      </file>\n      <file name=\"style.css\">\n        body {\n          padding-top: 50px;\n        }\n\n        .anchor {\n          border: 2px dashed DarkOrchid;\n          padding: 10px 10px 200px 10px;\n        }\n\n        .fixed-header {\n          background-color: rgba(0, 0, 0, 0.2);\n          height: 50px;\n          position: fixed;\n          top: 0; left: 0; right: 0;\n        }\n\n        .fixed-header > a {\n          display: inline-block;\n          margin: 5px 15px;\n        }\n      </file>\n    </example>"
            ],
            "class": "$modelFactory",
            "module": "ng",
            "subprops": [
                {
                    "name": "hash",
                    "description": "The hash specifying the element to scroll to. If omitted, the value of\n                      {@link ng.$location#hash $location.hash()} will be used.",
                    "type": "String="
                }
            ]
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4912,
            "ngdoc": "provider",
            "name": "$animateProvider",
            "description": "Default implementation of $animate that doesn't perform any animations, instead just\nsynchronously performs DOM updates and resolves the returned runner promise.\n\nIn order to enable animations the `ngAnimate` module has to be loaded.\n\nTo see the functional implementation check out `src/ngAnimate/animate.js`.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4929,
            "ngdoc": "method",
            "name": "$animateProvider#register",
            "description": "Registers a new injectable animation factory function. The factory function produces the\nanimation object which contains callback functions for each event that is expected to be\nanimated.\n\n  * `eventFn`: `function(element, ... , doneFunction, options)`\n  The element to animate, the `doneFunction` and the options fed into the animation. Depending\n  on the type of animation additional arguments will be injected into the animation function. The\n  list below explains the function signatures for the different animation methods:\n\n  - setClass: function(element, addedClasses, removedClasses, doneFunction, options)\n  - addClass: function(element, addedClasses, doneFunction, options)\n  - removeClass: function(element, removedClasses, doneFunction, options)\n  - enter, leave, move: function(element, doneFunction, options)\n  - animate: function(element, fromStyles, toStyles, doneFunction, options)\n\n  Make sure to trigger the `doneFunction` once the animation is fully complete.\n\n```js\n  return {\n    //enter, leave, move signature\n    eventFn : function(element, done, options) {\n      //code to run the animation\n      //once complete, then run done()\n      return function endFunction(wasCancelled) {\n        //code to cancel the animation\n      }\n    }\n  }\n```",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation (this is what the class-based CSS value will be compared to).",
                    "type": "String"
                },
                {
                    "name": "factory",
                    "description": "The factory function that will be executed to return the animation\n                          object.",
                    "type": "Function"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 4978,
            "ngdoc": "method",
            "name": "$animateProvider#classNameFilter",
            "description": "Sets and/or returns the CSS class regular expression that is checked when performing\nan animation. Upon bootstrap the classNameFilter value is not set at all and will\ntherefore enable $animate to attempt to perform an animation on any element that is triggered.\nWhen setting the `classNameFilter` value, animations will only be performed on elements\nthat successfully match the filter expression. This in turn can boost performance\nfor low-powered devices as well as applications containing a lot of structural operations.",
            "params": [
                {
                    "name": "expression",
                    "description": "The className expression which will be checked against all animations",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "The current CSS className expression value. If null then there is no expression value",
                "type": "RegExp"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5020,
            "ngdoc": "service",
            "name": "$animate",
            "description": "The $animate service exposes a series of DOM utility methods that provide support\nfor animation hooks. The default behavior is the application of DOM operations, however,\nwhen an animation is detected (and animations are enabled), $animate will do the heavy lifting\nto ensure that animation runs with the triggered DOM operation.\n\nBy default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't\nincluded and only when it is active then the animation hooks that `$animate` triggers will be\nfunctional. Once active then all structural `ng-` directives will trigger animations as they perform\ntheir DOM-related operations (enter, leave and move). Other directives such as `ngClass`,\n`ngShow`, `ngHide` and `ngMessages` also provide support for animations.\n\nIt is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.\n\nTo learn more about enabling animation support, click here to visit the\n{@link ngAnimate ngAnimate module page}.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5043,
            "ngdoc": "method",
            "name": "$animate#on",
            "kind": "function",
            "description": "Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)\n    has fired on the given element or among any of its children. Once the listener is fired, the provided callback\n    is fired with the following params:\n```js\n $animate.on('enter', container,\n    function callback(element, phase) {\n      // cool we detected an enter animation within the container\n    }\n );\n ```",
            "params": [
                {
                    "name": "event",
                    "description": "the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)",
                    "type": "String"
                },
                {
                    "name": "container",
                    "description": "the container element that will capture each of the animation events that are fired on itself\n     as well as among its children",
                    "type": "DOMElement"
                },
                {
                    "name": "callback",
                    "description": "the callback function that will be fired when the listener is triggered\nThe arguments present in the callback function are:\n * `element` - The captured DOM element that the animation was fired on.\n * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).",
                    "type": "Function"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5071,
            "ngdoc": "method",
            "name": "$animate#off",
            "kind": "function",
            "description": "Deregisters an event listener based on the event which has been associated with the provided element. This method\n can be used in three different ways depending on the arguments:\n```js\n // remove all the animation event listeners listening for `enter`\n $animate.off('enter');\n// remove all the animation event listeners listening for `enter` on the given element and its children\n $animate.off('enter', container);\n// remove the event listener function provided by `listenerFn` that is set\n // to listen for `enter` on the given `element` as well as its children\n $animate.off('enter', container, callback);\n ```",
            "params": [
                {
                    "name": "event",
                    "description": "the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)",
                    "type": "String"
                },
                {
                    "name": "container",
                    "description": "the container element the event listener was placed on",
                    "type": "DOMElement="
                },
                {
                    "name": "callback",
                    "description": "the callback function that was registered as the listener",
                    "type": "Function="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5097,
            "ngdoc": "method",
            "name": "$animate#pin",
            "kind": "function",
            "description": "Associates the provided element with a host parent element to allow the element to be animated even if it exists\n   outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the\n   element despite being outside the realm of the application or within another application. Say for example if the application\n   was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated\n   as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind\n   that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.\n\n   Note that this feature is only active when the `ngAnimate` module is used.",
            "params": [
                {
                    "name": "element",
                    "description": "the external element that will be pinned",
                    "type": "DOMElement"
                },
                {
                    "name": "parentElement",
                    "description": "the host parent element that will be associated with the external element",
                    "type": "DOMElement"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5115,
            "ngdoc": "method",
            "name": "$animate#enabled",
            "kind": "function",
            "description": "Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This\n function can be called in four ways:\n```js\n // returns true or false\n $animate.enabled();\n// changes the enabled state for all animations\n $animate.enabled(false);\n $animate.enabled(true);\n// returns true or false if animations are enabled for an element\n $animate.enabled(element);\n// changes the enabled state for an element and its children\n $animate.enabled(element, true);\n $animate.enabled(element, false);\n ```",
            "params": [
                {
                    "name": "element",
                    "description": "the element that will be considered for checking/setting the enabled state",
                    "type": "DOMElement="
                },
                {
                    "name": "enabled",
                    "description": "whether or not the animations will be enabled for the element",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "whether or not animations are enabled",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5146,
            "ngdoc": "method",
            "name": "$animate#cancel",
            "kind": "function",
            "description": "Cancels the provided animation.",
            "params": [
                {
                    "name": "animationPromise",
                    "description": "The animation promise that is returned when an animation is started.",
                    "type": "Promise"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5158,
            "ngdoc": "method",
            "name": "$animate#enter",
            "kind": "function",
            "description": "Inserts the element into the DOM either after the `after` element (if provided) or\n   as the first child within the `parent` element and then triggers an animation.\n   A promise is returned that will be resolved during the next digest once the animation\n   has completed.",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will be inserted into the DOM",
                    "type": "DOMElement"
                },
                {
                    "name": "parent",
                    "description": "the parent element which will append the element as\n   a child (so long as the after element is not present)",
                    "type": "DOMElement"
                },
                {
                    "name": "after",
                    "description": "the sibling element after which the element will be appended",
                    "type": "DOMElement="
                },
                {
                    "name": "options",
                    "description": "an optional collection of options/styles that will be applied to the element",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the animation callback promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5184,
            "ngdoc": "method",
            "name": "$animate#move",
            "kind": "function",
            "description": "Inserts (moves) the element into its new position in the DOM either after\n   the `after` element (if provided) or as the first child within the `parent` element\n   and then triggers an animation. A promise is returned that will be resolved\n   during the next digest once the animation has completed.",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will be moved into the new DOM position",
                    "type": "DOMElement"
                },
                {
                    "name": "parent",
                    "description": "the parent element which will append the element as\n   a child (so long as the after element is not present)",
                    "type": "DOMElement"
                },
                {
                    "name": "after",
                    "description": "the sibling element after which the element will be appended",
                    "type": "DOMElement="
                },
                {
                    "name": "options",
                    "description": "an optional collection of options/styles that will be applied to the element",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the animation callback promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5210,
            "ngdoc": "method",
            "name": "$animate#leave",
            "kind": "function",
            "description": "Triggers an animation and then removes the element from the DOM.\nWhen the function is called a promise is returned that will be resolved during the next\ndigest once the animation has completed.",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will be removed from the DOM",
                    "type": "DOMElement"
                },
                {
                    "name": "options",
                    "description": "an optional collection of options/styles that will be applied to the element",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the animation callback promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5229,
            "ngdoc": "method",
            "name": "$animate#addClass",
            "kind": "function",
            "description": "Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon\n  execution, the addClass operation will only be handled after the next digest and it will not trigger an\n  animation if element already contains the CSS class or if the class is removed at a later step.\n  Note that class-based animations are treated differently compared to structural animations\n  (like enter, move and leave) since the CSS classes may be added/removed at different points\n  depending if CSS or JavaScript animations are used.",
            "params": [
                {
                    "name": "element",
                    "description": "the element which the CSS classes will be applied to",
                    "type": "DOMElement"
                },
                {
                    "name": "className",
                    "description": "the CSS class(es) that will be added (multiple classes are separated via spaces)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "an optional collection of options/styles that will be applied to the element",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the animation callback promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5253,
            "ngdoc": "method",
            "name": "$animate#removeClass",
            "kind": "function",
            "description": "Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon\n  execution, the removeClass operation will only be handled after the next digest and it will not trigger an\n  animation if element does not contain the CSS class or if the class is added at a later step.\n  Note that class-based animations are treated differently compared to structural animations\n  (like enter, move and leave) since the CSS classes may be added/removed at different points\n  depending if CSS or JavaScript animations are used.",
            "params": [
                {
                    "name": "element",
                    "description": "the element which the CSS classes will be applied to",
                    "type": "DOMElement"
                },
                {
                    "name": "className",
                    "description": "the CSS class(es) that will be removed (multiple classes are separated via spaces)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "an optional collection of options/styles that will be applied to the element",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the animation callback promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5277,
            "ngdoc": "method",
            "name": "$animate#setClass",
            "kind": "function",
            "description": "Performs both the addition and removal of a CSS classes on an element and (during the process)\n   triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and\n   `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has\n   passed. Note that class-based animations are treated differently compared to structural animations\n   (like enter, move and leave) since the CSS classes may be added/removed at different points\n   depending if CSS or JavaScript animations are used.",
            "params": [
                {
                    "name": "element",
                    "description": "the element which the CSS classes will be applied to",
                    "type": "DOMElement"
                },
                {
                    "name": "add",
                    "description": "the CSS class(es) that will be added (multiple classes are separated via spaces)",
                    "type": "String"
                },
                {
                    "name": "remove",
                    "description": "the CSS class(es) that will be removed (multiple classes are separated via spaces)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "an optional collection of options/styles that will be applied to the element",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the animation callback promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5303,
            "ngdoc": "method",
            "name": "$animate#animate",
            "kind": "function",
            "description": "Performs an inline animation on the element which applies the provided to and from CSS styles to the element.\nIf any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take\non the provided styles. For example, if a transition animation is set for the given className then the provided from and\nto styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles\nwill be given in as function paramters into the `animate` method (or as apart of the `options` parameter).",
            "params": [
                {
                    "name": "element",
                    "description": "the element which the CSS styles will be applied to",
                    "type": "DOMElement"
                },
                {
                    "name": "from",
                    "description": "the from (starting) CSS styles that will be applied to the element and across the animation.",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "the to (destination) CSS styles that will be applied to the element and across the animation.",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "an optional CSS class that will be applied to the element for the duration of the animation. If\n   this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.\n   (Note that if no animation is detected then this value will not be appplied to the element.)",
                    "type": "String="
                },
                {
                    "name": "options",
                    "description": "an optional collection of options/styles that will be applied to the element",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the animation callback promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5349,
            "description": "This object has two goals:\n\n- hide all the global state in the browser caused by the window object\n- abstract away all the browser specific features and inconsistencies\n\nFor tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\nservice, which can be used for convenient testing of the application without the interaction with\nthe real browser apis.",
            "name": "$browser",
            "requires": [
                "$log"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5364,
            "params": [
                {
                    "name": "window",
                    "description": "The global window object.",
                    "type": "Object"
                },
                {
                    "name": "document",
                    "description": "jQuery wrapped document.",
                    "type": "Object"
                },
                {
                    "name": "$log",
                    "description": "window.console or an object with the same interface.",
                    "type": "Object"
                },
                {
                    "name": "$sniffer",
                    "description": "$sniffer service",
                    "type": "Object"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5388,
            "description": "Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\ncounter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5414,
            "access": "private",
            "tagname": "Note: this method is used only by scenario runner\nTODO(vojta): prefix this method with $$ ?",
            "params": [
                {
                    "name": "callback",
                    "description": "Function that will be called when no outstanding request",
                    "type": "Function()"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5440,
            "name": "$browser#url",
            "description": "GETTER:\nWithout any argument, this method just returns current value of location.href.\n\nSETTER:\nWith at least one argument, this method sets url to new value.\nIf html5 history api supported, pushState/replaceState is used, otherwise\nlocation.href/location.replace is used.\nReturns its own instance to allow chaining\n\nNOTE: this api is intended for use only by the $location service. Please use the\n{@link ng.$location $location service} to change url.",
            "params": [
                {
                    "name": "url",
                    "description": "New url (when used as setter)",
                    "type": "String"
                },
                {
                    "name": "replace",
                    "description": "Should new url replace current history record?",
                    "type": "Boolean="
                },
                {
                    "name": "state",
                    "description": "object to use with pushState/replaceState",
                    "type": "Object="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5516,
            "name": "$browser#state",
            "description": "This method is a getter.\n\nReturn history.state or null if history.state is undefined.",
            "return": {
                "description": "state",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5572,
            "name": "$browser#onUrlChange",
            "description": "Register callback function that will be called, when url changes.\n\nIt's only called when the url is changed from outside of angular:\n- user types different url into address bar\n- user clicks on history (forward/back) button\n- user clicks on a link\n\nIt's not called when url is changed by $browser.url() method\n\nThe listener gets called with new url as parameter.\n\nNOTE: this api is intended for use only by the $location service. Please use the\n{@link ng.$location $location service} to monitor url changes in angular apps.",
            "params": [
                {
                    "name": "listener",
                    "description": "Listener function to be called when url changes.",
                    "type": "Function(string)"
                }
            ],
            "return": {
                "description": "Returns the registered listener fn - handy if the fn is anonymous.",
                "type": "Function(string)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5612,
            "access": "private",
            "tagname": "Remove popstate and hashchange handler from window.\n\nNOTE: this api is intended for use only by $rootScope.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5622,
            "description": "Checks whether the url has changed outside of Angular.\nNeeds to be exported to be able to check for changes that have been done in sync,\nas hashchange/popstate events fire in async.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5633,
            "name": "$browser#baseHref",
            "description": "Returns current <base href>\n(always relative - without domain)",
            "return": {
                "description": "The current base href",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5647,
            "name": "$browser#defer",
            "params": [
                {
                    "name": "fn",
                    "description": "A function, who's execution should be deferred.",
                    "type": "Function()"
                },
                {
                    "name": "delay",
                    "description": "of milliseconds to defer the function execution.",
                    "type": "Number=",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "DeferId that can be used to cancel the task via `$browser.defer.cancel()`.",
                "type": "*"
            },
            "description": "Executes a fn asynchronously via `setTimeout(fn, delay)`.\n\nUnlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n`setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\nvia `$browser.defer.flush()`.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5673,
            "name": "$browser#defer.cancel",
            "description": "Cancels a deferred task identified with `deferId`.",
            "params": [
                {
                    "name": "deferId",
                    "description": "Token returned by the `$browser.defer` function.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns `true` if the task hasn't executed yet and was successfully\n                   canceled.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5702,
            "ngdoc": "service",
            "name": "$cacheFactory",
            "description": "Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to\nthem.\n\n```js\n\n var cache = $cacheFactory('cacheId');\n expect($cacheFactory.get('cacheId')).toBe(cache);\n expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();\n\n cache.put(\"key\", \"value\");\n cache.put(\"another key\", \"another value\");\n\n // We've specified no options on creation\n expect(cache.info()).toEqual({id: 'cacheId', size: 2});\n\n```",
            "params": [
                {
                    "name": "cacheId",
                    "description": "Name or id of the newly created cache.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options object that specifies the cache behavior. Properties:\n\n  - `{number=}` `capacity` — turns the cache into LRU cache.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Newly created cache object with the following set of methods:\n\n- `{object}` `info()` — Returns id, size, and options of cache.\n- `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns\n  it.\n- `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.\n- `{void}` `remove({string} key)` — Removes a key-value pair from the cache.\n- `{void}` `removeAll()` — Removes all cached values.\n- `{void}` `destroy()` — Removes references to this cache from $cacheFactory.",
                "type": "Object"
            },
            "example": [
                "\n  <example module=\"cacheExampleApp\">\n    <file name=\"index.html\">\n      <div ng-controller=\"CacheController\">\n        <input ng-model=\"newCacheKey\" placeholder=\"Key\">\n        <input ng-model=\"newCacheValue\" placeholder=\"Value\">\n        <button ng-click=\"put(newCacheKey, newCacheValue)\">Cache</button>\n\n        <p ng-if=\"keys.length\">Cached Values</p>\n        <div ng-repeat=\"key in keys\">\n          <span ng-bind=\"key\"></span>\n          <span>: </span>\n          <b ng-bind=\"cache.get(key)\"></b>\n        </div>\n\n        <p>Cache Info</p>\n        <div ng-repeat=\"(key, value) in cache.info()\">\n          <span ng-bind=\"key\"></span>\n          <span>: </span>\n          <b ng-bind=\"value\"></b>\n        </div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('cacheExampleApp', []).\n        controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {\n          $scope.keys = [];\n          $scope.cache = $cacheFactory('cacheId');\n          $scope.put = function(key, value) {\n            if ($scope.cache.get(key) === undefined) {\n              $scope.keys.push(key);\n            }\n            $scope.cache.put(key, value === undefined ? null : value);\n          };\n        }]);\n    </file>\n    <file name=\"style.css\">\n      p {\n        margin: 10px 0 3px;\n      }\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5801,
            "ngdoc": "type",
            "name": "$cacheFactory.Cache",
            "description": "A cache object used to store and retrieve data, primarily used by\n{@link $http $http} and the {@link ng.directive:script script} directive to cache\ntemplates and other data.\n\n```js\n angular.module('superCache')\n   .factory('superCache', ['$cacheFactory', function($cacheFactory) {\n     return $cacheFactory('super-cache');\n   }]);\n```\n\nExample test:\n\n```js\n it('should behave like a cache', inject(function(superCache) {\n   superCache.put('key', 'value');\n   superCache.put('another key', 'another value');\n\n   expect(superCache.info()).toEqual({\n     id: 'super-cache',\n     size: 2\n   });\n\n   superCache.remove('another key');\n   expect(superCache.get('another key')).toBeUndefined();\n\n   superCache.removeAll();\n   expect(superCache.info()).toEqual({\n     id: 'super-cache',\n     size: 0\n   });\n }));\n```",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5842,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#put",
            "kind": "function",
            "description": "Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be\nretrieved later, and incrementing the size of the cache if the key was not already\npresent in the cache. If behaving like an LRU cache, it will also remove stale\nentries from the set.\n\nIt will not insert undefined values into the cache.",
            "params": [
                {
                    "name": "key",
                    "description": "the key under which the cached data is stored.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to store alongside the key. If it is undefined, the key\n   will not be stored.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the value stored.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5878,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#get",
            "kind": "function",
            "description": "Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.",
            "params": [
                {
                    "name": "key",
                    "description": "the key of the data to be retrieved",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the value stored.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5902,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#remove",
            "kind": "function",
            "description": "Removes an entry from the {@link $cacheFactory.Cache Cache} object.",
            "params": [
                {
                    "name": "key",
                    "description": "the key of the entry to be removed",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5930,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#removeAll",
            "kind": "function",
            "description": "Clears the cache object of any entries.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5946,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#destroy",
            "kind": "function",
            "description": "Destroys the {@link $cacheFactory.Cache Cache} object entirely,\nremoving it from the {@link $cacheFactory $cacheFactory} set.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5963,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#info",
            "kind": "function",
            "description": "Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.",
            "return": {
                "description": "an object with the following properties:\n  <ul>\n    <li>**id**: the id of the cache instance</li>\n    <li>**size**: the number of entries kept in the cache instance</li>\n    <li>**...**: any additional properties from the options object when creating the\n      cache.</li>\n  </ul>",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 5985,
            "description": "makes the `entry` the freshEnd of the LRU linked list",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 6004,
            "description": "bidirectionally links two entries of the LRU linked list",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 6016,
            "ngdoc": "method",
            "name": "$cacheFactory#info",
            "description": "Get information about all the caches that have been created",
            "return": {
                "description": "- key-value map of `cacheId` to the result of calling `cache#info`",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 6034,
            "ngdoc": "method",
            "name": "$cacheFactory#get",
            "description": "Get access to a cache object by the `cacheId` used when it was created.",
            "params": [
                {
                    "name": "cacheId",
                    "description": "Name or id of a cache to access.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Cache object identified by the cacheId or undefined if no such cache.",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 6053,
            "ngdoc": "service",
            "name": "$templateCache",
            "description": "The first time a template is used, it is loaded in the template cache for quick retrieval. You\ncan load templates directly into the cache in a `script` tag, or by consuming the\n`$templateCache` service directly.\n\nAdding via the `script` tag:\n\n```html\n  <script type=\"text/ng-template\" id=\"templateId.html\">\n    <p>This is the content of the template</p>\n  </script>\n```\n\n**Note:** the `script` tag containing the template does not need to be included in the `head` of\nthe document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,\nelement with ng-app attribute), otherwise the template will be ignored.\n\nAdding via the `$templateCache` service:\n\n```js\nvar myApp = angular.module('myApp', []);\nmyApp.run(function($templateCache) {\n  $templateCache.put('templateId.html', 'This is the content of the template');\n});\n```\n\nTo retrieve the template later, simply use it in your HTML:\n```html\n<div ng-include=\" 'templateId.html' \"></div>\n```\n\nor get it via Javascript:\n```js\n$templateCache.get('templateId.html')\n```\n\nSee {@link ng.$cacheFactory $cacheFactory}.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 6131,
            "ngdoc": "service",
            "name": "$compile",
            "kind": "function",
            "description": "Compiles an HTML string or DOM into a template and produces a template function, which\ncan then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.\n\nThe compilation is a process of walking the DOM tree and matching DOM elements to\n{@link ng.$compileProvider#directive directives}.\n\n<div class=\"alert alert-warning\">\n**Note:** This document is an in-depth reference of all directive options.\nFor a gentle introduction to directives with examples of common use cases,\nsee the {@link guide/directive directive guide}.\n</div>\n\n## Comprehensive Directive API\n\nThere are many different options for a directive.\n\nThe difference resides in the return value of the factory function.\nYou can either return a \"Directive Definition Object\" (see below) that defines the directive properties,\nor just the `postLink` function (all other properties will have the default values).\n\n<div class=\"alert alert-success\">\n**Best Practice:** It's recommended to use the \"directive definition object\" form.\n</div>\n\nHere's an example directive declared with a Directive Definition Object:\n\n```js\n  var myModule = angular.module(...);\n\n  myModule.directive('directiveName', function factory(injectables) {\n    var directiveDefinitionObject = {\n      priority: 0,\n      template: '<div></div>', // or // function(tElement, tAttrs) { ... },\n      // or\n      // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },\n      transclude: false,\n      restrict: 'A',\n      templateNamespace: 'html',\n      scope: false,\n      controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },\n      controllerAs: 'stringIdentifier',\n      bindToController: false,\n      require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\n      compile: function compile(tElement, tAttrs, transclude) {\n        return {\n          pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n          post: function postLink(scope, iElement, iAttrs, controller) { ... }\n        }\n        // or\n        // return function postLink( ... ) { ... }\n      },\n      // or\n      // link: {\n      //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n      //  post: function postLink(scope, iElement, iAttrs, controller) { ... }\n      // }\n      // or\n      // link: function postLink( ... ) { ... }\n    };\n    return directiveDefinitionObject;\n  });\n```\n\n<div class=\"alert alert-warning\">\n**Note:** Any unspecified options will use the default value. You can see the default values below.\n</div>\n\nTherefore the above can be simplified as:\n\n```js\n  var myModule = angular.module(...);\n\n  myModule.directive('directiveName', function factory(injectables) {\n    var directiveDefinitionObject = {\n      link: function postLink(scope, iElement, iAttrs) { ... }\n    };\n    return directiveDefinitionObject;\n    // or\n    // return function postLink(scope, iElement, iAttrs) { ... }\n  });\n```\n\n\n\n### Directive Definition Object\n\nThe directive definition object provides instructions to the {@link ng.$compile\ncompiler}. The attributes are:\n\n#### `multiElement`\nWhen this property is set to true, the HTML compiler will collect DOM nodes between\nnodes with the attributes `directive-name-start` and `directive-name-end`, and group them\ntogether as the directive elements. It is recommended that this feature be used on directives\nwhich are not strictly behavioural (such as {@link ngClick}), and which\ndo not manipulate or replace child nodes (such as {@link ngInclude}).\n\n#### `priority`\nWhen there are multiple directives defined on a single DOM element, sometimes it\nis necessary to specify the order in which the directives are applied. The `priority` is used\nto sort the directives before their `compile` functions get called. Priority is defined as a\nnumber. Directives with greater numerical `priority` are compiled first. Pre-link functions\nare also run in priority order, but post-link functions are run in reverse order. The order\nof directives with the same priority is undefined. The default priority is `0`.\n\n#### `terminal`\nIf set to true then the current `priority` will be the last set of directives\nwhich will execute (any directives at the current priority will still execute\nas the order of execution on same `priority` is undefined). Note that expressions\nand other directives used in the directive's template will also be excluded from execution.\n\n#### `scope`\n**If set to `true`,** then a new scope will be created for this directive. If multiple directives on the\nsame element request a new scope, only one new scope is created. The new scope rule does not\napply for the root of the template since the root of the template always gets a new scope.\n\n**If set to `{}` (object hash),** then a new \"isolate\" scope is created. The 'isolate' scope differs from\nnormal scope in that it does not prototypically inherit from the parent scope. This is useful\nwhen creating reusable components, which should not accidentally read or modify data in the\nparent scope.\n\nThe 'isolate' scope takes an object hash which defines a set of local scope properties\nderived from the parent scope. These local properties are useful for aliasing values for\ntemplates. Locals definition is a hash of local scope property to its source:\n\n* `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is\n  always a string since DOM attributes are strings. If no `attr` name is specified  then the\n  attribute name is assumed to be the same as the local name.\n  Given `<widget my-attr=\"hello {{name}}\">` and widget definition\n  of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect\n  the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the\n  `localName` property on the widget scope. The `name` is read from the parent scope (not\n  component scope).\n\n* `=` or `=attr` - set up bi-directional binding between a local scope property and the\n  parent scope property of name defined via the value of the `attr` attribute. If no `attr`\n  name is specified then the attribute name is assumed to be the same as the local name.\n  Given `<widget my-attr=\"parentModel\">` and widget definition of\n  `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the\n  value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected\n  in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent\n  scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You\n  can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If\n  you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use\n  `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).\n\n* `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.\n  If no `attr` name is specified then the attribute name is assumed to be the same as the\n  local name. Given `<widget my-attr=\"count = count + value\">` and widget definition of\n  `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to\n  a function wrapper for the `count = count + value` expression. Often it's desirable to\n  pass data from the isolated scope via an expression to the parent scope, this can be\n  done by passing a map of local variable names and values into the expression wrapper fn.\n  For example, if the expression is `increment(amount)` then we can specify the amount value\n  by calling the `localFn` as `localFn({amount: 22})`.\n\n\n#### `bindToController`\nWhen an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will\nallow a component to have its properties bound to the controller, rather than to scope. When the controller\nis instantiated, the initial values of the isolate scope bindings are already available.\n\n#### `controller`\nController constructor function. The controller is instantiated before the\npre-linking phase and it is shared with other directives (see\n`require` attribute). This allows the directives to communicate with each other and augment\neach other's behavior. The controller is injectable (and supports bracket notation) with the following locals:\n\n* `$scope` - Current scope associated with the element\n* `$element` - Current element\n* `$attrs` - Current attributes object for the element\n* `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:\n  `function([scope], cloneLinkingFn, futureParentElement)`.\n   * `scope`: optional argument to override the scope.\n   * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.\n   * `futureParentElement`:\n       * defines the parent to which the `cloneLinkingFn` will add the cloned elements.\n       * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.\n       * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)\n         and when the `cloneLinkinFn` is passed,\n         as those elements need to created and cloned in a special way when they are defined outside their\n         usual containers (e.g. like `<svg>`).\n       * See also the `directive.templateNamespace` property.\n\n\n#### `require`\nRequire another directive and inject its controller as the fourth argument to the linking function. The\n`require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the\ninjected argument will be an array in corresponding order. If no such directive can be\nfound, or if the directive does not have a controller, then an error is raised (unless no link function\nis specified, in which case error checking is skipped). The name can be prefixed with:\n\n* (no prefix) - Locate the required controller on the current element. Throw an error if not found.\n* `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.\n* `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.\n* `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.\n* `?^` - Attempt to locate the required controller by searching the element and its parents or pass\n  `null` to the `link` fn if not found.\n* `?^^` - Attempt to locate the required controller by searching the element's parents, or pass\n  `null` to the `link` fn if not found.\n\n\n#### `controllerAs`\nIdentifier name for a reference to the controller in the directive's scope.\nThis allows the controller to be referenced from the directive template. The directive\nneeds to define a scope for this configuration to be used. Useful in the case when\ndirective is used as component.\n\n\n#### `restrict`\nString of subset of `EACM` which restricts the directive to a specific directive\ndeclaration style. If omitted, the defaults (elements and attributes) are used.\n\n* `E` - Element name (default): `<my-directive></my-directive>`\n* `A` - Attribute (default): `<div my-directive=\"exp\"></div>`\n* `C` - Class: `<div class=\"my-directive: exp;\"></div>`\n* `M` - Comment: `<!-- directive: my-directive exp -->`\n\n\n#### `templateNamespace`\nString representing the document type used by the markup in the template.\nAngularJS needs this information as those elements need to be created and cloned\nin a special way when they are defined outside their usual containers like `<svg>` and `<math>`.\n\n* `html` - All root nodes in the template are HTML. Root nodes may also be\n  top-level elements such as `<svg>` or `<math>`.\n* `svg` - The root nodes in the template are SVG elements (excluding `<math>`).\n* `math` - The root nodes in the template are MathML elements (excluding `<svg>`).\n\nIf no `templateNamespace` is specified, then the namespace is considered to be `html`.\n\n#### `template`\nHTML markup that may:\n* Replace the contents of the directive's element (default).\n* Replace the directive's element itself (if `replace` is true - DEPRECATED).\n* Wrap the contents of the directive's element (if `transclude` is true).\n\nValue may be:\n\n* A string. For example `<div red-on-hover>{{delete_str}}</div>`.\n* A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`\n  function api below) and returns a string value.\n\n\n#### `templateUrl`\nThis is similar to `template` but the template is loaded from the specified URL, asynchronously.\n\nBecause template loading is asynchronous the compiler will suspend compilation of directives on that element\nfor later when the template has been resolved.  In the meantime it will continue to compile and link\nsibling and parent elements as though this element had not contained any directives.\n\nThe compiler does not suspend the entire compilation to wait for templates to be loaded because this\nwould result in the whole app \"stalling\" until all templates are loaded asynchronously - even in the\ncase when only one deeply nested directive has `templateUrl`.\n\nTemplate loading is asynchronous even if the template has been preloaded into the {@link $templateCache}\n\nYou can specify `templateUrl` as a string representing the URL or as a function which takes two\narguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns\na string value representing the url.  In either case, the template URL is passed through {@link\n$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.\n\n\n#### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)\nspecify what the template should replace. Defaults to `false`.\n\n* `true` - the template will replace the directive's element.\n* `false` - the template will replace the contents of the directive's element.\n\nThe replacement process migrates all of the attributes / classes from the old element to the new\none. See the {@link guide/directive#template-expanding-directive\nDirectives Guide} for an example.\n\nThere are very few scenarios where element replacement is required for the application function,\nthe main one being reusable custom components that are used within SVG contexts\n(because SVG doesn't work with custom elements in the DOM tree).\n\n#### `transclude`\nExtract the contents of the element where the directive appears and make it available to the directive.\nThe contents are compiled and provided to the directive as a **transclusion function**. See the\n{@link $compile#transclusion Transclusion} section below.\n\nThere are two kinds of transclusion depending upon whether you want to transclude just the contents of the\ndirective's element or the entire element:\n\n* `true` - transclude the content (i.e. the child nodes) of the directive's element.\n* `'element'` - transclude the whole of the directive's element including any directives on this\n  element that defined at a lower priority than this directive. When used, the `template`\n  property is ignored.\n\n\n#### `compile`\n\n```js\n  function compile(tElement, tAttrs, transclude) { ... }\n```\n\nThe compile function deals with transforming the template DOM. Since most directives do not do\ntemplate transformation, it is not used often. The compile function takes the following arguments:\n\n  * `tElement` - template element - The element where the directive has been declared. It is\n    safe to do template transformation on the element and child elements only.\n\n  * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared\n    between all directive compile functions.\n\n  * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`\n\n<div class=\"alert alert-warning\">\n**Note:** The template instance and the link instance may be different objects if the template has\nbeen cloned. For this reason it is **not** safe to do anything other than DOM transformations that\napply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration\nshould be done in a linking function rather than in a compile function.\n</div>\n\n<div class=\"alert alert-warning\">\n**Note:** The compile function cannot handle directives that recursively use themselves in their\nown templates or compile functions. Compiling these directives results in an infinite loop and a\nstack overflow errors.\n\nThis can be avoided by manually using $compile in the postLink function to imperatively compile\na directive's template instead of relying on automatic template compilation via `template` or\n`templateUrl` declaration or manual compilation inside the compile function.\n</div>\n\n<div class=\"alert alert-danger\">\n**Note:** The `transclude` function that is passed to the compile function is deprecated, as it\n  e.g. does not know about the right outer scope. Please use the transclude function that is passed\n  to the link function instead.\n</div>\n\nA compile function can have a return value which can be either a function or an object.\n\n* returning a (post-link) function - is equivalent to registering the linking function via the\n  `link` property of the config object when the compile function is empty.\n\n* returning an object with function(s) registered via `pre` and `post` properties - allows you to\n  control when a linking function should be called during the linking phase. See info about\n  pre-linking and post-linking functions below.\n\n\n#### `link`\nThis property is used only if the `compile` property is not defined.\n\n```js\n  function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }\n```\n\nThe link function is responsible for registering DOM listeners as well as updating the DOM. It is\nexecuted after the template has been cloned. This is where most of the directive logic will be\nput.\n\n  * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the\n    directive for registering {@link ng.$rootScope.Scope#$watch watches}.\n\n  * `iElement` - instance element - The element where the directive is to be used. It is safe to\n    manipulate the children of the element only in `postLink` function since the children have\n    already been linked.\n\n  * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared\n    between all directive linking functions.\n\n  * `controller` - the directive's required controller instance(s) - Instances are shared\n    among all directives, which allows the directives to use the controllers as a communication\n    channel. The exact value depends on the directive's `require` property:\n      * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one\n      * `string`: the controller instance\n      * `array`: array of controller instances\n\n    If a required controller cannot be found, and it is optional, the instance is `null`,\n    otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.\n\n    Note that you can also require the directive's own controller - it will be made available like\n    like any other controller.\n\n  * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.\n    This is the same as the `$transclude`\n    parameter of directive controllers, see there for details.\n    `function([scope], cloneLinkingFn, futureParentElement)`.\n\n#### Pre-linking function\n\nExecuted before the child elements are linked. Not safe to do DOM transformation since the\ncompiler linking function will fail to locate the correct elements for linking.\n\n#### Post-linking function\n\nExecuted after the child elements are linked.\n\nNote that child elements that contain `templateUrl` directives will not have been compiled\nand linked since they are waiting for their template to load asynchronously and their own\ncompilation and linking has been suspended until that occurs.\n\nIt is safe to do DOM transformation in the post-linking function on elements that are not waiting\nfor their async templates to be resolved.\n\n\n### Transclusion\n\nTransclusion is the process of extracting a collection of DOM element from one part of the DOM and\ncopying them to another part of the DOM, while maintaining their connection to the original AngularJS\nscope from where they were taken.\n\nTransclusion is used (often with {@link ngTransclude}) to insert the\noriginal contents of a directive's element into a specified place in the template of the directive.\nThe benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded\ncontent has access to the properties on the scope from which it was taken, even if the directive\nhas isolated scope.\nSee the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.\n\nThis makes it possible for the widget to have private state for its template, while the transcluded\ncontent has access to its originating scope.\n\n<div class=\"alert alert-warning\">\n**Note:** When testing an element transclude directive you must not place the directive at the root of the\nDOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives\nTesting Transclusion Directives}.\n</div>\n\n#### Transclusion Functions\n\nWhen a directive requests transclusion, the compiler extracts its contents and provides a **transclusion\nfunction** to the directive's `link` function and `controller`. This transclusion function is a special\n**linking function** that will return the compiled contents linked to a new transclusion scope.\n\n<div class=\"alert alert-info\">\nIf you are just using {@link ngTransclude} then you don't need to worry about this function, since\nngTransclude will deal with it for us.\n</div>\n\nIf you want to manually control the insertion and removal of the transcluded content in your directive\nthen you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery\nobject that contains the compiled DOM, which is linked to the correct transclusion scope.\n\nWhen you call a transclusion function you can pass in a **clone attach function**. This function accepts\ntwo parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded\ncontent and the `scope` is the newly created transclusion scope, to which the clone is bound.\n\n<div class=\"alert alert-info\">\n**Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function\nsince you then get a fresh clone of the original DOM and also have access to the new transclusion scope.\n</div>\n\nIt is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone\nattach function**:\n\n```js\nvar transcludedContent, transclusionScope;\n\n$transclude(function(clone, scope) {\n  element.append(clone);\n  transcludedContent = clone;\n  transclusionScope = scope;\n});\n```\n\nLater, if you want to remove the transcluded content from your DOM then you should also destroy the\nassociated transclusion scope:\n\n```js\ntranscludedContent.remove();\ntransclusionScope.$destroy();\n```\n\n<div class=\"alert alert-info\">\n**Best Practice**: if you intend to add and remove transcluded content manually in your directive\n(by calling the transclude function to get the DOM and calling `element.remove()` to remove it),\nthen you are also responsible for calling `$destroy` on the transclusion scope.\n</div>\n\nThe built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}\nautomatically destroy their transluded clones as necessary so you do not need to worry about this if\nyou are simply using {@link ngTransclude} to inject the transclusion into your directive.\n\n\n#### Transclusion Scopes\n\nWhen you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion\nscope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed\nwhen the directive's scope gets destroyed) but it inherits the properties of the scope from which it\nwas taken.\n\nFor example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look\nlike this:\n\n```html\n<div ng-app>\n  <div isolate>\n    <div transclusion>\n    </div>\n  </div>\n</div>\n```\n\nThe `$parent` scope hierarchy will look like this:\n\n```\n- $rootScope\n  - isolate\n    - transclusion\n```\n\nbut the scopes will inherit prototypically from different scopes to their `$parent`.\n\n```\n- $rootScope\n  - transclusion\n- isolate\n```\n\n\n### Attributes\n\nThe {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the\n`link()` or `compile()` functions. It has a variety of uses.\n\naccessing *Normalized attribute names:*\nDirectives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.\nthe attributes object allows for normalized access to\n  the attributes.\n\n* *Directive inter-communication:* All directives share the same instance of the attributes\n  object which allows the directives to use the attributes object as inter directive\n  communication.\n\n* *Supports interpolation:* Interpolation attributes are assigned to the attribute object\n  allowing other directives to read the interpolated value.\n\n* *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes\n  that contain interpolation (e.g. `src=\"{{bar}}\"`). Not only is this very efficient but it's also\n  the only way to easily get the actual value because during the linking phase the interpolation\n  hasn't been evaluated yet and so the value is at this time set to `undefined`.\n\n```js\nfunction linkingFn(scope, elm, attrs, ctrl) {\n  // get the attribute value\n  console.log(attrs.ngModel);\n\n  // change the attribute\n  attrs.$set('ngModel', 'new value');\n\n  // observe changes to interpolated attribute\n  attrs.$observe('ngModel', function(value) {\n    console.log('ngModel has changed value to ' + value);\n  });\n}\n```\n\n## Example\n\n<div class=\"alert alert-warning\">\n**Note**: Typically directives are registered with `module.directive`. The example below is\nto illustrate how `$compile` works.\n</div>\n\n<example module=\"compileExample\">\n  <file name=\"index.html\">\n   <script>\n     angular.module('compileExample', [], function($compileProvider) {\n       // configure new 'compile' directive by passing a directive\n       // factory function. The factory function injects the '$compile'\n       $compileProvider.directive('compile', function($compile) {\n         // directive factory creates a link function\n         return function(scope, element, attrs) {\n           scope.$watch(\n             function(scope) {\n                // watch the 'compile' expression for changes\n               return scope.$eval(attrs.compile);\n             },\n             function(value) {\n               // when the 'compile' expression changes\n               // assign it into the current DOM\n               element.html(value);\n\n               // compile the new DOM and link it to the current\n               // scope.\n               // NOTE: we only compile .childNodes so that\n               // we don't get into infinite loop compiling ourselves\n               $compile(element.contents())(scope);\n             }\n           );\n         };\n       });\n     })\n     .controller('GreeterController', ['$scope', function($scope) {\n       $scope.name = 'Angular';\n       $scope.html = 'Hello {{name}}';\n     }]);\n   </script>\n   <div ng-controller=\"GreeterController\">\n     <input ng-model=\"name\"> <br/>\n     <textarea ng-model=\"html\"></textarea> <br/>\n     <div compile=\"html\"></div>\n   </div>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should auto compile', function() {\n      var textarea = $('textarea');\n      var output = $('div[compile]');\n      // The initial state reads 'Hello Angular'.\n      expect(output.getText()).toBe('Hello Angular');\n      textarea.clear();\n      textarea.sendKeys('{{name}}!');\n      expect(output.getText()).toBe('Angular!');\n    });\n  </file>\n</example>",
            "params": [
                {
                    "name": "element",
                    "description": "Element or HTML string to compile into a template function.",
                    "type": "String|DOMElement"
                },
                {
                    "name": "transclude",
                    "description": "function available to directives - DEPRECATED.\n\n<div class=\"alert alert-danger\">\n**Note:** Passing a `transclude` function to the $compile function is deprecated, as it\n  e.g. will not use the right outer scope. Please pass the transclude function as a\n  `parentBoundTranscludeFn` to the link function instead.\n</div>",
                    "type": "function(angular.Scope, cloneAttachFn=)"
                },
                {
                    "name": "maxPriority",
                    "description": "only apply directives lower than given priority (Only effects the\n                root element(s), not their children)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a link function which is used to bind template\n(a DOM element/tree) to a scope. Where:\n\n * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.\n * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the\n `template` and call the `cloneAttachFn` function allowing the caller to attach the\n cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is\n called as: <br/> `cloneAttachFn(clonedElement, scope)` where:\n\n     * `clonedElement` - is a clone of the original `element` passed into the compiler.\n     * `scope` - is the current scope with which the linking function is working with.\n\n * `options` - An optional object hash with linking options. If `options` is provided, then the following\n keys may be used to control linking behavior:\n\n     * `parentBoundTranscludeFn` - the transclude function made available to\n       directives; if given, it will be passed through to the link functions of\n       directives found in `element` during compilation.\n     * `transcludeControllers` - an object hash with keys that map controller names\n       to controller instances; if given, it will make the controllers\n       available to directives.\n     * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add\n       the cloned elements; only needed for transcludes that are allowed to contain non html\n       elements (e.g. SVG elements). See also the directive.controller property.\n\nCalling the linking function returns the element of the template. It is either the original\nelement passed in, or the clone of the element if the `cloneAttachFn` is provided.\n\nAfter linking the view is not updated until after a call to $digest which typically is done by\nAngular automatically.\n\nIf you need access to the bound view, there are two ways to do it:\n\n- If you are not asking the linking function to clone the template, create the DOM element(s)\n  before you send them to the compiler and keep this reference around.\n  ```js\n    var element = $compile('<p>{{total}}</p>')(scope);\n  ```\n\n- if on the other hand, you need the element to be cloned, the view reference from the original\n  example would not point to the clone, but rather to the original template that was cloned. In\n  this case, you can access the clone via the cloneAttachFn:\n  ```js\n    var templateElement = angular.element('<p>{{total}}</p>'),\n        scope = ....;\n\n    var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {\n      //attach the clone to DOM document at the right place\n    });\n\n    //now we have reference to the cloned DOM via `clonedElement`\n  ```\n\n\nFor information on how the compiler works, see the\n{@link guide/compiler Angular HTML Compiler} section of the Developer Guide.",
                "type": "Function(scope, cloneAttachFn=, options=)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 6817,
            "ngdoc": "provider",
            "name": "$compileProvider",
            "description": "",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 6914,
            "ngdoc": "method",
            "name": "$compileProvider#directive",
            "kind": "function",
            "description": "Register a new directive with the compiler.",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the directive in camel-case (i.e. <code>ngBind</code> which\n   will match as <code>ng-bind</code>), or an object map of directives where the keys are the\n   names and the values are the factories.",
                    "type": "String|Object"
                },
                {
                    "name": "directiveFactory",
                    "description": "An injectable directive factory function. See\n   {@link guide/directive} for more info.",
                    "type": "Function|Array"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "ng.$compileProvider"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 6974,
            "ngdoc": "method",
            "name": "$compileProvider#aHrefSanitizationWhitelist",
            "kind": "function",
            "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at preventing XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "params": [
                {
                    "name": "regexp",
                    "description": "New regexp to whitelist urls with.",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "Current RegExp if called without value or self for\n   chaining otherwise.",
                "type": "RegExp|ng.$compileProvider"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7004,
            "ngdoc": "method",
            "name": "$compileProvider#imgSrcSanitizationWhitelist",
            "kind": "function",
            "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "params": [
                {
                    "name": "regexp",
                    "description": "New regexp to whitelist urls with.",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "Current RegExp if called without value or self for\n   chaining otherwise.",
                "type": "RegExp|ng.$compileProvider"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7033,
            "ngdoc": "method",
            "name": "$compileProvider#debugInfoEnabled",
            "params": [
                {
                    "name": "enabled",
                    "description": "update the debugInfoEnabled state if provided, otherwise just return the\ncurrent debugInfoEnabled state",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "current value if used as getter or itself (chaining) if used as setter",
                "type": "*"
            },
            "kind": "function",
            "description": "Call this method to enable/disable various debug runtime information in the compiler such as adding\nbinding information and a reference to the current scope on to DOM elements.\nIf enabled, the compiler will add the following to DOM elements that have been bound to the scope\n* `ng-binding` CSS class\n* `$binding` data property containing an array of the binding expressions\n\nYou may want to disable this in production for a significant performance boost. See\n{@link guide/production#disabling-debug-data Disabling Debug Data} for more.\n\nThe default value is true.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7087,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$normalize",
            "kind": "function",
            "description": "Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or\n`data-`) to its normalized, camelCase form.\n\nAlso there is special case for Moz prefix starting with upper case letter.\n\nFor further information check out the guide on {@link guide/directive#matching-directives Matching Directives}",
            "params": [
                {
                    "name": "name",
                    "description": "Name to normalize",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7105,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$addClass",
            "kind": "function",
            "description": "Adds the CSS class value specified by the classVal parameter to the element. If animations\nare enabled then an animation will be triggered for the class addition.",
            "params": [
                {
                    "name": "classVal",
                    "description": "The className value that will be added to the element",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7122,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$removeClass",
            "kind": "function",
            "description": "Removes the CSS class value specified by the classVal parameter from the element. If\nanimations are enabled then an animation will be triggered for the class removal.",
            "params": [
                {
                    "name": "classVal",
                    "description": "The className value that will be removed from the element",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7139,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$updateClass",
            "kind": "function",
            "description": "Adds and removes the appropriate CSS class values to the element based on the difference\nbetween the new and old CSS class values (specified as newClasses and oldClasses).",
            "params": [
                {
                    "name": "newClasses",
                    "description": "The current CSS className value",
                    "type": "String"
                },
                {
                    "name": "oldClasses",
                    "description": "The former CSS className value",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7163,
            "description": "Set a normalized attribute on the element in a way such that all directives\ncan share the attribute. This function properly handles boolean attributes.",
            "params": [
                {
                    "name": "key",
                    "description": "Normalized key. (ie ngAttribute)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set. If `null` attribute will be deleted.",
                    "type": "String|boolean"
                },
                {
                    "name": "writeAttr",
                    "description": "If false, does not write the value to DOM element attribute.\n    Defaults to true.",
                    "type": "Boolean="
                },
                {
                    "name": "attrName",
                    "description": "Optional none normalized name. Defaults to key.",
                    "type": "String="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7265,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$observe",
            "kind": "function",
            "description": "Observes an interpolated attribute.\n\nThe observer function will be invoked once during the next `$digest` following\ncompilation. The observer is then invoked whenever the interpolated value\nchanges.",
            "params": [
                {
                    "name": "key",
                    "description": "Normalized key. (ie ngAttribute) .",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function that will be called whenever\n               the interpolated value of the attribute changes.\n       See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.",
                    "type": "Function(interpolatedValue)"
                }
            ],
            "return": {
                "description": "Returns a deregistration function for this observer.",
                "type": "Function()"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7431,
            "description": "Compile function matches each node in nodeList against the directives. Once all directives\nfor a particular node are collected their compile functions are executed. The compile\nfunctions return values - the linking functions - are combined into a composite linking\nfunction, which is the a linking function for the node.",
            "params": [
                {
                    "name": "nodeList",
                    "description": "an array of nodes or NodeList to compile",
                    "type": "NodeList"
                },
                {
                    "name": "transcludeFn",
                    "description": "A linking function, where the\n       scope argument is auto-generated to the new child of the transcluded parent scope.",
                    "type": "function(angular.Scope, cloneAttachFn=)"
                },
                {
                    "name": "$rootElement",
                    "description": "If the nodeList is the root of the compilation tree then\n       the rootElement must be set the jqLite collection of the compile root. This is\n       needed so that the jqLite collection items can be replaced with widgets.",
                    "type": "DOMElement="
                },
                {
                    "name": "maxPriority",
                    "description": "Max directive priority.",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "A composite linking function of all of the matched directives or null.",
                "type": "Function"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7570,
            "description": "Looks for directives on the given node and adds them to the directive collection which is\nsorted.",
            "params": [
                {
                    "name": "node",
                    "description": "Node to search."
                },
                {
                    "name": "directives",
                    "description": "An array to which the directives are added to. This array is sorted before\n       the function returns."
                },
                {
                    "name": "attrs",
                    "description": "The shared attrs object which is used to populate the normalized attributes."
                },
                {
                    "name": "maxPriority",
                    "description": "Max directive priority.",
                    "type": "Number="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7680,
            "description": "Given a node with an directive-start it collects all of the siblings until it finds\ndirective-end.",
            "params": [
                {
                    "name": "node",
                    "description": ""
                },
                {
                    "name": "attrStart",
                    "description": ""
                },
                {
                    "name": "attrEnd",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7712,
            "description": "Wrapper for linking function which converts normal linking function into a grouped\nlinking function.",
            "params": [
                {
                    "name": "linkFn",
                    "description": ""
                },
                {
                    "name": "attrStart",
                    "description": ""
                },
                {
                    "name": "attrEnd",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 7727,
            "description": "Once the directives have been collected, their compile functions are executed. This method\nis responsible for inlining directive templates as well as terminating the application\nof the directives if the terminal directive has been reached.",
            "params": [
                {
                    "name": "directives",
                    "description": "Array of collected directives to execute their compile function.\n       this needs to be pre-sorted by priority order.",
                    "type": "Array"
                },
                {
                    "name": "compileNode",
                    "description": "The raw DOM node to apply the compile functions to",
                    "type": "Node"
                },
                {
                    "name": "templateAttrs",
                    "description": "The shared attribute function",
                    "type": "Object"
                },
                {
                    "name": "transcludeFn",
                    "description": "A linking function, where the\n                                                 scope argument is auto-generated to the new\n                                                 child of the transcluded parent scope.",
                    "type": "function(angular.Scope, cloneAttachFn=)"
                },
                {
                    "name": "jqCollection",
                    "description": "If we are working on the root of the compile tree then this\n                             argument has the root jqLite array so that we can replace nodes\n                             on it.",
                    "type": "JQLite"
                },
                {
                    "name": "originalReplaceDirective",
                    "description": "An optional directive that will be ignored when\n                                          compiling the transclusion.",
                    "type": "Object="
                },
                {
                    "name": "preLinkFns",
                    "description": "",
                    "type": "Array.<Function>"
                },
                {
                    "name": "postLinkFns",
                    "description": "",
                    "type": "Array.<Function>"
                },
                {
                    "name": "previousCompileContext",
                    "description": "Context used for previous compilation of the current\n                                       node",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "linkFn",
                "type": "Function"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8189,
            "description": "looks up the directive and decorates it with exception handling and proper parameters. We\ncall this the boundDirective.",
            "params": [
                {
                    "name": "name",
                    "description": "name of the directive to look up.",
                    "type": "String"
                },
                {
                    "name": "location",
                    "description": "The directive must be found in specific format.\n  String containing any of theses characters:\n\n  * `E`: element name\n  * `A': attribute\n  * `C`: class\n  * `M`: comment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if directive was added.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8227,
            "description": "looks up the directive and returns true if it is a multi-element directive,\nand therefore requires DOM nodes between -start and -end markers to be grouped\ntogether.",
            "params": [
                {
                    "name": "name",
                    "description": "name of the directive to look up.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if directive was registered as multi-element."
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8248,
            "description": "When the element is replaced with HTML template then the new attributes\non the template need to be merged with the existing attributes in the DOM.\nThe desired effect is to have both of the attributes present.",
            "params": [
                {
                    "name": "dst",
                    "description": "destination attributes (original DOM)",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "source attributes (from the directive template)",
                    "type": "Object"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8405,
            "description": "Sorting function for bound directives.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8557,
            "description": "This is a special jqLite.replaceWith, which can replace items which\nhave no parents, provided that the containing jqLite collection is provided.",
            "params": [
                {
                    "name": "$rootElement",
                    "description": "The root of the compile tree. Used so that we can replace nodes\n                              in the root of the tree.",
                    "type": "JqLite="
                },
                {
                    "name": "elementsToRemove",
                    "description": "The jqLite element which we are going to replace. We keep\n                                 the shell, but replace its DOM node reference.",
                    "type": "JqLite"
                },
                {
                    "name": "newNode",
                    "description": "The new DOM node.",
                    "type": "Node"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8763,
            "description": "Converts all accepted directives format into proper directive name.",
            "params": [
                {
                    "name": "name",
                    "description": "Name to normalize"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8771,
            "ngdoc": "type",
            "name": "$compile.directive.Attributes",
            "description": "A shared object between directive compile / linking functions which contains normalized DOM\nelement attributes. The values reflect current binding state `{{ }}`. The normalization is\nneeded since all of these are treated as equivalent in Angular:\n\n```\n   <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n```",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8785,
            "ngdoc": "property",
            "name": "$compile.directive.Attributes#$attr",
            "description": "A map of DOM element attribute names to the normalized name. This is\nneeded to do reverse lookup from normalized name back to actual name.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8795,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$set",
            "kind": "function",
            "description": "Set DOM element attribute value.",
            "params": [
                {
                    "name": "name",
                    "description": "Normalized element attribute name of the property to modify. The name is\n         reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\n         property to the original name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value to set the attribute to. The value can be an interpolated string.",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8812,
            "description": "Closure compiler type information",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8877,
            "ngdoc": "provider",
            "name": "$controllerProvider",
            "description": "The {@link ng.$controller $controller service} is used by Angular to create new\ncontrollers.\n\nThis provider allows controller registration via the\n{@link ng.$controllerProvider#register register} method.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8891,
            "ngdoc": "method",
            "name": "$controllerProvider#register",
            "params": [
                {
                    "name": "name",
                    "description": "Controller name, or an object map of controllers where the keys are\n   the names and the values are the constructors.",
                    "type": "String|Object"
                },
                {
                    "name": "constructor",
                    "description": "Controller constructor fn (optionally decorated with DI\n   annotations in the array notation).",
                    "type": "Function|Array"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8908,
            "ngdoc": "method",
            "name": "$controllerProvider#allowGlobals",
            "description": "If called, allows `$controller` to find controller constructors on `window`",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 8920,
            "ngdoc": "service",
            "name": "$controller",
            "requires": [
                "$injector"
            ],
            "params": [
                {
                    "name": "constructor",
                    "description": "If called with a function then it's considered to be the\n   controller constructor function. Otherwise it's considered to be a string which is used\n   to retrieve the controller constructor using the following steps:\n\n   * check if a controller with given name is registered via `$controllerProvider`\n   * check if evaluating the string on the current scope returns a constructor\n   * if $controllerProvider#allowGlobals, check `window[constructor]` on the global\n     `window` object (not recommended)\n\n   The string can use the `controller as property` syntax, where the controller instance is published\n   as the specified property on the `scope`; the `scope` must be injected into `locals` param for this\n   to work correctly.",
                    "type": "Function|string"
                },
                {
                    "name": "locals",
                    "description": "Injection locals for Controller.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Instance of given controller.",
                "type": "Object"
            },
            "description": "`$controller` service is responsible for instantiating controllers.\n\nIt's just a simple call to {@link auto.$injector $injector}, but extracted into\na service, so that one can override this service with [BC version](https://gist.github.com/1649788).",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9035,
            "ngdoc": "service",
            "name": "$document",
            "requires": [
                "$window"
            ],
            "description": "A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.",
            "example": [
                "\n  <example module=\"documentExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <p>$document title: <b ng-bind=\"title\"></b></p>\n        <p>window.document title: <b ng-bind=\"windowTitle\"></b></p>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('documentExample', [])\n        .controller('ExampleController', ['$scope', '$document', function($scope, $document) {\n          $scope.title = $document[0].title;\n          $scope.windowTitle = angular.element(window.document)[0].title;\n        }]);\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9066,
            "ngdoc": "service",
            "name": "$exceptionHandler",
            "requires": [
                "ng.$log"
            ],
            "description": "Any uncaught exception in angular expressions is delegated to this service.\nThe default implementation simply delegates to `$log.error` which logs it into\nthe browser console.\n\nIn unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n{@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n\n## Example:\n\n```js\n  angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {\n    return function(exception, cause) {\n      exception.message += ' (caused by \"' + cause + '\")';\n      throw exception;\n    };\n  });\n```\n\nThis example will override the normal action of `$exceptionHandler`, to make angular\nexceptions fail hard when they happen, instead of just logging to the console.\n\n<hr />\nNote, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`\nmethods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}\n(unless executed during a digest).\n\nIf you wish, you can manually delegate exceptions, e.g.\n`try { ... } catch(e) { $exceptionHandler(e); }`",
            "params": [
                {
                    "name": "exception",
                    "description": "Exception associated with the error.",
                    "type": "Error"
                },
                {
                    "name": "cause",
                    "description": "optional information about the context in which\n      the error was thrown.",
                    "type": "String="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9132,
            "ngdoc": "service",
            "name": "$httpParamSerializer",
            "description": "Default {@link $http `$http`} params serializer that converts objects to strings\naccording to the following rules:\n\n* `{'foo': 'bar'}` results in `foo=bar`\n* `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)\n* `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)\n* `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D\"` (stringified and encoded representation of an object)\n\nNote that serializer will sort the request parameters alphabetically.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9169,
            "ngdoc": "service",
            "name": "$httpParamSerializerJQLike",
            "description": "Alternative {@link $http `$http`} params serializer that follows\njQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.\nThe serializer will also sort the params alphabetically.\n\nTo use it for serializing `$http` request parameters, set it as the `paramSerializer` property:\n\n```js\n$http({\n  url: myUrl,\n  method: 'GET',\n  params: myParams,\n  paramSerializer: '$httpParamSerializerJQLike'\n});\n```\n\nIt is also possible to set it as the default `paramSerializer` in the\n{@link $httpProvider#defaults `$httpProvider`}.\n\nAdditionally, you can inject the serializer and use it explicitly, for example to serialize\nform data for submission:\n\n```js\n.controller(function($http, $httpParamSerializerJQLike) {\n  //...\n\n  $http({\n    url: myUrl,\n    method: 'POST',\n    data: $httpParamSerializerJQLike(myData),\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n\n});\n```",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9261,
            "description": "Parse headers into key value object",
            "params": [
                {
                    "name": "headers",
                    "description": "Raw headers as a string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Parsed headers as key value object",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9291,
            "description": "Returns a function that provides access to parsed headers.\n\nHeaders are lazy parsed when first requested.",
            "see": [
                "parseHeaders"
            ],
            "params": [
                {
                    "name": "headers",
                    "description": "Headers to provide access to.",
                    "type": "(string|Object)"
                }
            ],
            "return": {
                "description": "Returns a getter function which if called with:\n\n  - if called with single an argument returns a single header value or null\n  - if called with no arguments returns an object containing all headers.",
                "type": "Function(string=)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9322,
            "description": "Chain all given functions\n\nThis function is used for both request and response transforming",
            "params": [
                {
                    "name": "data",
                    "description": "Data to transform.",
                    "type": "*"
                },
                {
                    "name": "headers",
                    "description": "HTTP headers getter fn.",
                    "type": "Function(string=)"
                },
                {
                    "name": "status",
                    "description": "HTTP status code of the response.",
                    "type": "Number"
                },
                {
                    "name": "fns",
                    "description": "Function or an array of functions.",
                    "type": "(Function|Array.<Function>)"
                }
            ],
            "return": {
                "description": "Transformed data.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9351,
            "ngdoc": "provider",
            "name": "$httpProvider",
            "description": "Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9358,
            "ngdoc": "property",
            "name": "$httpProvider#defaults",
            "description": "Object containing default values for all {@link ng.$http $http} requests.\n\n- **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}\nthat will provide the cache for all requests who set their `cache` property to `true`.\nIf you set the `defaults.cache = false` then only requests that specify their own custom\ncache object will be cached. See {@link $http#caching $http Caching} for more information.\n\n- **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.\nDefaults value is `'XSRF-TOKEN'`.\n\n- **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the\nXSRF token. Defaults value is `'X-XSRF-TOKEN'`.\n\n- **`defaults.headers`** - {Object} - Default headers for all $http requests.\nRefer to {@link ng.$http#setting-http-headers $http} for documentation on\nsetting default headers.\n    - **`defaults.headers.common`**\n    - **`defaults.headers.post`**\n    - **`defaults.headers.put`**\n    - **`defaults.headers.patch`**\n\n\n- **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function\n used to the prepare string representation of request parameters (specified as an object).\n If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.\n Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9417,
            "ngdoc": "method",
            "name": "$httpProvider#useApplyAsync",
            "description": "Configure $http service to combine processing of multiple http responses received at around\nthe same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in\nsignificant performance improvement for bigger applications that make many HTTP requests\nconcurrently (common during application bootstrap).\n\nDefaults to false. If no value is specified, returns the current configured value.",
            "params": [
                {
                    "name": "value",
                    "description": "If true, when requests are loaded, they will schedule a deferred\n   \"apply\" on the next tick, giving time for subsequent requests in a roughly ~10ms window\n   to load and share the same digest cycle.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "If a value is specified, returns the $httpProvider for chaining.\n   otherwise, returns the current configured value.",
                "type": "Boolean|Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9444,
            "ngdoc": "property",
            "name": "$httpProvider#interceptors",
            "description": "Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}\npre-processing of request or postprocessing of responses.\n\nThese service factories are ordered by request, i.e. they are applied in the same order as the\narray, on request, but reverse order, on response.\n\n{@link ng.$http#interceptors Interceptors detailed info}",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9464,
            "description": "Make sure that default param serializer is exposed as a function",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9470,
            "description": "Interceptors stored in reverse order. Inner interceptors before outer interceptors.\nThe reversal is needed so that we can build up the interception chain around the\nserver request.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 9482,
            "ngdoc": "service",
            "kind": "function",
            "name": "pendingRequests Array of config objects for currently pending!~YUIDOC_LINE~!  requests. This is primarily meant to be used for debugging purposes.",
            "requires": [
                "ng.$httpBackend",
                "$cacheFactory",
                "$rootScope",
                "$q",
                "$injector"
            ],
            "description": "The `$http` service is a core Angular service that facilitates communication with the remote\nHTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)\nobject or via [JSONP](http://en.wikipedia.org/wiki/JSONP).\n\nFor unit testing applications that use `$http` service, see\n{@link ngMock.$httpBackend $httpBackend mock}.\n\nFor a higher level of abstraction, please check out the {@link ngResource.$resource\n$resource} service.\n\nThe $http API is based on the {@link ng.$q deferred/promise APIs} exposed by\nthe $q service. While for simple usage patterns this doesn't matter much, for advanced usage\nit is important to familiarize yourself with these APIs and the guarantees they provide.\n\n\n## General usage\nThe `$http` service is a function which takes a single argument — a configuration object —\nthat is used to generate an HTTP request and returns  a {@link ng.$q promise}\nwith two $http specific methods: `success` and `error`.\n\n```js\n  // Simple GET request example :\n  $http.get('/someUrl').\n    success(function(data, status, headers, config) {\n      // this callback will be called asynchronously\n      // when the response is available\n    }).\n    error(function(data, status, headers, config) {\n      // called asynchronously if an error occurs\n      // or server returns response with an error status.\n    });\n```\n\n```js\n  // Simple POST request example (passing data) :\n  $http.post('/someUrl', {msg:'hello word!'}).\n    success(function(data, status, headers, config) {\n      // this callback will be called asynchronously\n      // when the response is available\n    }).\n    error(function(data, status, headers, config) {\n      // called asynchronously if an error occurs\n      // or server returns response with an error status.\n    });\n```\n\n\nSince the returned value of calling the $http function is a `promise`, you can also use\nthe `then` method to register callbacks, and these callbacks will receive a single argument –\nan object representing the response. See the API signature and type info below for more\ndetails.\n\nA response status code between 200 and 299 is considered a success status and\nwill result in the success callback being called. Note that if the response is a redirect,\nXMLHttpRequest will transparently follow it, meaning that the error callback will not be\ncalled for such responses.\n\n## Writing Unit Tests that use $http\nWhen unit testing (using {@link ngMock ngMock}), it is necessary to call\n{@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending\nrequest using trained responses.\n\n```\n$httpBackend.expectGET(...);\n$http.get(...);\n$httpBackend.flush();\n```\n\n## Shortcut methods\n\nShortcut methods are also available. All shortcut methods require passing in the URL, and\nrequest data must be passed in for POST/PUT requests.\n\n```js\n  $http.get('/someUrl').success(successCallback);\n  $http.post('/someUrl', data).success(successCallback);\n```\n\nComplete list of shortcut methods:\n\n- {@link ng.$http#get $http.get}\n- {@link ng.$http#head $http.head}\n- {@link ng.$http#post $http.post}\n- {@link ng.$http#put $http.put}\n- {@link ng.$http#delete $http.delete}\n- {@link ng.$http#jsonp $http.jsonp}\n- {@link ng.$http#patch $http.patch}\n\n\n## Setting HTTP Headers\n\nThe $http service will automatically add certain HTTP headers to all requests. These defaults\ncan be fully configured by accessing the `$httpProvider.defaults.headers` configuration\nobject, which currently contains this default configuration:\n\n- `$httpProvider.defaults.headers.common` (headers that are common for all requests):\n  - `Accept: application/json, text/plain, * / *`\n- `$httpProvider.defaults.headers.post`: (header defaults for POST requests)\n  - `Content-Type: application/json`\n- `$httpProvider.defaults.headers.put` (header defaults for PUT requests)\n  - `Content-Type: application/json`\n\nTo add or overwrite these defaults, simply add or remove a property from these configuration\nobjects. To add headers for an HTTP method other than POST or PUT, simply add a new object\nwith the lowercased HTTP method name as the key, e.g.\n`$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.\n\nThe defaults can also be set at runtime via the `$http.defaults` object in the same\nfashion. For example:\n\n```\nmodule.run(function($http) {\n  $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'\n});\n```\n\nIn addition, you can supply a `headers` property in the config object passed when\ncalling `$http(config)`, which overrides the defaults without changing them globally.\n\nTo explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,\nUse the `headers` property, setting the desired header to `undefined`. For example:\n\n```js\nvar req = {\n method: 'POST',\n url: 'http://example.com',\n headers: {\n   'Content-Type': undefined\n },\n data: { test: 'test' }\n}\n\n$http(req).success(function(){...}).error(function(){...});\n```\n\n## Transforming Requests and Responses\n\nBoth requests and responses can be transformed using transformation functions: `transformRequest`\nand `transformResponse`. These properties can be a single function that returns\nthe transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,\nwhich allows you to `push` or `unshift` a new transformation function into the transformation chain.\n\n### Default Transformations\n\nThe `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and\n`defaults.transformResponse` properties. If a request does not provide its own transformations\nthen these will be applied.\n\nYou can augment or replace the default transformations by modifying these properties by adding to or\nreplacing the array.\n\nAngular provides the following default transformations:\n\nRequest transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):\n\n- If the `data` property of the request configuration object contains an object, serialize it\n  into JSON format.\n\nResponse transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):\n\n - If XSRF prefix is detected, strip it (see Security Considerations section below).\n - If JSON response is detected, deserialize it using a JSON parser.\n\n\n### Overriding the Default Transformations Per Request\n\nIf you wish override the request/response transformations only for a single request then provide\n`transformRequest` and/or `transformResponse` properties on the configuration object passed\ninto `$http`.\n\nNote that if you provide these properties on the config object the default transformations will be\noverwritten. If you wish to augment the default transformations then you must include them in your\nlocal transformation array.\n\nThe following code demonstrates adding a new response transformation to be run after the default response\ntransformations have been run.\n\n```js\nfunction appendTransform(defaults, transform) {\n\n  // We can't guarantee that the default transformation is an array\n  defaults = angular.isArray(defaults) ? defaults : [defaults];\n\n  // Append the new transformation to the defaults\n  return defaults.concat(transform);\n}\n\n$http({\n  url: '...',\n  method: 'GET',\n  transformResponse: appendTransform($http.defaults.transformResponse, function(value) {\n    return doTransform(value);\n  })\n});\n```\n\n\n## Caching\n\nTo enable caching, set the request configuration `cache` property to `true` (to use default\ncache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).\nWhen the cache is enabled, `$http` stores the response from the server in the specified\ncache. The next time the same request is made, the response is served from the cache without\nsending a request to the server.\n\nNote that even if the response is served from cache, delivery of the data is asynchronous in\nthe same way that real requests are.\n\nIf there are multiple GET requests for the same URL that should be cached using the same\ncache, but the cache is not populated yet, only one request to the server will be made and\nthe remaining requests will be fulfilled using the response from the first request.\n\nYou can change the default cache to a new object (built with\n{@link ng.$cacheFactory `$cacheFactory`}) by updating the\n{@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set\ntheir `cache` property to `true` will now use this cache object.\n\nIf you set the default cache to `false` then only requests that specify their own custom\ncache object will be cached.\n\n## Interceptors\n\nBefore you start creating interceptors, be sure to understand the\n{@link ng.$q $q and deferred/promise APIs}.\n\nFor purposes of global error handling, authentication, or any kind of synchronous or\nasynchronous pre-processing of request or postprocessing of responses, it is desirable to be\nable to intercept requests before they are handed to the server and\nresponses before they are handed over to the application code that\ninitiated these requests. The interceptors leverage the {@link ng.$q\npromise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.\n\nThe interceptors are service factories that are registered with the `$httpProvider` by\nadding them to the `$httpProvider.interceptors` array. The factory is called and\ninjected with dependencies (if specified) and returns the interceptor.\n\nThere are two kinds of interceptors (and two kinds of rejection interceptors):\n\n  * `request`: interceptors get called with a http `config` object. The function is free to\n    modify the `config` object or create a new one. The function needs to return the `config`\n    object directly, or a promise containing the `config` or a new `config` object.\n  * `requestError`: interceptor gets called when a previous interceptor threw an error or\n    resolved with a rejection.\n  * `response`: interceptors get called with http `response` object. The function is free to\n    modify the `response` object or create a new one. The function needs to return the `response`\n    object directly, or as a promise containing the `response` or a new `response` object.\n  * `responseError`: interceptor gets called when a previous interceptor threw an error or\n    resolved with a rejection.\n\n\n```js\n  // register the interceptor as a service\n  $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n    return {\n      // optional method\n      'request': function(config) {\n        // do something on success\n        return config;\n      },\n\n      // optional method\n     'requestError': function(rejection) {\n        // do something on error\n        if (canRecover(rejection)) {\n          return responseOrNewPromise\n        }\n        return $q.reject(rejection);\n      },\n\n\n\n      // optional method\n      'response': function(response) {\n        // do something on success\n        return response;\n      },\n\n      // optional method\n     'responseError': function(rejection) {\n        // do something on error\n        if (canRecover(rejection)) {\n          return responseOrNewPromise\n        }\n        return $q.reject(rejection);\n      }\n    };\n  });\n\n  $httpProvider.interceptors.push('myHttpInterceptor');\n\n\n  // alternatively, register the interceptor via an anonymous factory\n  $httpProvider.interceptors.push(function($q, dependency1, dependency2) {\n    return {\n     'request': function(config) {\n         // same as above\n      },\n\n      'response': function(response) {\n         // same as above\n      }\n    };\n  });\n```\n\n## Security Considerations\n\nWhen designing web applications, consider security threats from:\n\n- [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\n- [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\nBoth server and the client must cooperate in order to eliminate these threats. Angular comes\npre-configured with strategies that address these issues, but for this to work backend server\ncooperation is required.\n\n### JSON Vulnerability Protection\n\nA [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\nallows third party website to turn your JSON resource URL into\n[JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To\ncounter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.\nAngular will automatically strip the prefix before processing it as JSON.\n\nFor example if your server needs to return:\n```js\n['one','two']\n```\n\nwhich is vulnerable to attack, your server can return:\n```js\n)]}',\n['one','two']\n```\n\nAngular will strip the prefix, before processing the JSON.\n\n\n### Cross Site Request Forgery (XSRF) Protection\n\n[XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which\nan unauthorized site can gain your user's private data. Angular provides a mechanism\nto counter XSRF. When performing XHR requests, the $http service reads a token from a cookie\n(by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only\nJavaScript that runs on your domain could read the cookie, your server can be assured that\nthe XHR came from JavaScript running on your domain. The header will not be set for\ncross-domain requests.\n\nTo take advantage of this, your server needs to set a token in a JavaScript readable session\ncookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the\nserver can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure\nthat only JavaScript running on your domain could have sent the request. The token must be\nunique for each user and must be verifiable by the server (to prevent the JavaScript from\nmaking up its own tokens). We recommend that the token is a digest of your site's\nauthentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)\nfor added security.\n\nThe name of the headers can be specified using the xsrfHeaderName and xsrfCookieName\nproperties of either $httpProvider.defaults at config-time, $http.defaults at run-time,\nor the per-request config object.\n\nIn order to prevent collisions in environments where multiple Angular apps share the\nsame domain or subdomain, we recommend that each application uses unique cookie name.",
            "return": {
                "description": "Returns a {@link ng.$q promise} object with the\n  standard `then` method and two http specific methods: `success` and `error`. The `then`\n  method takes two arguments a success and an error callback which will be called with a\n  response object. The `success` and `error` methods take a single argument - a function that\n  will be called when the request succeeds or fails respectively. The arguments passed into\n  these functions are destructured representation of the response object passed into the\n  `then` method. The response object has these properties:\n\n  - **data** – `{string|Object}` – The response body transformed with the transform\n    functions.\n  - **status** – `{number}` – HTTP status code of the response.\n  - **headers** – `{function([headerName])}` – Header getter function.\n  - **config** – `{Object}` – The configuration object that was used to generate the request.\n  - **statusText** – `{string}` – HTTP status text of the response.",
                "type": "HttpPromise"
            },
            "itemtype": "property",
            "type": "Array.<Object>",
            "example": [
                "\n<example module=\"httpExample\">\n<file name=\"index.html\">\n <div ng-controller=\"FetchController\">\n   <select ng-model=\"method\" aria-label=\"Request method\">\n     <option>GET</option>\n     <option>JSONP</option>\n   </select>\n   <input type=\"text\" ng-model=\"url\" size=\"80\" aria-label=\"URL\" />\n   <button id=\"fetchbtn\" ng-click=\"fetch()\">fetch</button><br>\n   <button id=\"samplegetbtn\" ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n   <button id=\"samplejsonpbtn\"\n     ng-click=\"updateModel('JSONP',\n                   'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">\n     Sample JSONP\n   </button>\n   <button id=\"invalidjsonpbtn\"\n     ng-click=\"updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">\n       Invalid JSONP\n     </button>\n   <pre>http status code: {{status}}</pre>\n   <pre>http response data: {{data}}</pre>\n </div>\n</file>\n<file name=\"script.js\">\n angular.module('httpExample', [])\n   .controller('FetchController', ['$scope', '$http', '$templateCache',\n     function($scope, $http, $templateCache) {\n       $scope.method = 'GET';\n       $scope.url = 'http-hello.html';\n\n       $scope.fetch = function() {\n         $scope.code = null;\n         $scope.response = null;\n\n         $http({method: $scope.method, url: $scope.url, cache: $templateCache}).\n           success(function(data, status) {\n             $scope.status = status;\n             $scope.data = data;\n           }).\n           error(function(data, status) {\n             $scope.data = data || \"Request failed\";\n             $scope.status = status;\n         });\n       };\n\n       $scope.updateModel = function(method, url) {\n         $scope.method = method;\n         $scope.url = url;\n       };\n     }]);\n</file>\n<file name=\"http-hello.html\">\n Hello, $http!\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n var status = element(by.binding('status'));\n var data = element(by.binding('data'));\n var fetchBtn = element(by.id('fetchbtn'));\n var sampleGetBtn = element(by.id('samplegetbtn'));\n var sampleJsonpBtn = element(by.id('samplejsonpbtn'));\n var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));\n\n it('should make an xhr GET request', function() {\n   sampleGetBtn.click();\n   fetchBtn.click();\n   expect(status.getText()).toMatch('200');\n   expect(data.getText()).toMatch(/Hello, \\$http!/);\n });\n\n// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185\n// it('should make a JSONP request to angularjs.org', function() {\n//   sampleJsonpBtn.click();\n//   fetchBtn.click();\n//   expect(status.getText()).toMatch('200');\n//   expect(data.getText()).toMatch(/Super Hero!/);\n// });\n\n it('should make JSONP request to invalid URL and invoke the error handler',\n     function() {\n   invalidJsonpBtn.click();\n   fetchBtn.click();\n   expect(status.getText()).toMatch('0');\n   expect(data.getText()).toMatch('Request failed');\n });\n</file>\n</example>"
            ],
            "class": "$modelFactory",
            "module": "ng",
            "subprops": [
                {
                    "name": "config",
                    "description": "Object describing the request to be made and how it should be\n   processed. The object has following properties:\n\n   - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)\n   - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.\n   - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized\n     with the `paramSerializer` and appended as GET parameters.\n   - **data** – `{string|Object}` – Data to be sent as the request message data.\n   - **headers** – `{Object}` – Map of strings or functions which return strings representing\n     HTTP headers to send to the server. If the return value of a function is null, the\n     header will not be sent. Functions accept a config object as an argument.\n   - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.\n   - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.\n   - **transformRequest** –\n     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     transform function or an array of such functions. The transform function takes the http\n     request body and headers and returns its transformed (typically serialized) version.\n     See {@link ng.$http#overriding-the-default-transformations-per-request\n     Overriding the Default Transformations}\n   - **transformResponse** –\n     `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –\n     transform function or an array of such functions. The transform function takes the http\n     response body, headers and status and returns its transformed (typically deserialized) version.\n     See {@link ng.$http#overriding-the-default-transformations-per-request\n     Overriding the Default TransformationjqLiks}\n   - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to\n     prepare the string representation of request parameters (specified as an object).\n     If specified as string, it is interpreted as function registered with the\n     {@link $injector $injector}, which means you can create your own serializer\n     by registering it as a {@link auto.$provide#service service}.\n     The default serializer is the {@link $httpParamSerializer $httpParamSerializer};\n     alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}\n   - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n     GET request, otherwise if a cache instance built with\n     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n     caching.\n   - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}\n     that should abort the request when resolved.\n   - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the\n     XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)\n     for more information.\n   - **responseType** - `{string}` - see\n     [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10146,
            "ngdoc": "method",
            "name": "$http#get",
            "description": "Shortcut method to perform `GET` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10158,
            "ngdoc": "method",
            "name": "$http#delete",
            "description": "Shortcut method to perform `DELETE` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10170,
            "ngdoc": "method",
            "name": "$http#head",
            "description": "Shortcut method to perform `HEAD` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10182,
            "ngdoc": "method",
            "name": "$http#jsonp",
            "description": "Shortcut method to perform `JSONP` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request.\n                    The name of the callback should be the string `JSON_CALLBACK`.",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10196,
            "ngdoc": "method",
            "name": "$http#post",
            "description": "Shortcut method to perform `POST` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Request content",
                    "type": "*"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10209,
            "ngdoc": "method",
            "name": "$http#put",
            "description": "Shortcut method to perform `PUT` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Request content",
                    "type": "*"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10222,
            "ngdoc": "method",
            "name": "$http#patch",
            "description": "Shortcut method to perform `PATCH` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Request content",
                    "type": "*"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10236,
            "ngdoc": "property",
            "name": "$http#defaults",
            "description": "Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\ndefault headers, withCredentials as well as request and response transformations.\n\nSee \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10277,
            "description": "Makes the request.\n\n!!! ACCESSES CLOSURE VARS:\n$httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10340,
            "description": "Callback registered to $httpBackend():\n - caches the response if desired\n - resolves the raw $http promise\n - calls $apply",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10369,
            "description": "Resolves the raw $http promise.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10409,
            "ngdoc": "service",
            "name": "$httpBackend",
            "requires": [
                "$window",
                "$document"
            ],
            "description": "HTTP backend used by the {@link ng.$http service} that delegates to\nXMLHttpRequest object or JSONP and deals with browser incompatibilities.\n\nYou should never need to use this service directly, instead use the higher-level abstractions:\n{@link ng.$http $http} or {@link ngResource.$resource $resource}.\n\nDuring testing this implementation is swapped with {@link ngMock.$httpBackend mock\n$httpBackend} which can be trained with responses.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10590,
            "ngdoc": "provider",
            "name": "$interpolateProvider",
            "description": "Used for configuring the interpolation markup. Defaults to `{{` and `}}`.",
            "example": [
                "\n<example module=\"customInterpolationApp\">\n<file name=\"index.html\">\n<script>\n var customInterpolationApp = angular.module('customInterpolationApp', []);\n\n customInterpolationApp.config(function($interpolateProvider) {\n   $interpolateProvider.startSymbol('//');\n   $interpolateProvider.endSymbol('//');\n });\n\n\n customInterpolationApp.controller('DemoController', function() {\n     this.label = \"This binding is brought you by // interpolation symbols.\";\n });\n</script>\n<div ng-app=\"App\" ng-controller=\"DemoController as demo\">\n   //demo.label//\n</div>\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n it('should interpolate binding with custom symbols', function() {\n   expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');\n });\n</file>\n</example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10629,
            "ngdoc": "method",
            "name": "$interpolateProvider#startSymbol",
            "description": "Symbol to denote start of expression in the interpolated string. Defaults to `{{`.",
            "params": [
                {
                    "name": "value",
                    "description": "new value to set the starting symbol to.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "Returns the symbol when used as getter and self if used as setter.",
                "type": "String|self"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10647,
            "ngdoc": "method",
            "name": "$interpolateProvider#endSymbol",
            "description": "Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.",
            "params": [
                {
                    "name": "value",
                    "description": "new value to set the ending symbol to.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "Returns the symbol when used as getter and self if used as setter.",
                "type": "String|self"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10698,
            "ngdoc": "service",
            "name": "$interpolate",
            "kind": "function",
            "requires": [
                "$parse",
                "$sce"
            ],
            "description": "Compiles a string with markup into an interpolation function. This service is used by the\nHTML {@link ng.$compile $compile} service for data binding. See\n{@link ng.$interpolateProvider $interpolateProvider} for configuring the\ninterpolation markup.\n\n\n```js\n  var $interpolate = ...; // injected\n  var exp = $interpolate('Hello {{name | uppercase}}!');\n  expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');\n```\n\n`$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is\n`true`, the interpolation function will return `undefined` unless all embedded expressions\nevaluate to a value other than `undefined`.\n\n```js\n  var $interpolate = ...; // injected\n  var context = {greeting: 'Hello', name: undefined };\n\n  // default \"forgiving\" mode\n  var exp = $interpolate('{{greeting}} {{name}}!');\n  expect(exp(context)).toEqual('Hello !');\n\n  // \"allOrNothing\" mode\n  exp = $interpolate('{{greeting}} {{name}}!', false, null, true);\n  expect(exp(context)).toBeUndefined();\n  context.name = 'Angular';\n  expect(exp(context)).toEqual('Hello Angular!');\n```\n\n`allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.\n\n####Escaped Interpolation\n$interpolate provides a mechanism for escaping interpolation markers. Start and end markers\ncan be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).\nIt will be rendered as a regular start/end marker, and will not be interpreted as an expression\nor binding.\n\nThis enables web-servers to prevent script injection attacks and defacing attacks, to some\ndegree, while also enabling code examples to work without relying on the\n{@link ng.directive:ngNonBindable ngNonBindable} directive.\n\n**For security purposes, it is strongly encouraged that web servers escape user-supplied data,\nreplacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all\ninterpolation start/end markers with their escaped counterparts.**\n\nEscaped interpolation markers are only replaced with the actual interpolation markers in rendered\noutput when the $interpolate service processes the text. So, for HTML elements interpolated\nby {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter\nset to `true`, the interpolated text must contain an unescaped interpolation expression. As such,\nthis is typically useful only when user-data is used in rendering a template from the server, or\nwhen otherwise untrusted data is used by a directive.\n\n<example>\n <file name=\"index.html\">\n   <div ng-init=\"username='A user'\">\n     <p ng-init=\"apptitle='Escaping demo'\">{{apptitle}}: \\{\\{ username = \"defaced value\"; \\}\\}\n       </p>\n     <p><strong>{{username}}</strong> attempts to inject code which will deface the\n       application, but fails to accomplish their task, because the server has correctly\n       escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)\n       characters.</p>\n     <p>Instead, the result of the attempted script injection is visible, and can be removed\n       from the database by an administrator.</p>\n   </div>\n </file>\n</example>",
            "params": [
                {
                    "name": "text",
                    "description": "The text with markup to interpolate.",
                    "type": "String"
                },
                {
                    "name": "mustHaveExpression",
                    "description": "if set to true then the interpolation string must have\n   embedded expression in order to return an interpolation function. Strings with no\n   embedded expression will return null for the interpolation function.",
                    "type": "Boolean="
                },
                {
                    "name": "trustedContext",
                    "description": "when provided, the returned function passes the interpolated\n   result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,\n   trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that\n   provides Strict Contextual Escaping for details.",
                    "type": "String="
                },
                {
                    "name": "allOrNothing",
                    "description": "if `true`, then the returned function returns undefined\n   unless all embedded expressions evaluate to a value other than `undefined`.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "an interpolation function which is used to compute the\n   interpolated string. The function has these parameters:\n\n- `context`: evaluation context for all expressions embedded in the interpolated text",
                "type": "Function(context)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10893,
            "ngdoc": "method",
            "name": "$interpolate#startSymbol",
            "description": "Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n\nUse {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change\nthe symbol.",
            "return": {
                "description": "start symbol.",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10909,
            "ngdoc": "method",
            "name": "$interpolate#endSymbol",
            "description": "Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n\nUse {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change\nthe symbol.",
            "return": {
                "description": "end symbol.",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 10934,
            "ngdoc": "service",
            "name": "$interval",
            "description": "Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`\nmilliseconds.\n\nThe return value of registering an interval function is a promise. This promise will be\nnotified upon each tick of the interval, and will be resolved after `count` iterations, or\nrun indefinitely if `count` is not defined. The value of the notification will be the\nnumber of iterations that have run.\nTo cancel an interval, call `$interval.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\nmove forward by `millis` milliseconds and trigger any functions scheduled to run in that\ntime.\n\n<div class=\"alert alert-warning\">\n**Note**: Intervals created by this service must be explicitly destroyed when you are finished\nwith them.  In particular they are not automatically destroyed when a controller's scope or a\ndirective's element are destroyed.\nYou should take this into consideration and make sure to always cancel the interval at the\nappropriate moment.  See the example below for more details on how and when to do this.\n</div>",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that should be called repeatedly.",
                    "type": "Function()"
                },
                {
                    "name": "delay",
                    "description": "Number of milliseconds between each function call.",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "Number of times to repeat. If not set, or 0, will repeat\n  indefinitely.",
                    "type": "Number=",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "invokeApply",
                    "description": "If set to `false` skips model dirty checking, otherwise\n  will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "Pass",
                    "description": "additional parameters to the executed function.",
                    "type": "...*="
                }
            ],
            "return": {
                "description": "A promise which will be notified on each iteration.",
                "type": "Promise"
            },
            "example": [
                "\n<example module=\"intervalExample\">\n<file name=\"index.html\">\n  <script>\n    angular.module('intervalExample', [])\n      .controller('ExampleController', ['$scope', '$interval',\n        function($scope, $interval) {\n          $scope.format = 'M/d/yy h:mm:ss a';\n          $scope.blood_1 = 100;\n          $scope.blood_2 = 120;\n\n          var stop;\n          $scope.fight = function() {\n            // Don't start a new fight if we are already fighting\n            if ( angular.isDefined(stop) ) return;\n\n            stop = $interval(function() {\n              if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {\n                $scope.blood_1 = $scope.blood_1 - 3;\n                $scope.blood_2 = $scope.blood_2 - 4;\n              } else {\n                $scope.stopFight();\n              }\n            }, 100);\n          };\n\n          $scope.stopFight = function() {\n            if (angular.isDefined(stop)) {\n              $interval.cancel(stop);\n              stop = undefined;\n            }\n          };\n\n          $scope.resetFight = function() {\n            $scope.blood_1 = 100;\n            $scope.blood_2 = 120;\n          };\n\n          $scope.$on('$destroy', function() {\n            // Make sure that the interval is destroyed too\n            $scope.stopFight();\n          });\n        }])\n      // Register the 'myCurrentTime' directive factory method.\n      // We inject $interval and dateFilter service since the factory method is DI.\n      .directive('myCurrentTime', ['$interval', 'dateFilter',\n        function($interval, dateFilter) {\n          // return the directive link function. (compile function not needed)\n          return function(scope, element, attrs) {\n            var format,  // date format\n                stopTime; // so that we can cancel the time updates\n\n            // used to update the UI\n            function updateTime() {\n              element.text(dateFilter(new Date(), format));\n            }\n\n            // watch the expression, and update the UI on change.\n            scope.$watch(attrs.myCurrentTime, function(value) {\n              format = value;\n              updateTime();\n            });\n\n            stopTime = $interval(updateTime, 1000);\n\n            // listen on DOM destroy (removal) event, and cancel the next UI update\n            // to prevent updating time after the DOM element was removed.\n            element.on('$destroy', function() {\n              $interval.cancel(stopTime);\n            });\n          }\n        }]);\n  </script>\n\n  <div>\n    <div ng-controller=\"ExampleController\">\n      <label>Date format: <input ng-model=\"format\"></label> <hr/>\n      Current time is: <span my-current-time=\"format\"></span>\n      <hr/>\n      Blood 1 : <font color='red'>{{blood_1}}</font>\n      Blood 2 : <font color='red'>{{blood_2}}</font>\n      <button type=\"button\" data-ng-click=\"fight()\">Fight</button>\n      <button type=\"button\" data-ng-click=\"stopFight()\">StopFight</button>\n      <button type=\"button\" data-ng-click=\"resetFight()\">resetFight</button>\n    </div>\n  </div>\n\n</file>\n</example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11094,
            "ngdoc": "method",
            "name": "$interval#cancel",
            "description": "Cancels a task associated with the `promise`.",
            "params": [
                {
                    "name": "promise",
                    "description": "returned by the `$interval` function.",
                    "type": "Promise"
                }
            ],
            "return": {
                "description": "Returns `true` if the task was successfully canceled.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11118,
            "ngdoc": "service",
            "name": "$locale",
            "description": "$locale service provides localization rules for various Angular components. As of right now the\nonly public api is:\n\n* `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11203,
            "description": "Encode path using encodeUriSegment, ignoring forward slashes",
            "params": [
                {
                    "name": "path",
                    "description": "Path to encode",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11247,
            "params": [
                {
                    "name": "begin",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "whole",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns text from whole after begin or undefined if it does not begin with\n                   expected string.",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11281,
            "description": "LocationHtml5Url represents an url\nThis object is exposed as $location service when HTML5 mode is enabled and supported",
            "is_constructor": 1,
            "params": [
                {
                    "name": "appBase",
                    "description": "application base URL",
                    "type": "String"
                },
                {
                    "name": "basePrefix",
                    "description": "url path prefix",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11296,
            "description": "Parse given html5 (regular) url string into properties",
            "params": [
                {
                    "name": "url",
                    "description": "HTML5 url",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11317,
            "description": "Compose url and update `absUrl` property",
            "access": "private",
            "tagname": "",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11359,
            "description": "LocationHashbangUrl represents url\nThis object is exposed as $location service when developer doesn't opt into html5 mode.\nIt also serves as the base class for html5 mode fallback on legacy browsers.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "appBase",
                    "description": "application base URL",
                    "type": "String"
                },
                {
                    "name": "hashPrefix",
                    "description": "hashbang prefix",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11374,
            "description": "Parse given hashbang url into properties",
            "params": [
                {
                    "name": "url",
                    "description": "Hashbang url",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11449,
            "description": "Compose hashbang url and update `absUrl` property",
            "access": "private",
            "tagname": "",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11471,
            "description": "LocationHashbangUrl represents url\nThis object is exposed as $location service when html5 history api is enabled but the browser\ndoes not support it.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "appBase",
                    "description": "application base URL",
                    "type": "String"
                },
                {
                    "name": "hashPrefix",
                    "description": "hashbang prefix",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11524,
            "description": "Are we in html5 mode?",
            "access": "private",
            "tagname": "",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11530,
            "description": "Has any change been replacing?",
            "access": "private",
            "tagname": "",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11536,
            "ngdoc": "method",
            "name": "$location#absUrl",
            "description": "This method is getter only.\n\nReturn full url representation with all segments encoded according to rules specified in\n[RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar absUrl = $location.absUrl();\n// => \"http://example.com/#/some/path?foo=bar&baz=xoxo\"\n```",
            "return": {
                "description": "full url",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11557,
            "ngdoc": "method",
            "name": "$location#url",
            "description": "This method is getter / setter.\n\nReturn url (e.g. `/path?a=b#hash`) when called without any parameter.\n\nChange path, search and hash, when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar url = $location.url();\n// => \"/some/path?foo=bar&baz=xoxo\"\n```",
            "params": [
                {
                    "name": "url",
                    "description": "New url without base prefix (e.g. `/path?a=b#hash`)",
                    "type": "String="
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11591,
            "ngdoc": "method",
            "name": "$location#protocol",
            "description": "This method is getter only.\n\nReturn protocol of current url.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar protocol = $location.protocol();\n// => \"http\"\n```",
            "return": {
                "description": "protocol of current url",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11611,
            "ngdoc": "method",
            "name": "$location#host",
            "description": "This method is getter only.\n\nReturn host of current url.\n\nNote: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar host = $location.host();\n// => \"example.com\"\n\n// given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo\nhost = $location.host();\n// => \"example.com\"\nhost = location.host;\n// => \"example.com:8080\"\n```",
            "return": {
                "description": "host of current url.",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11639,
            "ngdoc": "method",
            "name": "$location#port",
            "description": "This method is getter only.\n\nReturn port of current url.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar port = $location.port();\n// => 80\n```",
            "return": {
                "description": "port",
                "type": "Number"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11659,
            "ngdoc": "method",
            "name": "$location#path",
            "description": "This method is getter / setter.\n\nReturn path of current url when called without any parameter.\n\nChange path when called with parameter and return `$location`.\n\nNote: Path should always begin with forward slash (/), this method will add the forward slash\nif it is missing.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar path = $location.path();\n// => \"/some/path\"\n```",
            "params": [
                {
                    "name": "path",
                    "description": "New path",
                    "type": "(string|number)="
                }
            ],
            "return": {
                "description": "path",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11688,
            "ngdoc": "method",
            "name": "$location#search",
            "description": "This method is getter / setter.\n\nReturn search part (as object) of current url when called without any parameter.\n\nChange search part when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar searchObject = $location.search();\n// => {foo: 'bar', baz: 'xoxo'}\n\n// set foo to 'yipee'\n$location.search('foo', 'yipee');\n// $location.search() => {foo: 'yipee', baz: 'xoxo'}\n```",
            "params": [
                {
                    "name": "search",
                    "description": "New search params - string or\nhash object.\n\nWhen called with a single argument the method acts as a setter, setting the `search` component\nof `$location` to the specified value.\n\nIf the argument is a hash object containing an array of values, these values will be encoded\nas duplicate search parameters in the url.",
                    "type": "string|Object.<string>|Object.<Array.<string>>"
                },
                {
                    "name": "paramValue",
                    "description": "If `search` is a string or number, then `paramValue`\nwill override only a single search property.\n\nIf `paramValue` is an array, it will override the property of the `search` component of\n`$location` specified via the first argument.\n\nIf `paramValue` is `null`, the property specified via the first argument will be deleted.\n\nIf `paramValue` is `true`, the property specified via the first argument will be added with no\nvalue nor trailing equal sign.",
                    "type": "(string|Number|Array<string>|boolean)="
                }
            ],
            "return": {
                "description": "If called with no arguments returns the parsed `search` object. If called with\none or more arguments returns `$location` object itself.",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11766,
            "ngdoc": "method",
            "name": "$location#hash",
            "description": "This method is getter / setter.\n\nReturn hash fragment when called without any parameter.\n\nChange hash fragment when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue\nvar hash = $location.hash();\n// => \"hashValue\"\n```",
            "params": [
                {
                    "name": "hash",
                    "description": "New hash fragment",
                    "type": "(string|number)="
                }
            ],
            "return": {
                "description": "hash",
                "type": "String"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11791,
            "ngdoc": "method",
            "name": "$location#replace",
            "description": "If called, all changes to $location during current `$digest` will be replacing current history\nrecord, instead of adding new one.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11808,
            "ngdoc": "method",
            "name": "$location#state",
            "description": "This method is getter / setter.\n\nReturn the history state object when called without any parameter.\n\nChange the history state object when called with one parameter and return `$location`.\nThe state object is later passed to `pushState` or `replaceState`.\n\nNOTE: This method is supported only in HTML5 mode and only in browsers supporting\nthe HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support\nolder browsers (like IE9 or Android < 4.0), don't use this method.",
            "params": [
                {
                    "name": "state",
                    "description": "State object for pushState or replaceState",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "state",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11867,
            "ngdoc": "service",
            "name": "$location",
            "requires": [
                "$rootElement"
            ],
            "description": "The $location service parses the URL in the browser address bar (based on the\n[window.location](https://developer.mozilla.org/en/window.location)) and makes the URL\navailable to your application. Changes to the URL in the address bar are reflected into\n$location service and changes to $location are reflected into the browser address bar.\n\n**The $location service:**\n\n- Exposes the current URL in the browser address bar, so you can\n  - Watch and observe the URL.\n  - Change the URL.\n- Synchronizes the URL with the browser when the user\n  - Changes the address bar.\n  - Clicks the back or forward button (or clicks a History link).\n  - Clicks on a link.\n- Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n\nFor more information see {@link guide/$location Developer Guide: Using $location}",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11893,
            "ngdoc": "provider",
            "name": "$locationProvider",
            "description": "Use the `$locationProvider` to configure how the application deep linking paths are stored.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11907,
            "ngdoc": "method",
            "name": "$locationProvider#hashPrefix",
            "description": "",
            "params": [
                {
                    "name": "prefix",
                    "description": "Prefix for hash part (containing path and search)",
                    "type": "String="
                }
            ],
            "return": {
                "description": "current value if used as getter or itself (chaining) if used as setter",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11923,
            "ngdoc": "method",
            "name": "$locationProvider#html5Mode",
            "description": "",
            "params": [
                {
                    "name": "mode",
                    "description": "If boolean, sets `html5Mode.enabled` to value.\n  If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported\n  properties:\n  - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to\n    change urls where supported. Will fall back to hash-prefixed paths in browsers that do not\n    support `pushState`.\n  - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies\n    whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are\n    true, and a base tag is not present, an error will be thrown when `$location` is injected.\n    See the {@link guide/$location $location guide for more information}\n  - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,\n    enables/disables url rewriting for relative links.",
                    "type": "(boolean|Object)="
                }
            ],
            "return": {
                "description": "html5Mode object if used as getter or itself (chaining) if used as setter",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11966,
            "ngdoc": "event",
            "name": "$location#$locationChangeStart",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted before a URL will change.\n\nThis change can be prevented by calling\n`preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more\ndetails about event object. Upon successful change\n{@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.\n\nThe `newState` and `oldState` parameters may be defined only in HTML5 mode and when\nthe browser supports the HTML5 History API.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "newUrl",
                    "description": "New URL",
                    "type": "String"
                },
                {
                    "name": "oldUrl",
                    "description": "URL that was before it was changed.",
                    "type": "String="
                },
                {
                    "name": "newState",
                    "description": "New history state object",
                    "type": "String="
                },
                {
                    "name": "oldState",
                    "description": "History state object that was before it was changed.",
                    "type": "String="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 11988,
            "ngdoc": "event",
            "name": "$location#$locationChangeSuccess",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted after a URL was changed.\n\nThe `newState` and `oldState` parameters may be defined only in HTML5 mode and when\nthe browser supports the HTML5 History API.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "newUrl",
                    "description": "New URL",
                    "type": "String"
                },
                {
                    "name": "oldUrl",
                    "description": "URL that was before it was changed.",
                    "type": "String="
                },
                {
                    "name": "newState",
                    "description": "New history state object",
                    "type": "String="
                },
                {
                    "name": "oldState",
                    "description": "History state object that was before it was changed.",
                    "type": "String="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12180,
            "ngdoc": "service",
            "name": "$log",
            "requires": [
                "$window"
            ],
            "description": "Simple service for logging. Default implementation safely writes the message\ninto the browser's console (if present).\n\nThe main purpose of this service is to simplify debugging and troubleshooting.\n\nThe default is to log `debug` messages. You can use\n{@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.",
            "example": [
                "\n  <example module=\"logExample\">\n    <file name=\"script.js\">\n      angular.module('logExample', [])\n        .controller('LogController', ['$scope', '$log', function($scope, $log) {\n          $scope.$log = $log;\n          $scope.message = 'Hello World!';\n        }]);\n    </file>\n    <file name=\"index.html\">\n      <div ng-controller=\"LogController\">\n        <p>Reload this page with open console, enter text and hit the log button...</p>\n        <label>Message:\n        <input type=\"text\" ng-model=\"message\" /></label>\n        <button ng-click=\"$log.log(message)\">log</button>\n        <button ng-click=\"$log.warn(message)\">warn</button>\n        <button ng-click=\"$log.info(message)\">info</button>\n        <button ng-click=\"$log.error(message)\">error</button>\n        <button ng-click=\"$log.debug(message)\">debug</button>\n      </div>\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12218,
            "ngdoc": "provider",
            "name": "$logProvider",
            "description": "Use the `$logProvider` to configure how the application logs messages",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12228,
            "ngdoc": "method",
            "name": "$logProvider#debugEnabled",
            "description": "",
            "params": [
                {
                    "name": "flag",
                    "description": "enable or disable debug level messages",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "current value if used as getter or itself (chaining) if used as setter",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12246,
            "ngdoc": "method",
            "name": "$log#log",
            "description": "Write a log message",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12255,
            "ngdoc": "method",
            "name": "$log#info",
            "description": "Write an information message",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12264,
            "ngdoc": "method",
            "name": "$log#warn",
            "description": "Write a warning message",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12273,
            "ngdoc": "method",
            "name": "$log#error",
            "description": "Write an error message",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12282,
            "ngdoc": "method",
            "name": "$log#debug",
            "description": "Write a debug message",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 12444,
            "is_constructor": 1,
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 13933,
            "is_constructor": 1,
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 13991,
            "ngdoc": "service",
            "name": "$parse",
            "kind": "function",
            "description": "Converts Angular {@link guide/expression expression} into a function.\n\n```js\n  var getter = $parse('user.name');\n  var setter = getter.assign;\n  var context = {user:{name:'angular'}};\n  var locals = {user:{name:'local'}};\n\n  expect(getter(context)).toEqual('angular');\n  setter(context, 'newValue');\n  expect(context.user.name).toEqual('newValue');\n  expect(getter(context, locals)).toEqual('local');\n```",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.\n\n   The returned function also has the following properties:\n     * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript\n       literal.\n     * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript\n       constant literals.\n     * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be\n       set to a function to change its value on the given context.",
                "type": "Function(context, locals)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14032,
            "ngdoc": "provider",
            "name": "$parseProvider",
            "description": "`$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}\n service.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14253,
            "ngdoc": "service",
            "name": "$q",
            "requires": [
                "$rootScope"
            ],
            "description": "A service that helps you run functions asynchronously, and use their return values (or exceptions)\nwhen they are done processing.\n\nThis is an implementation of promises/deferred objects inspired by\n[Kris Kowal's Q](https://github.com/kriskowal/q).\n\n$q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred\nimplementations, and the other which resembles ES6 promises to some degree.\n\n# $q constructor\n\nThe streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`\nfunction as the first argument. This is similar to the native Promise implementation from ES6 Harmony,\nsee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\nWhile the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are\navailable yet.\n\nIt can be used like so:\n\n```js\n  // for the purpose of this example let's assume that variables `$q` and `okToGreet`\n  // are available in the current lexical scope (they could have been injected or passed in).\n\n  function asyncGreet(name) {\n    // perform some asynchronous operation, resolve or reject the promise when appropriate.\n    return $q(function(resolve, reject) {\n      setTimeout(function() {\n        if (okToGreet(name)) {\n          resolve('Hello, ' + name + '!');\n        } else {\n          reject('Greeting ' + name + ' is not allowed.');\n        }\n      }, 1000);\n    });\n  }\n\n  var promise = asyncGreet('Robin Hood');\n  promise.then(function(greeting) {\n    alert('Success: ' + greeting);\n  }, function(reason) {\n    alert('Failed: ' + reason);\n  });\n```\n\nNote: progress/notify callbacks are not currently supported via the ES6-style interface.\n\nHowever, the more traditional CommonJS-style usage is still available, and documented below.\n\n[The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\ninterface for interacting with an object that represents the result of an action that is\nperformed asynchronously, and may or may not be finished at any given point in time.\n\nFrom the perspective of dealing with error handling, deferred and promise APIs are to\nasynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n\n```js\n  // for the purpose of this example let's assume that variables `$q` and `okToGreet`\n  // are available in the current lexical scope (they could have been injected or passed in).\n\n  function asyncGreet(name) {\n    var deferred = $q.defer();\n\n    setTimeout(function() {\n      deferred.notify('About to greet ' + name + '.');\n\n      if (okToGreet(name)) {\n        deferred.resolve('Hello, ' + name + '!');\n      } else {\n        deferred.reject('Greeting ' + name + ' is not allowed.');\n      }\n    }, 1000);\n\n    return deferred.promise;\n  }\n\n  var promise = asyncGreet('Robin Hood');\n  promise.then(function(greeting) {\n    alert('Success: ' + greeting);\n  }, function(reason) {\n    alert('Failed: ' + reason);\n  }, function(update) {\n    alert('Got notification: ' + update);\n  });\n```\n\nAt first it might not be obvious why this extra complexity is worth the trouble. The payoff\ncomes in the way of guarantees that promise and deferred APIs make, see\nhttps://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.\n\nAdditionally the promise api allows for composition that is very hard to do with the\ntraditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\nFor more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\nsection on serial or parallel joining of promises.\n\n# The Deferred API\n\nA new instance of deferred is constructed by calling `$q.defer()`.\n\nThe purpose of the deferred object is to expose the associated Promise instance as well as APIs\nthat can be used for signaling the successful or unsuccessful completion, as well as the status\nof the task.\n\n**Methods**\n\n- `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\n  constructed via `$q.reject`, the promise will be rejected instead.\n- `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\n  resolving it with a rejection constructed via `$q.reject`.\n- `notify(value)` - provides updates on the status of the promise's execution. This may be called\n  multiple times before the promise is either resolved or rejected.\n\n**Properties**\n\n- promise – `{Promise}` – promise object associated with this deferred.\n\n\n# The Promise API\n\nA new promise instance is created when a deferred instance is created and can be retrieved by\ncalling `deferred.promise`.\n\nThe purpose of the promise object is to allow for interested parties to get access to the result\nof the deferred task when it completes.\n\n**Methods**\n\n- `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or\n  will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously\n  as soon as the result is available. The callbacks are called with a single argument: the result\n  or rejection reason. Additionally, the notify callback may be called zero or more times to\n  provide a progress indication, before the promise is resolved or rejected.\n\n  This method *returns a new promise* which is resolved or rejected via the return value of the\n  `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved\n  with the value which is resolved in that promise using\n  [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).\n  It also notifies via the return value of the `notifyCallback` method. The promise cannot be\n  resolved or rejected from the notifyCallback method.\n\n- `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`\n\n- `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,\n  but to do so without modifying the final value. This is useful to release resources or do some\n  clean-up that needs to be done whether the promise was rejected or resolved. See the [full\n  specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for\n  more information.\n\n# Chaining promises\n\nBecause calling the `then` method of a promise returns a new derived promise, it is easily\npossible to create a chain of promises:\n\n```js\n  promiseB = promiseA.then(function(result) {\n    return result + 1;\n  });\n\n  // promiseB will be resolved immediately after promiseA is resolved and its value\n  // will be the result of promiseA incremented by 1\n```\n\nIt is possible to create chains of any length and since a promise can be resolved with another\npromise (which will defer its resolution further), it is possible to pause/defer resolution of\nthe promises at any point in the chain. This makes it possible to implement powerful APIs like\n$http's response interceptors.\n\n\n# Differences between Kris Kowal's Q and $q\n\n There are two main differences:\n\n- $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n  mechanism in angular, which means faster propagation of resolution or rejection into your\n  models and avoiding unnecessary browser repaints, which would result in flickering UI.\n- Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\n  all the important functionality needed for common async tasks.\n\n # Testing\n\n ```js\n   it('should simulate promise', inject(function($q, $rootScope) {\n     var deferred = $q.defer();\n     var promise = deferred.promise;\n     var resolvedValue;\n\n     promise.then(function(value) { resolvedValue = value; });\n     expect(resolvedValue).toBeUndefined();\n\n     // Simulate resolving of promise\n     deferred.resolve(123);\n     // Note that the 'then' function does not get called synchronously.\n     // This is because we want the promise API to always be async, whether or not\n     // it got called synchronously or asynchronously.\n     expect(resolvedValue).toBeUndefined();\n\n     // Propagate promise resolution to 'then' functions using $apply().\n     $rootScope.$apply();\n     expect(resolvedValue).toEqual(123);\n   }));\n ```",
            "params": [
                {
                    "name": "resolver",
                    "description": "Function which is responsible for resolving or\n  rejecting the newly created promise. The first parameter is a function which resolves the\n  promise, the second parameter is a function which rejects the promise.",
                    "type": "Function(function, function)"
                }
            ],
            "return": {
                "description": "The newly created promise.",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14484,
            "description": "Constructs a promise manager.",
            "params": [
                {
                    "name": "nextTick",
                    "description": "Function for executing functions in the next turn.",
                    "type": "Function(function)"
                },
                {
                    "name": "exceptionHandler",
                    "description": "Function into which unexpected exceptions are passed for\n    debugging purposes.",
                    "type": "function(...*)"
                }
            ],
            "return": {
                "description": "Promise manager.",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14507,
            "ngdoc": "method",
            "name": "ng.$q#defer",
            "kind": "function",
            "description": "Creates a `Deferred` object which represents a task which will finish in the future.",
            "return": {
                "description": "Returns a new instance of deferred.",
                "type": "Deferred"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14659,
            "ngdoc": "method",
            "name": "$q#reject",
            "kind": "function",
            "description": "Creates a promise that is resolved as rejected with the specified `reason`. This api should be\nused to forward rejection in a chain of promises. If you are dealing with the last promise in\na promise chain, you don't need to worry about it.\n\nWhen comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n`reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\na promise error callback and you want to forward the error to the promise derived from the\ncurrent promise, you have to \"rethrow\" the error by returning a rejection constructed via\n`reject`.\n\n```js\n  promiseB = promiseA.then(function(result) {\n    // success: do something and resolve promiseB\n    //          with the old or a new result\n    return result;\n  }, function(reason) {\n    // error: handle the error if possible and\n    //        resolve promiseB with newPromiseOrValue,\n    //        otherwise forward the rejection to promiseB\n    if (canHandle(reason)) {\n     // handle the error and recover\n     return newPromiseOrValue;\n    }\n    return $q.reject(reason);\n  });\n```",
            "params": [
                {
                    "name": "reason",
                    "description": "Constant, message, exception or an object representing the rejection reason.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns a promise that was already resolved as rejected with the `reason`.",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14729,
            "ngdoc": "method",
            "name": "$q#when",
            "kind": "function",
            "description": "Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\nThis is useful when you are dealing with an object that might or might not be a promise, or if\nthe promise comes from a source that can't be trusted.",
            "params": [
                {
                    "name": "value",
                    "description": "Value or a promise",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns a promise of the passed value or promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14750,
            "ngdoc": "method",
            "name": "$q#resolve",
            "kind": "function",
            "description": "Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.",
            "params": [
                {
                    "name": "value",
                    "description": "Value or a promise",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns a promise of the passed value or promise",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14763,
            "ngdoc": "method",
            "name": "$q#all",
            "kind": "function",
            "description": "Combines multiple promises into a single promise that is resolved when all of the input\npromises are resolved.",
            "params": [
                {
                    "name": "promises",
                    "description": "An array or hash of promises.",
                    "type": "Array.<Promise>|Object.<Promise>"
                }
            ],
            "return": {
                "description": "Returns a single promise that will be resolved with an array/hash of values,\n  each value corresponding to the promise at the same index/key in the `promises` array/hash.\n  If any of the promises is resolved with a rejection, this resulting promise will be rejected\n  with the same rejection value.",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14905,
            "description": "DESIGN NOTES\n\nThe design decisions behind the scope are heavily favored for speed and memory consumption.\n\nThe typical use of scope is to watch the expressions, which most of the time return the same\nvalue as last time so we optimize the operation.\n\nClosures construction is expensive in terms of speed as well as memory:\n  - No closures, instead use prototypical inheritance for API\n  - Internal state needs to be stored on scope directly, which means that private state is\n    exposed as $$____ properties\n\nLoop operations are optimized by using while(count--) { ... }\n  - this means that in order to keep the same order of execution as addition we have to add\n    items to the array at the beginning (unshift) instead of at the end (push)\n\nChild scopes are created and removed often\n  - Using an array would be slow since inserts in middle are expensive so we use linked list\n\nThere are few watches then a lot of observers. This is why you don't want the observer to be\nimplemented in the same way as watch. Watch requires return of initialization function which\nare expensive to construct.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14931,
            "ngdoc": "provider",
            "name": "$rootScopeProvider",
            "description": "Provider for the $rootScope service.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14939,
            "ngdoc": "method",
            "name": "$rootScopeProvider#digestTtl",
            "description": "Sets the number of `$digest` iterations the scope should attempt to execute before giving up and\nassuming that the model is unstable.\n\nThe current default is 10 iterations.\n\nIn complex applications it's possible that the dependencies between `$watch`s will result in\nseveral digest iterations. However if an application needs more than the default 10 digest\niterations for its model to stabilize then you should investigate what is causing the model to\ncontinuously change during the digest.\n\nIncreasing the TTL could have performance implications, so you should not change it without\nproper justification.",
            "params": [
                {
                    "name": "limit",
                    "description": "The number of digest iterations.",
                    "type": "Number"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 14961,
            "ngdoc": "service",
            "name": "$rootScope",
            "description": "Every application has a single root {@link ng.$rootScope.Scope scope}.\nAll other scopes are descendant scopes of the root scope. Scopes provide separation\nbetween the model and the view, via a mechanism for watching the model for changes.\nThey also provide an event emission/broadcast and subscription facility. See the\n{@link guide/scope developer guide on scopes}.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15006,
            "ngdoc": "type",
            "name": "$rootScope.Scope",
            "description": "A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n{@link auto.$injector $injector}. Child scopes are created using the\n{@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\ncompiled HTML template is executed.)\n\nHere is a simple scope snippet to show how you can interact with the scope.\n```html\n<file src=\"./test/ng/rootScopeSpec.js\" tag=\"docs1\" />\n```\n\n# Inheritance\nA scope can inherit from a parent scope, as in this example:\n```js\n        var parent = $rootScope;\n        var child = parent.$new();\n\n        parent.salutation = \"Hello\";\n        expect(child.salutation).toEqual('Hello');\n\n        child.salutation = \"Welcome\";\n        expect(child.salutation).toEqual('Welcome');\n        expect(parent.salutation).toEqual('Hello');\n```\n\nWhen interacting with `Scope` in tests, additional helper methods are available on the\ninstances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional\ndetails.",
            "params": [
                {
                    "name": "providers",
                    "description": "Map of service factory which need to be\n                                      provided for the current scope. Defaults to {@link ng}.",
                    "type": "Object.<string, function()>="
                },
                {
                    "name": "instanceCache",
                    "description": "Provides pre-instantiated services which should\n                             append/override services provided by `providers`. This is handy\n                             when unit-testing and having the need to override a default\n                             service.",
                    "type": "Object.<string, *>="
                }
            ],
            "return": {
                "description": "Newly created scope.",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15062,
            "ngdoc": "property",
            "name": "$rootScope.Scope#$id",
            "description": "Unique scope ID (monotonically increasing) useful for debugging.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15070,
            "ngdoc": "property",
            "name": "$rootScope.Scope#$parent",
            "description": "Reference to the parent scope.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15078,
            "ngdoc": "property",
            "name": "$rootScope.Scope#$root",
            "description": "Reference to the root scope.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15088,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$new",
            "kind": "function",
            "description": "Creates a new child {@link ng.$rootScope.Scope scope}.\n\nThe parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.\nThe scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n\n{@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is\ndesired for the scope and its child scopes to be permanently detached from the parent and\nthus stop participating in model change detection and listener notification by invoking.",
            "params": [
                {
                    "name": "isolate",
                    "description": "If true, then the scope does not prototypically inherit from the\n        parent scope. The scope is isolated, as it can not see parent scope properties.\n        When creating widgets, it is useful for the widget to not accidentally read parent\n        state.",
                    "type": "Boolean"
                },
                {
                    "name": "parent",
                    "description": "The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`\n                             of the newly created scope. Defaults to `this` scope if not provided.\n                             This is used when creating a transclude scope to correctly place it\n                             in the scope hierarchy while maintaining the correct prototypical\n                             inheritance.",
                    "type": "Scope",
                    "optional": true,
                    "optdefault": "this"
                }
            ],
            "return": {
                "description": "The newly created child scope.",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15152,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$watch",
            "kind": "function",
            "description": "Registers a `listener` callback to be executed whenever the `watchExpression` changes.\n\n- The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest\n  $digest()} and should return the value that will be watched. (Since\n  {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the\n  `watchExpression` can execute multiple times per\n  {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n- The `listener` is called only when the value from the current `watchExpression` and the\n  previous call to `watchExpression` are not equal (with the exception of the initial run,\n  see below). Inequality is determined according to reference inequality,\n  [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n   via the `!==` Javascript operator, unless `objectEquality == true`\n  (see next point)\n- When `objectEquality == true`, inequality of the `watchExpression` is determined\n  according to the {@link angular.equals} function. To save the value of the object for\n  later comparison, the {@link angular.copy} function is used. This therefore means that\n  watching complex objects will have adverse memory and performance implications.\n- The watch `listener` may change the model, which may trigger other `listener`s to fire.\n  This is achieved by rerunning the watchers until no changes are detected. The rerun\n  iteration limit is 10 to prevent an infinite loop deadlock.\n\n\nIf you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\nyou can register a `watchExpression` function with no `listener`. (Since `watchExpression`\ncan execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a\nchange is detected, be prepared for multiple calls to your listener.)\n\nAfter a watcher is registered with the scope, the `listener` fn is called asynchronously\n(via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\nwatcher. In rare cases, this is undesirable because the listener is called when the result\nof `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\ncan compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\nlistener was called due to initialization.\n\n\n\n# Example\n```js\n          // let's assume that scope was dependency injected as the $rootScope\n          var scope = $rootScope;\n          scope.name = 'misko';\n          scope.counter = 0;\n\n          expect(scope.counter).toEqual(0);\n          scope.$watch('name', function(newValue, oldValue) {\n            scope.counter = scope.counter + 1;\n          });\n          expect(scope.counter).toEqual(0);\n\n          scope.$digest();\n          // the listener is always called during the first $digest loop after it was registered\n          expect(scope.counter).toEqual(1);\n\n          scope.$digest();\n          // but now it will not be called unless the value changes\n          expect(scope.counter).toEqual(1);\n\n          scope.name = 'adam';\n          scope.$digest();\n          expect(scope.counter).toEqual(2);\n\n\n\n          // Using a function as a watchExpression\n          var food;\n          scope.foodCounter = 0;\n          expect(scope.foodCounter).toEqual(0);\n          scope.$watch(\n            // This function returns the value being watched. It is called for each turn of the $digest loop\n            function() { return food; },\n            // This is the change listener, called when the value returned from the above function changes\n            function(newValue, oldValue) {\n              if ( newValue !== oldValue ) {\n                // Only increment the counter if the value changed\n                scope.foodCounter = scope.foodCounter + 1;\n              }\n            }\n          );\n          // No digest has been run so the counter will be zero\n          expect(scope.foodCounter).toEqual(0);\n\n          // Run the digest but since food has not changed count will still be zero\n          scope.$digest();\n          expect(scope.foodCounter).toEqual(0);\n\n          // Update food and run digest.  Now the counter will increment\n          food = 'cheeseburger';\n          scope.$digest();\n          expect(scope.foodCounter).toEqual(1);\n\n```",
            "params": [
                {
                    "name": "watchExpression",
                    "description": "Expression that is evaluated on each\n   {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers\n   a call to the `listener`.\n\n   - `string`: Evaluated as {@link guide/expression expression}\n   - `function(scope)`: called with current `scope` as a parameter.",
                    "type": "(function()|string)"
                },
                {
                    "name": "listener",
                    "description": "Callback called whenever the value\n   of `watchExpression` changes.\n\n   - `newVal` contains the current value of the `watchExpression`\n   - `oldVal` contains the previous value of the `watchExpression`\n   - `scope` refers to the current scope",
                    "type": "Function(newVal, oldVal, scope)"
                },
                {
                    "name": "objectEquality",
                    "description": "Compare for object equality using {@link angular.equals} instead of\n    comparing for reference equality.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "Returns a deregistration function for this listener.",
                "type": "Function()"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15306,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$watchGroup",
            "kind": "function",
            "description": "A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.\nIf any one expression in the collection changes the `listener` is executed.\n\n- The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every\n  call to $digest() to see if any items changes.\n- The `listener` is called whenever any expression in the `watchExpressions` array changes.",
            "params": [
                {
                    "name": "watchExpressions",
                    "description": "Array of expressions that will be individually\nwatched using {@link ng.$rootScope.Scope#$watch $watch()}",
                    "type": "Array.<string|Function(scope)>"
                },
                {
                    "name": "listener",
                    "description": "Callback called whenever the return value of any\n   expression in `watchExpressions` changes\n   The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching\n   those of `watchExpression`\n   and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching\n   those of `watchExpression`\n   The `scope` refers to the current scope.",
                    "type": "Function(newValues, oldValues, scope)"
                }
            ],
            "return": {
                "description": "Returns a de-registration function for all listeners.",
                "type": "Function()"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15390,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$watchCollection",
            "kind": "function",
            "description": "Shallow watches the properties of an object and fires whenever any of the properties change\n(for arrays, this implies watching the array items; for object maps, this implies watching\nthe properties). If a change is detected, the `listener` callback is fired.\n\n- The `obj` collection is observed via standard $watch operation and is examined on every\n  call to $digest() to see if any items have been added, removed, or moved.\n- The `listener` is called whenever anything within the `obj` has changed. Examples include\n  adding, removing, and moving items belonging to an object or array.\n\n\n# Example\n```js\n         $scope.names = ['igor', 'matias', 'misko', 'james'];\n         $scope.dataCount = 4;\n\n         $scope.$watchCollection('names', function(newNames, oldNames) {\n           $scope.dataCount = newNames.length;\n         });\n\n         expect($scope.dataCount).toEqual(4);\n         $scope.$digest();\n\n         //still at 4 ... no changes\n         expect($scope.dataCount).toEqual(4);\n\n         $scope.names.pop();\n         $scope.$digest();\n\n         //now there's been a change\n         expect($scope.dataCount).toEqual(3);\n```",
            "params": [
                {
                    "name": "obj",
                    "description": "Evaluated as {@link guide/expression expression}. The\n   expression value should evaluate to an object or an array which is observed on each\n   {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the\n   collection will trigger a call to the `listener`.",
                    "type": "String|function(scope)"
                },
                {
                    "name": "listener",
                    "description": "a callback function called\n   when a change is detected.\n   - The `newCollection` object is the newly modified data obtained from the `obj` expression\n   - The `oldCollection` object is a copy of the former collection data.\n     Due to performance considerations, the`oldCollection` value is computed only if the\n     `listener` function declares two or more arguments.\n   - The `scope` argument refers to the current scope.",
                    "type": "Function(newCollection, oldCollection, scope)"
                }
            ],
            "return": {
                "description": "Returns a de-registration function for this listener. When the\n   de-registration function is executed, the internal watch operation is terminated.",
                "type": "Function()"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15577,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$digest",
            "kind": "function",
            "description": "Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and\nits children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change\nthe model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}\nuntil no more listeners are firing. This means that it is possible to get into an infinite\nloop. This function will throw `'Maximum iteration limit exceeded.'` if the number of\niterations exceeds 10.\n\nUsually, you don't call `$digest()` directly in\n{@link ng.directive:ngController controllers} or in\n{@link ng.$compileProvider#directive directives}.\nInstead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within\na {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.\n\nIf you want to be notified whenever `$digest()` is called,\nyou can register a `watchExpression` function with\n{@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.\n\nIn unit tests, you may need to call `$digest()` to simulate the scope life cycle.\n\n# Example\n```js\n          var scope = ...;\n          scope.name = 'misko';\n          scope.counter = 0;\n\n          expect(scope.counter).toEqual(0);\n          scope.$watch('name', function(newValue, oldValue) {\n            scope.counter = scope.counter + 1;\n          });\n          expect(scope.counter).toEqual(0);\n\n          scope.$digest();\n          // the listener is always called during the first $digest loop after it was registered\n          expect(scope.counter).toEqual(1);\n\n          scope.$digest();\n          // but now it will not be called unless the value changes\n          expect(scope.counter).toEqual(1);\n\n          scope.name = 'adam';\n          scope.$digest();\n          expect(scope.counter).toEqual(2);\n```",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15741,
            "ngdoc": "event",
            "name": "$rootScope.Scope#$destroy",
            "eventtype": "broadcast on scope being destroyed",
            "description": "Broadcasted when a scope and its children are being destroyed.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15753,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$destroy",
            "kind": "function",
            "description": "Removes the current scope (and all of its children) from the parent scope. Removal implies\nthat calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\npropagate to the current scope and its children. Removal also implies that the current\nscope is eligible for garbage collection.\n\nThe `$destroy()` is usually used by directives such as\n{@link ng.directive:ngRepeat ngRepeat} for managing the\nunrolling of the loop.\n\nJust before a scope is destroyed, a `$destroy` event is broadcasted on this scope.\nApplication code can register a `$destroy` event handler that will give it a chance to\nperform any necessary cleanup.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15817,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$eval",
            "kind": "function",
            "description": "Executes the `expression` on the current scope and returns the result. Any exceptions in\nthe expression are propagated (uncaught). This is useful when evaluating Angular\nexpressions.\n\n# Example\n```js\n          var scope = ng.$rootScope.Scope();\n          scope.a = 1;\n          scope.b = 2;\n\n          expect(scope.$eval('a+b')).toEqual(3);\n          expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n```",
            "params": [
                {
                    "name": "expression",
                    "description": "An angular expression to be executed.\n\n   - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n   - `function(scope)`: execute the function with the current `scope` parameter.",
                    "type": "(string|function())="
                },
                {
                    "name": "locals",
                    "description": "Local variables object, useful for overriding values in scope.",
                    "type": "(object)="
                }
            ],
            "return": {
                "description": "The result of evaluating the expression.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15849,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$evalAsync",
            "kind": "function",
            "description": "Executes the expression on the current scope at a later point in time.\n\nThe `$evalAsync` makes no guarantees as to when the `expression` will be executed, only\nthat:\n\n  - it will execute after the function that scheduled the evaluation (preferably before DOM\n    rendering).\n  - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n    `expression` execution.\n\nAny exceptions from the execution of the expression are forwarded to the\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\n__Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle\nwill be scheduled. However, it is encouraged to always call code that changes the model\nfrom within an `$apply` call. That includes code evaluated via `$evalAsync`.",
            "params": [
                {
                    "name": "expression",
                    "description": "An angular expression to be executed.\n\n   - `string`: execute using the rules as defined in {@link guide/expression expression}.\n   - `function(scope)`: execute the function with the current `scope` parameter.",
                    "type": "(string|function())="
                },
                {
                    "name": "locals",
                    "description": "Local variables object, useful for overriding values in scope.",
                    "type": "(object)="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15897,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$apply",
            "kind": "function",
            "description": "`$apply()` is used to execute an expression in angular from outside of the angular\nframework. (For example from browser DOM events, setTimeout, XHR or third party libraries).\nBecause we are calling into the angular framework we need to perform proper scope life\ncycle of {@link ng.$exceptionHandler exception handling},\n{@link ng.$rootScope.Scope#$digest executing watches}.\n\n## Life cycle\n\n# Pseudo-Code of `$apply()`\n```js\n          function $apply(expr) {\n            try {\n              return $eval(expr);\n            } catch (e) {\n              $exceptionHandler(e);\n            } finally {\n              $root.$digest();\n            }\n          }\n```\n\n\nScope's `$apply()` method transitions through the following stages:\n\n1. The {@link guide/expression expression} is executed using the\n   {@link ng.$rootScope.Scope#$eval $eval()} method.\n2. Any exceptions from the execution of the expression are forwarded to the\n   {@link ng.$exceptionHandler $exceptionHandler} service.\n3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the\n   expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.",
            "params": [
                {
                    "name": "exp",
                    "description": "An angular expression to be executed.\n\n   - `string`: execute using the rules as defined in {@link guide/expression expression}.\n   - `function(scope)`: execute the function with current `scope` parameter.",
                    "type": "(string|function())="
                }
            ],
            "return": {
                "description": "The result of evaluating the expression.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15959,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$applyAsync",
            "kind": "function",
            "description": "Schedule the invocation of $apply to occur at a later time. The actual time difference\nvaries across browsers, but is typically around ~10 milliseconds.\n\nThis can be used to queue up multiple expressions which need to be evaluated in the same\ndigest.",
            "params": [
                {
                    "name": "exp",
                    "description": "An angular expression to be executed.\n\n   - `string`: execute using the rules as defined in {@link guide/expression expression}.\n   - `function(scope)`: execute the function with current `scope` parameter.",
                    "type": "(string|function())="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 15986,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$on",
            "kind": "function",
            "description": "Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for\ndiscussion of event life cycle.\n\nThe event listener function format is: `function(event, args...)`. The `event` object\npassed into the listener has the following attributes:\n\n  - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or\n    `$broadcast`-ed.\n  - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the\n    event propagates through the scope hierarchy, this property is set to null.\n  - `name` - `{string}`: name of the event.\n  - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel\n    further event propagation (available only for events that were `$emit`-ed).\n  - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag\n    to true.\n  - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.",
            "params": [
                {
                    "name": "name",
                    "description": "Event name to listen on.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "Function to call when the event is emitted.",
                    "type": "function(event, ...args)"
                }
            ],
            "return": {
                "description": "Returns a deregistration function for this listener.",
                "type": "Function()"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16039,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$emit",
            "kind": "function",
            "description": "Dispatches an event `name` upwards through the scope hierarchy notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$emit` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event traverses upwards toward the root scope and calls all\nregistered listeners along the way. The event will stop propagating if one of the listeners\ncancels it.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
            "params": [
                {
                    "name": "name",
                    "description": "Event name to emit.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Optional one or more arguments which will be passed onto the event listeners.",
                    "type": "...*"
                }
            ],
            "return": {
                "description": "Event object (see {@link ng.$rootScope.Scope#$on}).",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16112,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$broadcast",
            "kind": "function",
            "description": "Dispatches an event `name` downwards to all child scopes (and their children) notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$broadcast` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event propagates to all direct and indirect scopes of the current\nscope and calls all registered listeners along the way. The event cannot be canceled.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
            "params": [
                {
                    "name": "name",
                    "description": "Event name to broadcast.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Optional one or more arguments which will be passed onto the event listeners.",
                    "type": "...*"
                }
            ],
            "return": {
                "description": "Event object, see {@link ng.$rootScope.Scope#$on}",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16226,
            "description": "function used as an initial value for watchers.\nbecause it's unique we can easily tell it apart from other values",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16253,
            "description": "Private service to sanitize uris for links and images. Used by $compile and $sanitize.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16261,
            "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "params": [
                {
                    "name": "regexp",
                    "description": "New regexp to whitelist urls with.",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "Current RegExp if called without value or self for\n   chaining otherwise.",
                "type": "RegExp|ng.$compileProvider"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16286,
            "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "params": [
                {
                    "name": "regexp",
                    "description": "New regexp to whitelist urls with.",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "Current RegExp if called without value or self for\n   chaining otherwise.",
                "type": "RegExp|ng.$compileProvider"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16387,
            "ngdoc": "service",
            "name": "$sceDelegate",
            "kind": "function",
            "description": "`$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\nContextual Escaping (SCE)} services to AngularJS.\n\nTypically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\nthe `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is\nbecause, while the `$sce` provides numerous shorthand methods, etc., you really only need to\noverride 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\nwork because `$sce` delegates to `$sceDelegate` for these operations.\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n\nThe default instance of `$sceDelegate` should work out of the box with little pain.  While you\ncan override it completely to change the behavior of `$sce`, the common case would\ninvolve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\nyour own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as\ntemplates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist\n$sceDelegateProvider.resourceUrlWhitelist} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16414,
            "ngdoc": "provider",
            "name": "$sceDelegateProvider",
            "description": "The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n$sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure\nthat the URLs used for sourcing Angular templates are safe.  Refer {@link\nng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and\n{@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}\n\nFor the general details about this service in Angular, read the main page for {@link ng.$sce\nStrict Contextual Escaping (SCE)}.\n\n**Example**:  Consider the following case. <a name=\"example\"></a>\n\n- your app is hosted at url `http://myapp.example.com/`\n- but some of your templates are hosted on other domains you control such as\n  `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.\n- and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n\nHere is what a secure configuration for this scenario might look like:\n\n```\n angular.module('myApp', []).config(function($sceDelegateProvider) {\n   $sceDelegateProvider.resourceUrlWhitelist([\n     // Allow same origin resource loads.\n     'self',\n     // Allow loading from our assets domain.  Notice the difference between * and **.\n     'http://srv*.assets.example.com/**'\n   ]);\n\n   // The blacklist overrides the whitelist so the open redirect here is blocked.\n   $sceDelegateProvider.resourceUrlBlacklist([\n     'http://myapp.example.com/clickThru**'\n   ]);\n });\n```",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16461,
            "ngdoc": "method",
            "name": "$sceDelegateProvider#resourceUrlWhitelist",
            "kind": "function",
            "params": [
                {
                    "name": "whitelist",
                    "description": "When provided, replaces the resourceUrlWhitelist with the value\n    provided.  This must be an array or null.  A snapshot of this array is used so further\n    changes to the array are ignored.\n\n    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n    allowed in this array.\n\n    Note: **an empty whitelist array will block all URLs**!",
                    "type": "Array="
                }
            ],
            "return": {
                "description": "the currently set whitelist array.\n\nThe **default value** when no whitelist has been explicitly set is `['self']` allowing only\nsame origin resource requests.",
                "type": "Array"
            },
            "description": "Sets/Gets the whitelist of trusted resource URLs.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16490,
            "ngdoc": "method",
            "name": "$sceDelegateProvider#resourceUrlBlacklist",
            "kind": "function",
            "params": [
                {
                    "name": "blacklist",
                    "description": "When provided, replaces the resourceUrlBlacklist with the value\n    provided.  This must be an array or null.  A snapshot of this array is used so further\n    changes to the array are ignored.\n\n    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n    allowed in this array.\n\n    The typical usage for the blacklist is to **block\n    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as\n    these would otherwise be trusted but actually return content from the redirected domain.\n\n    Finally, **the blacklist overrides the whitelist** and has the final say.",
                    "type": "Array="
                }
            ],
            "return": {
                "description": "the currently set blacklist array.\n\nThe **default value** when no whitelist has been explicitly set is the empty array (i.e. there\nis no blacklist.)",
                "type": "Array"
            },
            "description": "Sets/Gets the blacklist of trusted resource URLs.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16593,
            "ngdoc": "method",
            "name": "$sceDelegate#trustAs",
            "description": "Returns an object that is trusted by angular for use in specified strict\ncontextual escaping contexts (such as ng-bind-html, ng-include, any src\nattribute interpolation, any dom event binding attribute interpolation\nsuch as for onclick,  etc.) that uses the provided value.\nSee {@link ng.$sce $sce} for enabling strict contextual escaping.",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of context in which this value is safe for use.  e.g. url,\n  resourceUrl, html, js and css.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that that should be considered trusted/safe.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "A value that can be used to stand in for the provided `value` in places\nwhere Angular expects a $sce.trustAs() return value.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16630,
            "ngdoc": "method",
            "name": "$sceDelegate#valueOf",
            "description": "If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs\n`$sceDelegate.trustAs`}, returns the value that had been passed to {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.\n\nIf the passed parameter is not a value that had been returned by {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.",
            "params": [
                {
                    "name": "value",
                    "description": "The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}\n     call or anything else.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The `value` that was originally provided to {@link ng.$sceDelegate#trustAs\n    `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns\n    `value` unchanged.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16656,
            "ngdoc": "method",
            "name": "$sceDelegate#getTrusted",
            "description": "Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and\nreturns the originally supplied value if the queried context type is a supertype of the\ncreated type.  If this condition isn't satisfied, throws an exception.",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of context in which this value is to be used.",
                    "type": "String"
                },
                {
                    "name": "maybeTrusted",
                    "description": "The result of a prior {@link ng.$sceDelegate#trustAs\n    `$sceDelegate.trustAs`} call.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The value the was originally provided to {@link ng.$sceDelegate#trustAs\n    `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16703,
            "ngdoc": "provider",
            "name": "$sceProvider",
            "description": "The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.\n-   enable/disable Strict Contextual Escaping (SCE) in a module\n-   override the default implementation with a custom delegate\n\nRead more about {@link ng.$sce Strict Contextual Escaping (SCE)}.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16717,
            "ngdoc": "service",
            "name": "$sce",
            "kind": "function",
            "description": "`$sce` is a service that provides Strict Contextual Escaping services to AngularJS.\n\n# Strict Contextual Escaping\n\nStrict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain\ncontexts to result in a value that is marked as safe to use for that context.  One example of\nsuch a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer\nto these contexts as privileged or SCE contexts.\n\nAs of version 1.2, Angular ships with SCE enabled by default.\n\nNote:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow\none to execute arbitrary javascript by the use of the expression() syntax.  Refer\n<http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.\nYou can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`\nto the top of your HTML document.\n\nSCE assists in writing code in way that (a) is secure by default and (b) makes auditing for\nsecurity vulnerabilities such as XSS, clickjacking, etc. a lot easier.\n\nHere's an example of a binding in a privileged context:\n\n```\n<input ng-model=\"userHtml\" aria-label=\"User input\">\n<div ng-bind-html=\"userHtml\"></div>\n```\n\nNotice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE\ndisabled, this application allows the user to render arbitrary HTML into the DIV.\nIn a more realistic example, one may be rendering user comments, blog articles, etc. via\nbindings.  (HTML is just one example of a context where rendering user controlled input creates\nsecurity vulnerabilities.)\n\nFor the case of HTML, you might use a library, either on the client side, or on the server side,\nto sanitize unsafe HTML before binding to the value and rendering it in the document.\n\nHow would you ensure that every place that used these types of bindings was bound to a value that\nwas sanitized by your library (or returned as safe for rendering by your server?)  How can you\nensure that you didn't accidentally delete the line that sanitized the value, or renamed some\nproperties/fields and forgot to update the binding to the sanitized value?\n\nTo be secure by default, you want to ensure that any such bindings are disallowed unless you can\ndetermine that something explicitly says it's safe to use a value for binding in that\ncontext.  You can then audit your code (a simple grep would do) to ensure that this is only done\nfor those values that you can easily tell are safe - because they were received from your server,\nsanitized by your library, etc.  You can organize your codebase to help with this - perhaps\nallowing only the files in a specific directory to do this.  Ensuring that the internal API\nexposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.\n\nIn the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}\n(and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to\nobtain values that will be accepted by SCE / privileged contexts.\n\n\n## How does it work?\n\nIn privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted\n$sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link\nng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the\n{@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.\n\nAs an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link\nng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly\nsimplified):\n\n```\nvar ngBindHtmlDirective = ['$sce', function($sce) {\n  return function(scope, element, attr) {\n    scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\n      element.html(value || '');\n    });\n  };\n}];\n```\n\n## Impact on loading templates\n\nThis applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as\n`templateUrl`'s specified by {@link guide/directive directives}.\n\nBy default, Angular only loads templates from the same domain and protocol as the application\ndocument.  This is done by calling {@link ng.$sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or\nprotocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist\nthem} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.\n\n*Please note*:\nThe browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy apply in addition to this and may further restrict whether the template is successfully\nloaded.  This means that without the right CORS policy, loading templates from a different domain\nwon't work on all browsers.  Also, loading templates from `file://` URL does not work on some\nbrowsers.\n\n## This feels like too much overhead\n\nIt's important to remember that SCE only applies to interpolation expressions.\n\nIf your expressions are constant literals, they're automatically trusted and you don't need to\ncall `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.\n`<div ng-bind-html=\"'<b>implicitly trusted</b>'\"></div>`) just works.\n\nAdditionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them\nthrough {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.\n\nThe included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load\ntemplates in `ng-include` from your application's domain without having to even know about SCE.\nIt blocks loading templates from other domains or loading templates over http from an https\nserved document.  You can change these by setting your own custom {@link\nng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.\n\nThis significantly reduces the overhead.  It is far easier to pay the small overhead and have an\napplication that's secure and can be audited to verify that with much more ease than bolting\nsecurity onto an application later.\n\n<a name=\"contexts\"></a>\n## What trusted context types are supported?\n\n| Context             | Notes          |\n|---------------------|----------------|\n| `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |\n| `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |\n| `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |\n| `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |\n| `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |\n\n## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name=\"resourceUrlPatternItem\"></a>\n\n Each element in these arrays must be one of the following:\n\n - **'self'**\n   - The special **string**, `'self'`, can be used to match against all URLs of the **same\n     domain** as the application document using the **same protocol**.\n - **String** (except the special value `'self'`)\n   - The string is matched against the full *normalized / absolute URL* of the resource\n     being tested (substring matches are not good enough.)\n   - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters\n     match themselves.\n   - `*`: matches zero or more occurrences of any character other than one of the following 6\n     characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use\n     in a whitelist.\n   - `**`: matches zero or more occurrences of *any* character.  As such, it's not\n     not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.\n     http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might\n     not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.\n     http://foo.example.com/templates/**).\n - **RegExp** (*see caveat below*)\n   - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax\n     (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to\n     accidentally introduce a bug when one updates a complex expression (imho, all regexes should\n     have good test coverage.).  For instance, the use of `.` in the regex is correct only in a\n     small number of cases.  A `.` character in the regex used when matching the scheme or a\n     subdomain could be matched against a `:` or literal `.` that was likely not intended.   It\n     is highly recommended to use the string patterns and only fall back to regular expressions\n     if they as a last resort.\n   - The regular expression must be an instance of RegExp (i.e. not a string.)  It is\n     matched against the **entire** *normalized / absolute URL* of the resource being tested\n     (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags\n     present on the RegExp (such as multiline, global, ignoreCase) are ignored.\n   - If you are generating your JavaScript from some other templating engine (not\n     recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),\n     remember to escape your regular expression (and be aware that you might need more than\n     one level of escaping depending on your templating engine and the way you interpolated\n     the value.)  Do make use of your platform's escaping mechanism as it might be good\n     enough before coding your own.  e.g. Ruby has\n     [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)\n     and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).\n     Javascript lacks a similar built in function for escaping.  Take a look at Google\n     Closure library's [goog.string.regExpEscape(s)](\n     http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.\n\n## Show me an example using SCE.\n\n<example module=\"mySceApp\" deps=\"angular-sanitize.js\">\n<file name=\"index.html\">\n  <div ng-controller=\"AppController as myCtrl\">\n    <i ng-bind-html=\"myCtrl.explicitlyTrustedHtml\" id=\"explicitlyTrustedHtml\"></i><br><br>\n    <b>User comments</b><br>\n    By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when\n    $sanitize is available.  If $sanitize isn't available, this results in an error instead of an\n    exploit.\n    <div class=\"well\">\n      <div ng-repeat=\"userComment in myCtrl.userComments\">\n        <b>{{userComment.name}}</b>:\n        <span ng-bind-html=\"userComment.htmlComment\" class=\"htmlComment\"></span>\n        <br>\n      </div>\n    </div>\n  </div>\n</file>\n\n<file name=\"script.js\">\n  angular.module('mySceApp', ['ngSanitize'])\n    .controller('AppController', ['$http', '$templateCache', '$sce',\n      function($http, $templateCache, $sce) {\n        var self = this;\n        $http.get(\"test_data.json\", {cache: $templateCache}).success(function(userComments) {\n          self.userComments = userComments;\n        });\n        self.explicitlyTrustedHtml = $sce.trustAsHtml(\n            '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n            'sanitization.&quot;\">Hover over this text.</span>');\n      }]);\n</file>\n\n<file name=\"test_data.json\">\n[\n  { \"name\": \"Alice\",\n    \"htmlComment\":\n        \"<span onmouseover='this.textContent=\\\"PWN3D!\\\"'>Is <i>anyone</i> reading this?</span>\"\n  },\n  { \"name\": \"Bob\",\n    \"htmlComment\": \"<i>Yes!</i>  Am I the only other one?\"\n  }\n]\n</file>\n\n<file name=\"protractor.js\" type=\"protractor\">\n  describe('SCE doc demo', function() {\n    it('should sanitize untrusted values', function() {\n      expect(element.all(by.css('.htmlComment')).first().getInnerHtml())\n          .toBe('<span>Is <i>anyone</i> reading this?</span>');\n    });\n\n    it('should NOT sanitize explicitly trusted values', function() {\n      expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(\n          '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n          'sanitization.&quot;\">Hover over this text.</span>');\n    });\n  });\n</file>\n</example>\n\n\n\n## Can I disable SCE completely?\n\nYes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits\nfor little coding overhead.  It will be much harder to take an SCE disabled application and\neither secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE\nfor cases where you have a lot of existing code that was written before SCE was introduced and\nyou're migrating them a module at a time.\n\nThat said, here's how you can completely disable SCE:\n\n```\nangular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {\n  // Completely disable SCE.  For demonstration purposes only!\n  // Do not use in new projects.\n  $sceProvider.enabled(false);\n});\n```",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 16987,
            "ngdoc": "method",
            "name": "$sceProvider#enabled",
            "kind": "function",
            "params": [
                {
                    "name": "value",
                    "description": "If provided, then enables/disables SCE.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "true if SCE is enabled, false otherwise.",
                "type": "Boolean"
            },
            "description": "Enables/disables SCE and returns the current value.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17065,
            "ngdoc": "method",
            "name": "$sce#isEnabled",
            "kind": "function",
            "return": {
                "description": "true if SCE is enabled, false otherwise.  If you want to set the value, you\nhave to do it at module config time on {@link ng.$sceProvider $sceProvider}.",
                "type": "Boolean"
            },
            "description": "Returns a boolean indicating if SCE is enabled.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17088,
            "ngdoc": "method",
            "name": "$sce#parseAs",
            "description": "Converts Angular {@link guide/expression expression} into a function.  This is like {@link\nng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it\nwraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,\n*result*)}",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of SCE context in which this result will be used.",
                    "type": "String"
                },
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17118,
            "ngdoc": "method",
            "name": "$sce#trustAs",
            "description": "Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,\nreturns an object that is trusted by angular for use in specified strict contextual\nescaping contexts (such as ng-bind-html, ng-include, any src attribute\ninterpolation, any dom event binding attribute interpolation such as for onclick,  etc.)\nthat uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual\nescaping.",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of context in which this value is safe for use.  e.g. url,\n  resourceUrl, html, js and css.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that that should be considered trusted/safe.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "A value that can be used to stand in for the provided `value` in places\nwhere Angular expects a $sce.trustAs() return value.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17137,
            "ngdoc": "method",
            "name": "$sce#trustAsHtml",
            "description": "Shorthand method.  `$sce.trustAsHtml(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to trustAs.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "An object that can be passed to {@link ng.$sce#getTrustedHtml\n    $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives\n    only accept expressions that are either literal constants or are the\n    return value of {@link ng.$sce#trustAs $sce.trustAs}.)",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17152,
            "ngdoc": "method",
            "name": "$sce#trustAsUrl",
            "description": "Shorthand method.  `$sce.trustAsUrl(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to trustAs.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "An object that can be passed to {@link ng.$sce#getTrustedUrl\n    $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives\n    only accept expressions that are either literal constants or are the\n    return value of {@link ng.$sce#trustAs $sce.trustAs}.)",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17167,
            "ngdoc": "method",
            "name": "$sce#trustAsResourceUrl",
            "description": "Shorthand method.  `$sce.trustAsResourceUrl(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to trustAs.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "An object that can be passed to {@link ng.$sce#getTrustedResourceUrl\n    $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives\n    only accept expressions that are either literal constants or are the return\n    value of {@link ng.$sce#trustAs $sce.trustAs}.)",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17182,
            "ngdoc": "method",
            "name": "$sce#trustAsJs",
            "description": "Shorthand method.  `$sce.trustAsJs(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to trustAs.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "An object that can be passed to {@link ng.$sce#getTrustedJs\n    $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives\n    only accept expressions that are either literal constants or are the\n    return value of {@link ng.$sce#trustAs $sce.trustAs}.)",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17197,
            "ngdoc": "method",
            "name": "$sce#getTrusted",
            "description": "Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,\ntakes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the\noriginally supplied value if the queried context type is a supertype of the created type.\nIf this condition isn't satisfied, throws an exception.",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of context in which this value is to be used.",
                    "type": "String"
                },
                {
                    "name": "maybeTrusted",
                    "description": "The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}\n                        call.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The value the was originally provided to\n             {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.\n             Otherwise, throws an exception.",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17215,
            "ngdoc": "method",
            "name": "$sce#getTrustedHtml",
            "description": "Shorthand method.  `$sce.getTrustedHtml(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sce.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.HTML, value)`",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17227,
            "ngdoc": "method",
            "name": "$sce#getTrustedCss",
            "description": "Shorthand method.  `$sce.getTrustedCss(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sce.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.CSS, value)`",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17239,
            "ngdoc": "method",
            "name": "$sce#getTrustedUrl",
            "description": "Shorthand method.  `$sce.getTrustedUrl(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sce.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.URL, value)`",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17251,
            "ngdoc": "method",
            "name": "$sce#getTrustedResourceUrl",
            "description": "Shorthand method.  `$sce.getTrustedResourceUrl(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sceDelegate.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17263,
            "ngdoc": "method",
            "name": "$sce#getTrustedJs",
            "description": "Shorthand method.  `$sce.getTrustedJs(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sce.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.JS, value)`",
                "type": "*"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17275,
            "ngdoc": "method",
            "name": "$sce#parseAsHtml",
            "description": "Shorthand method.  `$sce.parseAsHtml(expression string)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17292,
            "ngdoc": "method",
            "name": "$sce#parseAsCss",
            "description": "Shorthand method.  `$sce.parseAsCss(value)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17309,
            "ngdoc": "method",
            "name": "$sce#parseAsUrl",
            "description": "Shorthand method.  `$sce.parseAsUrl(value)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17326,
            "ngdoc": "method",
            "name": "$sce#parseAsResourceUrl",
            "description": "Shorthand method.  `$sce.parseAsResourceUrl(value)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17343,
            "ngdoc": "method",
            "name": "$sce#parseAsJs",
            "description": "Shorthand method.  `$sce.parseAsJs(value)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17382,
            "description": "This is very simple implementation of testing browser's features.",
            "name": "{boolean} animations Does the browser support CSS animation events ?",
            "requires": [
                "$window",
                "$document"
            ],
            "itemtype": "property",
            "type": "Boolean",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17471,
            "ngdoc": "service",
            "name": "totalPendingRequests total amount of pending template requests being downloaded.",
            "description": "The `$templateRequest` service runs security checks then downloads the provided template using\n`$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request\nfails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the\nexception can be thwarted by setting the 2nd parameter of the function to true). Note that the\ncontents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted\nwhen `tpl` is of type string and `$templateCache` has the matching entry.",
            "return": {
                "description": "a promise for the HTTP response data of the given URL.",
                "type": "Promise"
            },
            "itemtype": "property",
            "type": "Number",
            "class": "$modelFactory",
            "module": "ng",
            "subprops": [
                {
                    "name": "tpl",
                    "description": "The HTTP request template URL",
                    "type": "String|TrustedResourceUrl"
                },
                {
                    "name": "ignoreRequestError",
                    "description": "Whether or not to ignore the exception when the request fails or the template is empty",
                    "type": "Boolean="
                }
            ]
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17547,
            "name": "$testability",
            "description": "The private $$testability service provides a collection of methods for use when debugging\nor by automated test and debugging tools.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17556,
            "name": "$$testability#findBindings",
            "description": "Returns an array of elements that are bound (via ng-bind or {{}})\nto expressions matching the input.",
            "params": [
                {
                    "name": "element",
                    "description": "The element root to search from.",
                    "type": "Element"
                },
                {
                    "name": "expression",
                    "description": "The binding expression to match.",
                    "type": "String"
                },
                {
                    "name": "opt_exactMatch",
                    "description": "If true, only returns exact matches\n    for the expression. Filters and whitespace are ignored.",
                    "type": "Boolean"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17591,
            "name": "$$testability#findModels",
            "description": "Returns an array of elements that are two-way found via ng-model to\nexpressions matching the input.",
            "params": [
                {
                    "name": "element",
                    "description": "The element root to search from.",
                    "type": "Element"
                },
                {
                    "name": "expression",
                    "description": "The model expression to match.",
                    "type": "String"
                },
                {
                    "name": "opt_exactMatch",
                    "description": "If true, only returns exact matches\n    for the expression.",
                    "type": "Boolean"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17615,
            "name": "$$testability#getLocation",
            "description": "Shortcut for getting the location in a browser agnostic way. Returns\n    the path, search, and hash. (e.g. /path?a=b#hash)",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17626,
            "name": "$$testability#setLocation",
            "description": "Shortcut for navigating to a location without doing a full page reload.",
            "params": [
                {
                    "name": "url",
                    "description": "The location url (path, search and hash,\n    e.g. /path?a=b#hash) to go to.",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17642,
            "name": "$$testability#whenStable",
            "description": "Calls the callback when $timeout and $http requests are completed.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17665,
            "ngdoc": "service",
            "name": "$timeout",
            "description": "Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\nblock and delegates any exceptions to\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\nThe return value of calling `$timeout` is a promise, which will be resolved when\nthe delay has passed and the timeout function, if provided, is executed.\n\nTo cancel a timeout request, call `$timeout.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\nsynchronously flush the queue of deferred functions.\n\nIf you only want a promise that will be resolved after some specified delay\nthen you can call `$timeout` without the `fn` function.",
            "params": [
                {
                    "name": "fn",
                    "description": "A function, whose execution should be delayed.",
                    "type": "Function()="
                },
                {
                    "name": "delay",
                    "description": "Delay in milliseconds.",
                    "type": "Number=",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "invokeApply",
                    "description": "If set to `false` skips model dirty checking, otherwise\n  will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "Pass",
                    "description": "additional parameters to the executed function.",
                    "type": "...*="
                }
            ],
            "return": {
                "description": "Promise that will be resolved when the timeout is reached. The value this\n  promise will be resolved with is the return value of the `fn` function.",
                "type": "Promise"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17728,
            "ngdoc": "method",
            "name": "$timeout#cancel",
            "description": "Cancels a task associated with the `promise`. As a result of this, the promise will be\nresolved with a rejection.",
            "params": [
                {
                    "name": "promise",
                    "description": "Promise returned by the `$timeout` function.",
                    "type": "Promise="
                }
            ],
            "return": {
                "description": "Returns `true` if the task hasn't executed yet and was successfully\n  canceled.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17764,
            "description": "Normalizes and parses a URL.",
            "kind": "function",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to be parsed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the normalized URL as a dictionary.\n  | member name   | Description    |\n   |---------------|----------------|\n   | href          | A normalized version of the provided URL if it was not an absolute URL |\n   | protocol      | The protocol including the trailing colon                              |\n   | host          | The host and port (if the port is non-default) of the normalizedUrl    |\n   | search        | The search params, minus the question mark                             |\n   | hash          | The hash string, minus the hash symbol\n   | hostname      | The hostname\n   | port          | The port, without \":\"\n   | pathname      | The pathname, beginning with \"/\"",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17843,
            "description": "Parse a request URL and determine whether this is a same-origin request as the application document.",
            "params": [
                {
                    "name": "requestUrl",
                    "description": "The url of the request as a string that will be resolved\nor a parsed URL object.",
                    "type": "String|object"
                }
            ],
            "return": {
                "description": "Whether the request is for the same origin as the application document.",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17856,
            "ngdoc": "service",
            "name": "$window",
            "description": "A reference to the browser's `window` object. While `window`\nis globally available in JavaScript, it causes testability problems, because\nit is a global variable. In angular we always refer to it through the\n`$window` service, so it may be overridden, removed or mocked for testing.\n\nExpressions, like the one defined for the `ngClick` directive in the example\nbelow, are evaluated with respect to the current scope.  Therefore, there is\nno risk of inadvertently coding in a dependency on a global value in such an\nexpression.",
            "example": [
                "\n  <example module=\"windowExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('windowExample', [])\n          .controller('ExampleController', ['$scope', '$window', function($scope, $window) {\n            $scope.greeting = 'Hello, World!';\n            $scope.doGreeting = function(greeting) {\n              $window.alert(greeting);\n            };\n          }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n        <input type=\"text\" ng-model=\"greeting\" aria-label=\"greeting\" />\n        <button ng-click=\"doGreeting(greeting)\">ALERT</button>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n     it('should display the greeting in the input box', function() {\n      element(by.model('greeting')).sendKeys('Hello, E2E Tests');\n      // If we click the button it will block the test runner\n      // element(':button').click();\n     });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17901,
            "name": "$$cookieReader",
            "requires": [
                "$document"
            ],
            "description": "This is a private service for reading cookies used by $http and ngCookies",
            "return": {
                "description": "a key/value map of the current cookies",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 17967,
            "ngdoc": "provider",
            "name": "$filterProvider",
            "description": "Filters are just functions which transform input to an output. However filters need to be\nDependency Injected. To achieve this a filter definition consists of a factory function which is\nannotated with dependencies and is responsible for creating a filter function.\n\n<div class=\"alert alert-warning\">\n**Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\nNames with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\nyour filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n(`myapp_subsection_filterx`).\n</div>\n\n```js\n  // Filter registration\n  function MyModule($provide, $filterProvider) {\n    // create a service to demonstrate injection (not always needed)\n    $provide.value('greet', function(name){\n      return 'Hello ' + name + '!';\n    });\n\n    // register a filter factory which uses the\n    // greet service to demonstrate DI.\n    $filterProvider.register('greet', function(greet){\n      // return the filter function which uses the greet service\n      // to generate salutation\n      return function(text) {\n        // filters need to be forgiving so check input validity\n        return text && greet(text) || text;\n      };\n    });\n  }\n```\n\nThe filter function is registered with the `$injector` under the filter name suffix with\n`Filter`.\n\n```js\n  it('should be the same instance', inject(\n    function($filterProvider) {\n      $filterProvider.register('reverse', function(){\n        return ...;\n      });\n    },\n    function($filter, reverseFilter) {\n      expect($filter('reverse')).toBe(reverseFilter);\n    });\n```\n\n\nFor more information about how angular filters work, and how to create your own filters, see\n{@link guide/filter Filters} in the Angular Developer Guide.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18024,
            "ngdoc": "service",
            "name": "$filter",
            "kind": "function",
            "description": "Filters are used for formatting data displayed to the user.\n\nThe general syntax in templates is as follows:\n\n        {{ expression [| filter_name[:parameter_value] ... ] }}",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the filter function to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the filter function",
                "type": "Function"
            },
            "example": [
                "\n  <example name=\"$filter\" module=\"filterExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"MainCtrl\">\n       <h3>{{ originalText }}</h3>\n       <h3>{{ filteredText }}</h3>\n      </div>\n    </file>\n\n    <file name=\"script.js\">\n     angular.module('filterExample', [])\n     .controller('MainCtrl', function($scope, $filter) {\n       $scope.originalText = 'hello';\n       $scope.filteredText = $filter('uppercase')($scope.originalText);\n     });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18059,
            "ngdoc": "method",
            "name": "$filterProvider#register",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the filter function, or an object map of filters where\n   the keys are the filter names and the values are the filter factories.\n\n   <div class=\"alert alert-warning\">\n   **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n   Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\n   your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n   (`myapp_subsection_filterx`).\n   </div>",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "Registered filter instance, or if a map of filters was provided then a map\n   of the registered filter instances.",
                "type": "Object"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18118,
            "ngdoc": "filter",
            "name": "filter",
            "kind": "function",
            "description": "Selects a subset of items from `array` and returns it as a new array.",
            "params": [
                {
                    "name": "array",
                    "description": "The source array.",
                    "type": "Array"
                },
                {
                    "name": "expression",
                    "description": "The predicate to be used for selecting items from\n  `array`.\n\n  Can be one of:\n\n  - `string`: The string is used for matching against the contents of the `array`. All strings or\n    objects with string properties in `array` that match this string will be returned. This also\n    applies to nested object properties.\n    The predicate can be negated by prefixing the string with `!`.\n\n  - `Object`: A pattern object can be used to filter specific properties on objects contained\n    by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\n    which have property `name` containing \"M\" and property `phone` containing \"1\". A special\n    property name `$` can be used (as in `{$:\"text\"}`) to accept a match against any\n    property of the object or its nested object properties. That's equivalent to the simple\n    substring match with a `string` as described above. The predicate can be negated by prefixing\n    the string with `!`.\n    For example `{name: \"!M\"}` predicate will return an array of items which have property `name`\n    not containing \"M\".\n\n    Note that a named property will match properties on the same level only, while the special\n    `$` property will match properties on the same level or deeper. E.g. an array item like\n    `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but\n    **will** be matched by `{$: 'John'}`.\n\n  - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.\n    The function is called for each element of the array, with the element, its index, and\n    the entire array itself as arguments.\n\n    The final result is an array of those elements that the predicate returned true for.",
                    "type": "String|Object|function()"
                },
                {
                    "name": "comparator",
                    "description": "Comparator which is used in\n    determining if the expected value (from the filter expression) and actual value (from\n    the object in the array) should be considered a match.\n\n  Can be one of:\n\n  - `function(actual, expected)`:\n    The function will be given the object value and the predicate value to compare and\n    should return true if both values should be considered equal.\n\n  - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.\n    This is essentially strict comparison of expected and actual.\n\n  - `false|undefined`: A short hand for a function which will look for a substring match in case\n    insensitive way.\n\n    Primitive values are converted to strings. Objects are not compared against primitives,\n    unless they have a custom `toString` method (e.g. `Date` objects).",
                    "type": "Function(actual, expected)|true|undefined"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n                               {name:'Mary', phone:'800-BIG-MARY'},\n                               {name:'Mike', phone:'555-4321'},\n                               {name:'Adam', phone:'555-5678'},\n                               {name:'Julie', phone:'555-8765'},\n                               {name:'Juliette', phone:'555-5678'}]\"></div>\n\n      <label>Search: <input ng-model=\"searchText\"></label>\n      <table id=\"searchTextResults\">\n        <tr><th>Name</th><th>Phone</th></tr>\n        <tr ng-repeat=\"friend in friends | filter:searchText\">\n          <td>{{friend.name}}</td>\n          <td>{{friend.phone}}</td>\n        </tr>\n      </table>\n      <hr>\n      <label>Any: <input ng-model=\"search.$\"></label> <br>\n      <label>Name only <input ng-model=\"search.name\"></label><br>\n      <label>Phone only <input ng-model=\"search.phone\"></label><br>\n      <label>Equality <input type=\"checkbox\" ng-model=\"strict\"></label><br>\n      <table id=\"searchObjResults\">\n        <tr><th>Name</th><th>Phone</th></tr>\n        <tr ng-repeat=\"friendObj in friends | filter:search:strict\">\n          <td>{{friendObj.name}}</td>\n          <td>{{friendObj.phone}}</td>\n        </tr>\n      </table>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var expectFriendNames = function(expectedNames, key) {\n        element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {\n          arr.forEach(function(wd, i) {\n            expect(wd.getText()).toMatch(expectedNames[i]);\n          });\n        });\n      };\n\n      it('should search across all fields when filtering with a string', function() {\n        var searchText = element(by.model('searchText'));\n        searchText.clear();\n        searchText.sendKeys('m');\n        expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');\n\n        searchText.clear();\n        searchText.sendKeys('76');\n        expectFriendNames(['John', 'Julie'], 'friend');\n      });\n\n      it('should search in specific fields when filtering with a predicate object', function() {\n        var searchAny = element(by.model('search.$'));\n        searchAny.clear();\n        searchAny.sendKeys('i');\n        expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');\n      });\n      it('should use a equal comparison when comparator is true', function() {\n        var searchName = element(by.model('search.name'));\n        var strict = element(by.model('strict'));\n        searchName.clear();\n        searchName.sendKeys('Julie');\n        strict.click();\n        expectFriendNames(['Julie'], 'friendObj');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18373,
            "ngdoc": "filter",
            "name": "currency",
            "kind": "function",
            "description": "Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\nsymbol for current locale is used.",
            "params": [
                {
                    "name": "amount",
                    "description": "Input to filter.",
                    "type": "Number"
                },
                {
                    "name": "symbol",
                    "description": "Currency symbol or identifier to be displayed.",
                    "type": "String="
                },
                {
                    "name": "fractionSize",
                    "description": "Number of decimal places to round the amount to, defaults to default max fraction size for current locale",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "Formatted number.",
                "type": "String"
            },
            "example": [
                "\n  <example module=\"currencyExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('currencyExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.amount = 1234.56;\n          }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n        <input type=\"number\" ng-model=\"amount\" aria-label=\"amount\"> <br>\n        default currency symbol ($): <span id=\"currency-default\">{{amount | currency}}</span><br>\n        custom currency identifier (USD$): <span id=\"currency-custom\">{{amount | currency:\"USD$\"}}</span>\n        no fractions (0): <span id=\"currency-no-fractions\">{{amount | currency:\"USD$\":0}}</span>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should init with 1234.56', function() {\n        expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');\n        expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');\n        expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');\n      });\n      it('should update', function() {\n        if (browser.params.browser == 'safari') {\n          // Safari does not understand the minus key. See\n          // https://github.com/angular/protractor/issues/481\n          return;\n        }\n        element(by.model('amount')).clear();\n        element(by.model('amount')).sendKeys('-1234');\n        expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');\n        expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');\n        expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18445,
            "ngdoc": "filter",
            "name": "number",
            "kind": "function",
            "description": "Formats a number as text.\n\nIf the input is null or undefined, it will just be returned.\nIf the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.\nIf the input is not a number an empty string is returned.",
            "params": [
                {
                    "name": "number",
                    "description": "Number to format.",
                    "type": "Number|string"
                },
                {
                    "name": "fractionSize",
                    "description": "Number of decimal places to round the number to.\nIf this is not provided then the fraction size is computed from the current locale's number\nformatting pattern. In the case of the default locale, it will be 3.",
                    "type": "(number|string)="
                }
            ],
            "return": {
                "description": "Number rounded to decimalPlaces and places a “,” after each third digit.",
                "type": "String"
            },
            "example": [
                "\n  <example module=\"numberFilterExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('numberFilterExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.val = 1234.56789;\n          }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n        <label>Enter number: <input ng-model='val'></label><br>\n        Default formatting: <span id='number-default'>{{val | number}}</span><br>\n        No fractions: <span>{{val | number:0}}</span><br>\n        Negative number: <span>{{-val | number:4}}</span>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should format numbers', function() {\n        expect(element(by.id('number-default')).getText()).toBe('1,234.568');\n        expect(element(by.binding('val | number:0')).getText()).toBe('1,235');\n        expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');\n      });\n\n      it('should update', function() {\n        element(by.model('val')).clear();\n        element(by.model('val')).sendKeys('3374.333');\n        expect(element(by.id('number-default')).getText()).toBe('3,374.333');\n        expect(element(by.binding('val | number:0')).getText()).toBe('3,374');\n        expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');\n     });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18720,
            "ngdoc": "filter",
            "name": "date",
            "kind": "function",
            "description": "Formats `date` to a string based on the requested `format`.\n\n  `format` string can be composed of the following elements:\n\n  * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n  * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n  * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n  * `'MMMM'`: Month in year (January-December)\n  * `'MMM'`: Month in year (Jan-Dec)\n  * `'MM'`: Month in year, padded (01-12)\n  * `'M'`: Month in year (1-12)\n  * `'dd'`: Day in month, padded (01-31)\n  * `'d'`: Day in month (1-31)\n  * `'EEEE'`: Day in Week,(Sunday-Saturday)\n  * `'EEE'`: Day in Week, (Sun-Sat)\n  * `'HH'`: Hour in day, padded (00-23)\n  * `'H'`: Hour in day (0-23)\n  * `'hh'`: Hour in AM/PM, padded (01-12)\n  * `'h'`: Hour in AM/PM, (1-12)\n  * `'mm'`: Minute in hour, padded (00-59)\n  * `'m'`: Minute in hour (0-59)\n  * `'ss'`: Second in minute, padded (00-59)\n  * `'s'`: Second in minute (0-59)\n  * `'sss'`: Millisecond in second, padded (000-999)\n  * `'a'`: AM/PM marker\n  * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n  * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year\n  * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year\n  * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')\n  * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')\n\n  `format` string can also be one of the following predefined\n  {@link guide/i18n localizable formats}:\n\n  * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n    (e.g. Sep 3, 2010 12:05:08 PM)\n  * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)\n  * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale\n    (e.g. Friday, September 3, 2010)\n  * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)\n  * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n  * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n  * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)\n  * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)\n\n  `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.\n  `\"h 'in the morning'\"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence\n  (e.g. `\"h 'o''clock'\"`).",
            "params": [
                {
                    "name": "date",
                    "description": "Date to format either as Date object, milliseconds (string or\n   number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its\n   shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is\n   specified in the string input, the time is considered to be in the local timezone.",
                    "type": "(Date|number|string)"
                },
                {
                    "name": "format",
                    "description": "Formatting rules (see Description). If not specified,\n   `mediumDate` is used.",
                    "type": "String="
                },
                {
                    "name": "timezone",
                    "description": "Timezone to be used for formatting. It understands UTC/GMT and the\n   continental US time zone abbreviations, but for general use, use a time zone offset, for\n   example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)\n   If not specified, the timezone of the browser will be used.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "Formatted string or the input if input is not recognized as date/millis.",
                "type": "String"
            },
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:\n          <span>{{1288323623006 | date:'medium'}}</span><br>\n      <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:\n         <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>\n      <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:\n         <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>\n      <span ng-non-bindable>{{1288323623006 | date:\"MM/dd/yyyy 'at' h:mma\"}}</span>:\n         <span>{{'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"}}</span><br>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should format date', function() {\n        expect(element(by.binding(\"1288323623006 | date:'medium'\")).getText()).\n           toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);\n        expect(element(by.binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).getText()).\n           toMatch(/2010\\-10\\-2\\d \\d{2}:\\d{2}:\\d{2} (\\-|\\+)?\\d{4}/);\n        expect(element(by.binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).getText()).\n           toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);\n        expect(element(by.binding(\"'1288323623006' | date:\\\"MM/dd/yyyy 'at' h:mma\\\"\")).getText()).\n           toMatch(/10\\/2\\d\\/2010 at \\d{1,2}:\\d{2}(AM|PM)/);\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18890,
            "ngdoc": "filter",
            "name": "json",
            "kind": "function",
            "description": "Allows you to convert a JavaScript object into JSON string.\n\n  This filter is mostly useful for debugging. When using the double curly {{value}} notation\n  the binding is automatically converted to JSON.",
            "params": [
                {
                    "name": "object",
                    "description": "Any JavaScript object (including arrays and primitive types) to filter.",
                    "type": "*"
                },
                {
                    "name": "spacing",
                    "description": "The number of spaces to use per indentation, defaults to 2.",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "JSON string.",
                "type": "String"
            },
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <pre id=\"default-spacing\">{{ {'name':'value'} | json }}</pre>\n      <pre id=\"custom-spacing\">{{ {'name':'value'} | json:4 }}</pre>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should jsonify filtered objects', function() {\n        expect(element(by.id('default-spacing')).getText()).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);\n        expect(element(by.id('custom-spacing')).getText()).toMatch(/\\{\\n    \"name\": ?\"value\"\\n}/);\n      });\n    </file>\n  </example>\n"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18931,
            "ngdoc": "filter",
            "name": "lowercase",
            "kind": "function",
            "description": "Converts string to lowercase.",
            "see": [
                "angular.lowercase"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18942,
            "ngdoc": "filter",
            "name": "uppercase",
            "kind": "function",
            "description": "Converts string to uppercase.",
            "see": [
                "angular.uppercase"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 18952,
            "ngdoc": "filter",
            "name": "limitTo",
            "kind": "function",
            "description": "Creates a new array or string containing only a specified number of elements. The elements\nare taken from either the beginning or the end of the source array, string or number, as specified by\nthe value and sign (positive or negative) of `limit`. If a number is used as input, it is\nconverted to a string.",
            "params": [
                {
                    "name": "input",
                    "description": "Source array, string or number to be limited.",
                    "type": "Array|string|number"
                },
                {
                    "name": "limit",
                    "description": "The length of the returned array or string. If the `limit` number\n    is positive, `limit` number of items from the beginning of the source array/string are copied.\n    If the number is negative, `limit` number  of items from the end of the source array/string\n    are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,\n    the input will be returned unchanged.",
                    "type": "String|number"
                },
                {
                    "name": "begin",
                    "description": "Index at which to begin limitation. As a negative index, `begin`\n    indicates an offset from the end of `input`. Defaults to `0`.",
                    "type": "(string|number)="
                }
            ],
            "return": {
                "description": "A new sub-array or substring of length `limit` or less if input array\n    had less than `limit` elements.",
                "type": "Array|string"
            },
            "example": [
                "\n  <example module=\"limitToExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('limitToExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.numbers = [1,2,3,4,5,6,7,8,9];\n            $scope.letters = \"abcdefghi\";\n            $scope.longNumber = 2345432342;\n            $scope.numLimit = 3;\n            $scope.letterLimit = 3;\n            $scope.longNumberLimit = 3;\n          }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n        <label>\n           Limit {{numbers}} to:\n           <input type=\"number\" step=\"1\" ng-model=\"numLimit\">\n        </label>\n        <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>\n        <label>\n           Limit {{letters}} to:\n           <input type=\"number\" step=\"1\" ng-model=\"letterLimit\">\n        </label>\n        <p>Output letters: {{ letters | limitTo:letterLimit }}</p>\n        <label>\n           Limit {{longNumber}} to:\n           <input type=\"number\" step=\"1\" ng-model=\"longNumberLimit\">\n        </label>\n        <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var numLimitInput = element(by.model('numLimit'));\n      var letterLimitInput = element(by.model('letterLimit'));\n      var longNumberLimitInput = element(by.model('longNumberLimit'));\n      var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));\n      var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));\n      var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));\n\n      it('should limit the number array to first three items', function() {\n        expect(numLimitInput.getAttribute('value')).toBe('3');\n        expect(letterLimitInput.getAttribute('value')).toBe('3');\n        expect(longNumberLimitInput.getAttribute('value')).toBe('3');\n        expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');\n        expect(limitedLetters.getText()).toEqual('Output letters: abc');\n        expect(limitedLongNumber.getText()).toEqual('Output long number: 234');\n      });\n\n      // There is a bug in safari and protractor that doesn't like the minus key\n      // it('should update the output when -3 is entered', function() {\n      //   numLimitInput.clear();\n      //   numLimitInput.sendKeys('-3');\n      //   letterLimitInput.clear();\n      //   letterLimitInput.sendKeys('-3');\n      //   longNumberLimitInput.clear();\n      //   longNumberLimitInput.sendKeys('-3');\n      //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');\n      //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');\n      //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');\n      // });\n\n      it('should not exceed the maximum size of input array', function() {\n        numLimitInput.clear();\n        numLimitInput.sendKeys('100');\n        letterLimitInput.clear();\n        letterLimitInput.sendKeys('100');\n        longNumberLimitInput.clear();\n        longNumberLimitInput.sendKeys('100');\n        expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');\n        expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');\n        expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19077,
            "ngdoc": "filter",
            "name": "orderBy",
            "kind": "function",
            "description": "Orders a specified `array` by the `expression` predicate. It is ordered alphabetically\nfor strings and numerically for numbers. Note: if you notice numbers are not being sorted\nas expected, make sure they are actually being saved as numbers and not strings.",
            "params": [
                {
                    "name": "array",
                    "description": "The array to sort.",
                    "type": "Array"
                },
                {
                    "name": "expression",
                    "description": "A predicate to be\n   used by the comparator to determine the order of elements.\n\n   Can be one of:\n\n   - `function`: Getter function. The result of this function will be sorted using the\n     `<`, `===`, `>` operator.\n   - `string`: An Angular expression. The result of this expression is used to compare elements\n     (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by\n     3 first characters of a property called `name`). The result of a constant expression\n     is interpreted as a property name to be used in comparisons (for example `\"special name\"`\n     to sort object by the value of their `special name` property). An expression can be\n     optionally prefixed with `+` or `-` to control ascending or descending sort order\n     (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array\n     element itself is used to compare where sorting.\n   - `Array`: An array of function or string predicates. The first predicate in the array\n     is used for sorting, but when two items are equivalent, the next predicate is used.\n\n   If the predicate is missing or empty then it defaults to `'+'`.",
                    "type": "function(*)|string|Array.<(function(*)|string)>="
                },
                {
                    "name": "reverse",
                    "description": "Reverse the order of the array.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "Sorted copy of the source array.",
                "type": "Array"
            },
            "example": [
                "\nThe example below demonstrates a simple ngRepeat, where the data is sorted\nby age in descending order (predicate is set to `'-age'`).\n`reverse` is not set, which means it defaults to `false`.\n  <example module=\"orderByExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('orderByExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.friends =\n                [{name:'John', phone:'555-1212', age:10},\n                 {name:'Mary', phone:'555-9876', age:19},\n                 {name:'Mike', phone:'555-4321', age:21},\n                 {name:'Adam', phone:'555-5678', age:35},\n                 {name:'Julie', phone:'555-8765', age:29}];\n          }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n        <table class=\"friend\">\n          <tr>\n            <th>Name</th>\n            <th>Phone Number</th>\n            <th>Age</th>\n          </tr>\n          <tr ng-repeat=\"friend in friends | orderBy:'-age'\">\n            <td>{{friend.name}}</td>\n            <td>{{friend.phone}}</td>\n            <td>{{friend.age}}</td>\n          </tr>\n        </table>\n      </div>\n    </file>\n  </example>\n\nThe predicate and reverse parameters can be controlled dynamically through scope properties,\nas shown in the next example.",
                "\n  <example module=\"orderByExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('orderByExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.friends =\n                [{name:'John', phone:'555-1212', age:10},\n                 {name:'Mary', phone:'555-9876', age:19},\n                 {name:'Mike', phone:'555-4321', age:21},\n                 {name:'Adam', phone:'555-5678', age:35},\n                 {name:'Julie', phone:'555-8765', age:29}];\n            $scope.predicate = 'age';\n            $scope.reverse = true;\n            $scope.order = function(predicate) {\n              $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;\n              $scope.predicate = predicate;\n            };\n          }]);\n      </script>\n      <style type=\"text/css\">\n        .sortorder:after {\n          content: '\\25b2';\n        }\n        .sortorder.reverse:after {\n          content: '\\25bc';\n        }\n      </style>\n      <div ng-controller=\"ExampleController\">\n        <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>\n        <hr/>\n        [ <a href=\"\" ng-click=\"predicate=''\">unsorted</a> ]\n        <table class=\"friend\">\n          <tr>\n            <th>\n              <a href=\"\" ng-click=\"order('name')\">Name</a>\n              <span class=\"sortorder\" ng-show=\"predicate === 'name'\" ng-class=\"{reverse:reverse}\"></span>\n            </th>\n            <th>\n              <a href=\"\" ng-click=\"order('phone')\">Phone Number</a>\n              <span class=\"sortorder\" ng-show=\"predicate === 'phone'\" ng-class=\"{reverse:reverse}\"></span>\n            </th>\n            <th>\n              <a href=\"\" ng-click=\"order('age')\">Age</a>\n              <span class=\"sortorder\" ng-show=\"predicate === 'age'\" ng-class=\"{reverse:reverse}\"></span>\n            </th>\n          </tr>\n          <tr ng-repeat=\"friend in friends | orderBy:predicate:reverse\">\n            <td>{{friend.name}}</td>\n            <td>{{friend.phone}}</td>\n            <td>{{friend.age}}</td>\n          </tr>\n        </table>\n      </div>\n    </file>\n  </example>\n\nIt's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the\nfilter routine with `$filter('orderBy')`, and calling the returned filter routine with the\ndesired parameters.\n\nExample:",
                "\n <example module=\"orderByExample\">\n   <file name=\"index.html\">\n     <div ng-controller=\"ExampleController\">\n       <table class=\"friend\">\n         <tr>\n           <th><a href=\"\" ng-click=\"reverse=false;order('name', false)\">Name</a>\n             (<a href=\"\" ng-click=\"order('-name',false)\">^</a>)</th>\n           <th><a href=\"\" ng-click=\"reverse=!reverse;order('phone', reverse)\">Phone Number</a></th>\n           <th><a href=\"\" ng-click=\"reverse=!reverse;order('age',reverse)\">Age</a></th>\n         </tr>\n         <tr ng-repeat=\"friend in friends\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n           <td>{{friend.age}}</td>\n         </tr>\n       </table>\n     </div>\n   </file>\n\n   <file name=\"script.js\">\n     angular.module('orderByExample', [])\n       .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {\n         var orderBy = $filter('orderBy');\n         $scope.friends = [\n           { name: 'John',    phone: '555-1212',    age: 10 },\n           { name: 'Mary',    phone: '555-9876',    age: 19 },\n           { name: 'Mike',    phone: '555-4321',    age: 21 },\n           { name: 'Adam',    phone: '555-5678',    age: 35 },\n           { name: 'Julie',   phone: '555-8765',    age: 29 }\n         ];\n         $scope.order = function(predicate, reverse) {\n           $scope.friends = orderBy($scope.friends, predicate, reverse);\n         };\n         $scope.order('-age',false);\n       }]);\n   </file>\n</example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19375,
            "ngdoc": "directive",
            "name": "a",
            "restrict": "E",
            "description": "Modifies the default behavior of the html A tag so that the default action is prevented when\nthe href attribute is empty.\n\nThis change permits the easy creation of action links with the `ngClick` directive\nwithout changing the location or causing page reloads, e.g.:\n`<a href=\"\" ng-click=\"list.addItem()\">Add Item</a>`",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19410,
            "ngdoc": "directive",
            "name": "ngHref",
            "restrict": "A",
            "priority": "99",
            "description": "Using Angular markup like `{{hash}}` in an href attribute will\nmake the link go to the wrong URL if the user clicks it before\nAngular has a chance to replace the `{{hash}}` markup with its\nvalue. Until Angular replaces the markup the link will be broken\nand will most likely return a 404 error. The `ngHref` directive\nsolves this problem.\n\nThe wrong way to write it:\n```html\n<a href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n```\n\nThe correct way to write it:\n```html\n<a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n```",
            "element": "A",
            "params": [
                {
                    "name": "ngHref",
                    "description": "any string which can contain `{{}}` markup.",
                    "type": "Template"
                }
            ],
            "example": [
                "\nThis example shows various combinations of `href`, `ng-href` and `ng-click` attributes\nin links and their different behaviors:\n   <example>\n     <file name=\"index.html\">\n       <input ng-model=\"value\" /><br />\n       <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />\n       <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n       <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n       <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n       <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n       <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should execute ng-click but not reload when href without value', function() {\n         element(by.id('link-1')).click();\n         expect(element(by.model('value')).getAttribute('value')).toEqual('1');\n         expect(element(by.id('link-1')).getAttribute('href')).toBe('');\n       });\n\n       it('should execute ng-click but not reload when href empty string', function() {\n         element(by.id('link-2')).click();\n         expect(element(by.model('value')).getAttribute('value')).toEqual('2');\n         expect(element(by.id('link-2')).getAttribute('href')).toBe('');\n       });\n\n       it('should execute ng-click and change url when ng-href specified', function() {\n         expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\\/123$/);\n\n         element(by.id('link-3')).click();\n\n         // At this point, we navigate away from an Angular page, so we need\n         // to use browser.driver to get the base webdriver.\n\n         browser.wait(function() {\n           return browser.driver.getCurrentUrl().then(function(url) {\n             return url.match(/\\/123$/);\n           });\n         }, 5000, 'page should navigate to /123');\n       });\n\n       it('should execute ng-click but not reload when href empty string and name specified', function() {\n         element(by.id('link-4')).click();\n         expect(element(by.model('value')).getAttribute('value')).toEqual('4');\n         expect(element(by.id('link-4')).getAttribute('href')).toBe('');\n       });\n\n       it('should execute ng-click but not reload when no href but name specified', function() {\n         element(by.id('link-5')).click();\n         expect(element(by.model('value')).getAttribute('value')).toEqual('5');\n         expect(element(by.id('link-5')).getAttribute('href')).toBe(null);\n       });\n\n       it('should only change url when only ng-href', function() {\n         element(by.model('value')).clear();\n         element(by.model('value')).sendKeys('6');\n         expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\\/6$/);\n\n         element(by.id('link-6')).click();\n\n         // At this point, we navigate away from an Angular page, so we need\n         // to use browser.driver to get the base webdriver.\n         browser.wait(function() {\n           return browser.driver.getCurrentUrl().then(function(url) {\n             return url.match(/\\/6$/);\n           });\n         }, 5000, 'page should navigate to /6');\n       });\n     </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19509,
            "ngdoc": "directive",
            "name": "ngSrc",
            "restrict": "A",
            "priority": "99",
            "description": "Using Angular markup like `{{hash}}` in a `src` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrc` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img src=\"http://www.gravatar.com/avatar/{{hash}}\" alt=\"Description\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\" alt=\"Description\" />\n```",
            "element": "IMG",
            "params": [
                {
                    "name": "ngSrc",
                    "description": "any string which can contain `{{}}` markup.",
                    "type": "Template"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19535,
            "ngdoc": "directive",
            "name": "ngSrcset",
            "restrict": "A",
            "priority": "99",
            "description": "Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrcset` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\" alt=\"Description\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\" alt=\"Description\" />\n```",
            "element": "IMG",
            "params": [
                {
                    "name": "ngSrcset",
                    "description": "any string which can contain `{{}}` markup.",
                    "type": "Template"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19561,
            "ngdoc": "directive",
            "name": "ngDisabled",
            "restrict": "A",
            "priority": "100",
            "description": "This directive sets the `disabled` attribute on the element if the\n{@link guide/expression expression} inside `ngDisabled` evaluates to truthy.\n\nA special directive is necessary because we cannot use interpolation inside the `disabled`\nattribute.  The following example would make the button enabled on Chrome/Firefox\nbut not on older IEs:\n\n```html\n<!-- See below for an example of ng-disabled being used correctly -->\n<div ng-init=\"isDisabled = false\">\n <button disabled=\"{{isDisabled}}\">Disabled</button>\n</div>\n```\n\nThis is because the HTML specification does not require browsers to preserve the values of\nboolean attributes such as `disabled` (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.",
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       <label>Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"></label><br/>\n       <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should toggle button', function() {\n         expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();\n         element(by.model('checked')).click();\n         expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();\n       });\n     </file>\n   </example>"
            ],
            "element": "INPUT",
            "params": [
                {
                    "name": "ngDisabled",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then the `disabled` attribute will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19609,
            "ngdoc": "directive",
            "name": "ngChecked",
            "restrict": "A",
            "priority": "100",
            "description": "Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.\n\nNote that this directive should not be used together with {@link ngModel `ngModel`},\nas this can lead to unexpected behavior.\n\n### Why do we need `ngChecked`?\n\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as checked. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngChecked` directive solves this problem for the `checked` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       <label>Check me to check both: <input type=\"checkbox\" ng-model=\"master\"></label><br/>\n       <input id=\"checkSlave\" type=\"checkbox\" ng-checked=\"master\" aria-label=\"Slave input\">\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check both checkBoxes', function() {\n         expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();\n         element(by.model('master')).click();\n         expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();\n       });\n     </file>\n   </example>"
            ],
            "element": "INPUT",
            "params": [
                {
                    "name": "ngChecked",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then the `checked` attribute will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19651,
            "ngdoc": "directive",
            "name": "ngReadonly",
            "restrict": "A",
            "priority": "100",
            "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as readonly. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngReadonly` directive solves this problem for the `readonly` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       <label>Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"></label><br/>\n       <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\" aria-label=\"Readonly field\" />\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should toggle readonly attr', function() {\n         expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeFalsy();\n         element(by.model('checked')).click();\n         expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeTruthy();\n       });\n     </file>\n   </example>"
            ],
            "element": "INPUT",
            "params": [
                {
                    "name": "ngReadonly",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then special attribute \"readonly\" will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19686,
            "ngdoc": "directive",
            "name": "ngSelected",
            "restrict": "A",
            "priority": "100",
            "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as selected. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngSelected` directive solves this problem for the `selected` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       <label>Check me to select: <input type=\"checkbox\" ng-model=\"selected\"></label><br/>\n       <select aria-label=\"ngSelected demo\">\n         <option>Hello!</option>\n         <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>\n       </select>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should select Greetings!', function() {\n         expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();\n         element(by.model('selected')).click();\n         expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();\n       });\n     </file>\n   </example>"
            ],
            "element": "OPTION",
            "params": [
                {
                    "name": "ngSelected",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then special attribute \"selected\" will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19724,
            "ngdoc": "directive",
            "name": "ngOpen",
            "restrict": "A",
            "priority": "100",
            "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as open. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngOpen` directive solves this problem for the `open` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n    <example>\n      <file name=\"index.html\">\n        <label>Check me check multiple: <input type=\"checkbox\" ng-model=\"open\"></label><br/>\n        <details id=\"details\" ng-open=\"open\">\n           <summary>Show/Hide me</summary>\n        </details>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should toggle open', function() {\n          expect(element(by.id('details')).getAttribute('open')).toBeFalsy();\n          element(by.model('open')).click();\n          expect(element(by.id('details')).getAttribute('open')).toBeTruthy();\n        });\n      </file>\n    </example>"
            ],
            "element": "DETAILS",
            "params": [
                {
                    "name": "ngOpen",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then special attribute \"open\" will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19873,
            "ngdoc": "type",
            "name": "{Object} $error Is an object hash, containing references to controls or\n forms with failing validators, where:\n\n - keys are validation tokens (error names),\n - values are arrays of controls or forms that have a failing validator for given error name.\n\n Built-in validation tokens:\n\n - `email`\n - `max`\n - `maxlength`\n - `min`\n - `minlength`\n - `number`\n - `pattern`\n - `required`\n - `url`\n - `date`\n - `datetimelocal`\n - `time`\n - `week`\n - `month`",
            "itemtype": "property",
            "type": "Boolean",
            "description": "`FormController` keeps track of all its controls and nested forms as well as the state of them,\nsuch as being valid/invalid or dirty/pristine.\n\nEach {@link ng.directive:form form} directive creates an instance\nof `FormController`.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19935,
            "ngdoc": "method",
            "name": "form.FormController#$rollbackViewValue",
            "description": "Rollback all form controls pending updates to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. This method is typically needed by the reset button of\na form that uses `ng-model-options` to pend updates.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19952,
            "ngdoc": "method",
            "name": "form.FormController#$commitViewValue",
            "description": "Commit all form controls pending updates to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. This method is rarely needed as `NgModelController`\nusually handles calling this in response to input events.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 19969,
            "ngdoc": "method",
            "name": "form.FormController#$addControl",
            "description": "Register a control with the form.\n\nInput elements using ngModelController do this automatically when they are linked.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20000,
            "ngdoc": "method",
            "name": "form.FormController#$removeControl",
            "description": "Deregister a control from the form.\n\nInput elements using ngModelController do this automatically when they are destroyed.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20027,
            "ngdoc": "method",
            "name": "form.FormController#$setValidity",
            "description": "Sets the validity of a form control.\n\nThis method will also propagate to parent forms.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20064,
            "ngdoc": "method",
            "name": "form.FormController#$setDirty",
            "description": "Sets the form to a dirty state.\n\nThis method can be called to add the 'ng-dirty' class and set the form to a dirty\nstate (ng-dirty class). This method will also propagate to parent forms.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20082,
            "ngdoc": "method",
            "name": "form.FormController#$setPristine",
            "description": "Sets the form to its pristine state.\n\nThis method can be called to remove the 'ng-dirty' class and set the form to its pristine\nstate (ng-pristine class). This method will also propagate to all the controls contained\nin this form.\n\nSetting a form back to a pristine state is often useful when we want to 'reuse' a form after\nsaving or resetting it.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20106,
            "ngdoc": "method",
            "name": "form.FormController#$setUntouched",
            "description": "Sets the form to its untouched state.\n\nThis method can be called to remove the 'ng-touched' class and set the form controls to their\nuntouched state (ng-untouched class).\n\nSetting a form controls back to their untouched state is often useful when setting the form\nback to its pristine state.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20125,
            "ngdoc": "method",
            "name": "form.FormController#$setSubmitted",
            "description": "Sets the form to its submitted state.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20139,
            "ngdoc": "directive",
            "name": "ngForm",
            "restrict": "EAC",
            "description": "Nestable alias of {@link ng.directive:form `form`} directive. HTML\ndoes not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\nsub-group of controls needs to be determined.\n\nNote: the purpose of `ngForm` is to group controls,\nbut not to be a replacement for the `<form>` tag with all of its capabilities\n(e.g. posting to the server, ...).",
            "params": [
                {
                    "name": "ngForm|name",
                    "description": "Name of the form. If specified, the form controller will be published into\n                      related scope, under this name.",
                    "type": "String="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20158,
            "ngdoc": "directive",
            "name": "form",
            "restrict": "E",
            "description": "Directive that instantiates\n{@link form.FormController FormController}.\n\nIf the `name` attribute is specified, the form controller is published onto the current scope under\nthis name.\n\n# Alias: {@link ng.directive:ngForm `ngForm`}\n\nIn Angular, forms can be nested. This means that the outer form is valid when all of the child\nforms are valid as well. However, browsers do not allow nesting of `<form>` elements, so\nAngular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to\n`<form>` but can be nested.  This allows you to have nested forms, which is very useful when\nusing Angular validation directives in forms that are dynamically generated using the\n{@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`\nattribute of input elements using interpolation, you have to wrap each set of repeated inputs in an\n`ngForm` directive and nest these in an outer `form` element.\n\n\n# CSS classes\n - `ng-valid` is set if the form is valid.\n - `ng-invalid` is set if the form is invalid.\n - `ng-pristine` is set if the form is pristine.\n - `ng-dirty` is set if the form is dirty.\n - `ng-submitted` is set if the form was submitted.\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n\n# Submitting a form and preventing the default action\n\nSince the role of forms in client-side Angular applications is different than in classical\nroundtrip apps, it is desirable for the browser not to translate the form submission into a full\npage reload that sends the data to the server. Instead some javascript logic should be triggered\nto handle the form submission in an application-specific way.\n\nFor this reason, Angular prevents the default action (form submission to the server) unless the\n`<form>` element has an `action` attribute specified.\n\nYou can use one of the following two ways to specify what javascript method should be called when\na form is submitted:\n\n- {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n- {@link ng.directive:ngClick ngClick} directive on the first\n button or input field of type submit (input[type=submit])\n\nTo prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}\nor {@link ng.directive:ngClick ngClick} directives.\nThis is because of the following form submission rules in the HTML specification:\n\n- If a form has only one input field then hitting enter in this field triggers form submit\n(`ngSubmit`)\n- if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter\ndoesn't trigger submit\n- if a form has one or more input fields and one or more buttons or input[type=submit] then\nhitting enter in any of the input fields will trigger the click handler on the *first* button or\ninput[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n\nAny pending `ngModelOptions` changes will take place immediately when an enclosing form is\nsubmitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\nto have access to the updated model.\n\n## Animation Hooks\n\nAnimations in ngForm are triggered when any of the associated CSS classes are added and removed.\nThese classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any\nother validations that are performed within the form. Animations in ngForm are similar to how\nthey work in ngClass and animations can be hooked into using CSS transitions, keyframes as well\nas JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style a form element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-form {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-form.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre>",
            "example": [
                "\n   <example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"formExample\">\n     <file name=\"index.html\">\n      <script>\n        angular.module('formExample', [])\n          .controller('FormController', ['$scope', function($scope) {\n            $scope.userType = 'guest';\n          }]);\n      </script>\n      <style>\n       .my-form {\n         -webkit-transition:all linear 0.5s;\n         transition:all linear 0.5s;\n         background: transparent;\n       }\n       .my-form.ng-invalid {\n         background: red;\n       }\n      </style>\n      <form name=\"myForm\" ng-controller=\"FormController\" class=\"my-form\">\n        userType: <input name=\"input\" ng-model=\"userType\" required>\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">Required!</span><br>\n        <code>userType = {{userType}}</code><br>\n        <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>\n        <code>myForm.input.$error = {{myForm.input.$error}}</code><br>\n        <code>myForm.$valid = {{myForm.$valid}}</code><br>\n        <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>\n       </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should initialize to model', function() {\n         var userType = element(by.binding('userType'));\n         var valid = element(by.binding('myForm.input.$valid'));\n\n         expect(userType.getText()).toContain('guest');\n         expect(valid.getText()).toContain('true');\n       });\n\n       it('should be invalid if empty', function() {\n         var userType = element(by.binding('userType'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var userInput = element(by.model('userType'));\n\n         userInput.clear();\n         userInput.sendKeys('');\n\n         expect(userType.getText()).toEqual('userType =');\n         expect(valid.getText()).toContain('false');\n       });\n     </file>\n   </example>"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "Name of the form. If specified, the form controller will be published into\n                      related scope, under this name.",
                    "type": "String="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20398,
            "ngdoc": "input",
            "name": "input[text]",
            "description": "Standard HTML text input with angular data binding, inherited by most of the `input` elements.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Adds `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   any length.",
                    "type": "Number="
                },
                {
                    "name": "pattern",
                    "description": "Similar to `ngPattern` except that the attribute value is the actual string\n   that contains the regular expression body that will be converted to a regular expression\n   as in the ngPattern directive.",
                    "type": "String="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the ngModel value does not match\n   a RegExp found by evaluating the Angular expression given in the attribute value.\n   If the expression evaluates to a RegExp object, then this is used directly.\n   If the expression evaluates to a string, then it will be converted to a RegExp\n   after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   `new RegExp('^abc$')`.<br />\n   **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   start at the index of the last search's match, thus not taking the whole input value into\n   account.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                },
                {
                    "name": "ngTrim",
                    "description": "If set to false Angular will not automatically trim the input.\n   This parameter is ignored for input[type=password] controls, which will never trim the\n   input.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "example": [
                "\n     <example name=\"text-input-directive\" module=\"textInputExample\">\n       <file name=\"index.html\">\n        <script>\n          angular.module('textInputExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.example = {\n                text: 'guest',\n                word: /^\\s*\\w*\\s*$/\n              };\n            }]);\n        </script>\n        <form name=\"myForm\" ng-controller=\"ExampleController\">\n          <label>Single word:\n            <input type=\"text\" name=\"input\" ng-model=\"example.text\"\n                   ng-pattern=\"example.word\" required ng-trim=\"false\">\n          </label>\n          <div role=\"alert\">\n            <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n            <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">\n              Single word only!</span>\n          </div>\n          <tt>text = {{example.text}}</tt><br/>\n          <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n          <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n          <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n          <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         </form>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var text = element(by.binding('example.text'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var input = element(by.model('example.text'));\n\n         it('should initialize to model', function() {\n           expect(text.getText()).toContain('guest');\n           expect(valid.getText()).toContain('true');\n         });\n\n         it('should be invalid if empty', function() {\n           input.clear();\n           input.sendKeys('');\n\n           expect(text.getText()).toEqual('text =');\n           expect(valid.getText()).toContain('false');\n         });\n\n         it('should be invalid if multi word', function() {\n           input.clear();\n           input.sendKeys('hello world');\n\n           expect(valid.getText()).toContain('false');\n         });\n       </file>\n     </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20494,
            "ngdoc": "input",
            "name": "input[date]",
            "description": "Input with date validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601\ndate format (yyyy-MM-dd), for example: `2009-01-06`. Since many\nmodern browsers do not yet support this input type, it is important to provide cues to users on the\nexpected input format via a placeholder or label.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "min",
                    "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be a\nvalid ISO date string (yyyy-MM-dd).",
                    "type": "String="
                },
                {
                    "name": "max",
                    "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must be\na valid ISO date string (yyyy-MM-dd).",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n    <example name=\"date-input-directive\" module=\"dateInputExample\">\n    <file name=\"index.html\">\n      <script>\n         angular.module('dateInputExample', [])\n           .controller('DateController', ['$scope', function($scope) {\n             $scope.example = {\n               value: new Date(2013, 9, 22)\n             };\n           }]);\n      </script>\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n         <label for=\"exampleInput\">Pick a date in 2013:</label>\n         <input type=\"date\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n             placeholder=\"yyyy-MM-dd\" min=\"2013-01-01\" max=\"2013-12-31\" required />\n         <div role=\"alert\">\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n               Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.date\">\n               Not a valid date!</span>\n          </div>\n          <tt>value = {{example.value | date: \"yyyy-MM-dd\"}}</tt><br/>\n          <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n          <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n          <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n          <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n       var value = element(by.binding('example.value | date: \"yyyy-MM-dd\"'));\n       var valid = element(by.binding('myForm.input.$valid'));\n       var input = element(by.model('example.value'));\n\n       // currently protractor/webdriver does not support\n       // sending keys to all known HTML5 input controls\n       // for various browsers (see https://github.com/angular/protractor/issues/562).\n       function setInput(val) {\n         // set the value of the element and force validation.\n         var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n         \"ipt.value = '\" + val + \"';\" +\n         \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n         browser.executeScript(scr);\n       }\n\n       it('should initialize to model', function() {\n         expect(value.getText()).toContain('2013-10-22');\n         expect(valid.getText()).toContain('myForm.input.$valid = true');\n       });\n\n       it('should be invalid if empty', function() {\n         setInput('');\n         expect(value.getText()).toEqual('value =');\n         expect(valid.getText()).toContain('myForm.input.$valid = false');\n       });\n\n       it('should be invalid if over max', function() {\n         setInput('2015-01-01');\n         expect(value.getText()).toContain('');\n         expect(valid.getText()).toContain('myForm.input.$valid = false');\n       });\n    </file>\n    </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20591,
            "ngdoc": "input",
            "name": "input[datetime-local]",
            "description": "Input with datetime validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nlocal datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "min",
                    "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be a\nvalid ISO datetime format (yyyy-MM-ddTHH:mm:ss).",
                    "type": "String="
                },
                {
                    "name": "max",
                    "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must be\na valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n   <example name=\"datetimelocal-input-directive\" module=\"dateExample\">\n   <file name=\"index.html\">\n     <script>\n       angular.module('dateExample', [])\n         .controller('DateController', ['$scope', function($scope) {\n           $scope.example = {\n             value: new Date(2010, 11, 28, 14, 57)\n           };\n         }]);\n     </script>\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n       <label for=\"exampleInput\">Pick a date between in 2013:</label>\n       <input type=\"datetime-local\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n           placeholder=\"yyyy-MM-ddTHH:mm:ss\" min=\"2001-01-01T00:00:00\" max=\"2013-12-31T00:00:00\" required />\n       <div role=\"alert\">\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n         <span class=\"error\" ng-show=\"myForm.input.$error.datetimelocal\">\n             Not a valid date!</span>\n       </div>\n       <tt>value = {{example.value | date: \"yyyy-MM-ddTHH:mm:ss\"}}</tt><br/>\n       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var value = element(by.binding('example.value | date: \"yyyy-MM-ddTHH:mm:ss\"'));\n     var valid = element(by.binding('myForm.input.$valid'));\n     var input = element(by.model('example.value'));\n\n     // currently protractor/webdriver does not support\n     // sending keys to all known HTML5 input controls\n     // for various browsers (https://github.com/angular/protractor/issues/562).\n     function setInput(val) {\n       // set the value of the element and force validation.\n       var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n       \"ipt.value = '\" + val + \"';\" +\n       \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n       browser.executeScript(scr);\n     }\n\n     it('should initialize to model', function() {\n       expect(value.getText()).toContain('2010-12-28T14:57:00');\n       expect(valid.getText()).toContain('myForm.input.$valid = true');\n     });\n\n     it('should be invalid if empty', function() {\n       setInput('');\n       expect(value.getText()).toEqual('value =');\n       expect(valid.getText()).toContain('myForm.input.$valid = false');\n     });\n\n     it('should be invalid if over max', function() {\n       setInput('2015-01-01T23:59:00');\n       expect(value.getText()).toContain('');\n       expect(valid.getText()).toContain('myForm.input.$valid = false');\n     });\n   </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20686,
            "ngdoc": "input",
            "name": "input[time]",
            "description": "Input with time validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nlocal time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a\nDate object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "min",
                    "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be a\nvalid ISO time format (HH:mm:ss).",
                    "type": "String="
                },
                {
                    "name": "max",
                    "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must be a\nvalid ISO time format (HH:mm:ss).",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n  <example name=\"time-input-directive\" module=\"timeExample\">\n  <file name=\"index.html\">\n    <script>\n     angular.module('timeExample', [])\n       .controller('DateController', ['$scope', function($scope) {\n         $scope.example = {\n           value: new Date(1970, 0, 1, 14, 57, 0)\n         };\n       }]);\n    </script>\n    <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n       <label for=\"exampleInput\">Pick a between 8am and 5pm:</label>\n       <input type=\"time\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n           placeholder=\"HH:mm:ss\" min=\"08:00:00\" max=\"17:00:00\" required />\n       <div role=\"alert\">\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n         <span class=\"error\" ng-show=\"myForm.input.$error.time\">\n             Not a valid date!</span>\n       </div>\n       <tt>value = {{example.value | date: \"HH:mm:ss\"}}</tt><br/>\n       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n    </form>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n     var value = element(by.binding('example.value | date: \"HH:mm:ss\"'));\n     var valid = element(by.binding('myForm.input.$valid'));\n     var input = element(by.model('example.value'));\n\n     // currently protractor/webdriver does not support\n     // sending keys to all known HTML5 input controls\n     // for various browsers (https://github.com/angular/protractor/issues/562).\n     function setInput(val) {\n       // set the value of the element and force validation.\n       var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n       \"ipt.value = '\" + val + \"';\" +\n       \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n       browser.executeScript(scr);\n     }\n\n     it('should initialize to model', function() {\n       expect(value.getText()).toContain('14:57:00');\n       expect(valid.getText()).toContain('myForm.input.$valid = true');\n     });\n\n     it('should be invalid if empty', function() {\n       setInput('');\n       expect(value.getText()).toEqual('value =');\n       expect(valid.getText()).toContain('myForm.input.$valid = false');\n     });\n\n     it('should be invalid if over max', function() {\n       setInput('23:59:00');\n       expect(value.getText()).toContain('');\n       expect(valid.getText()).toContain('myForm.input.$valid = false');\n     });\n  </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20782,
            "ngdoc": "input",
            "name": "input[week]",
            "description": "Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support\nthe HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nweek format (yyyy-W##), for example: `2013-W02`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "min",
                    "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be a\nvalid ISO week format (yyyy-W##).",
                    "type": "String="
                },
                {
                    "name": "max",
                    "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must be\na valid ISO week format (yyyy-W##).",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n   <example name=\"week-input-directive\" module=\"weekExample\">\n   <file name=\"index.html\">\n     <script>\n     angular.module('weekExample', [])\n       .controller('DateController', ['$scope', function($scope) {\n         $scope.example = {\n           value: new Date(2013, 0, 3)\n         };\n       }]);\n     </script>\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n       <label>Pick a date between in 2013:\n         <input id=\"exampleInput\" type=\"week\" name=\"input\" ng-model=\"example.value\"\n                placeholder=\"YYYY-W##\" min=\"2012-W32\"\n                max=\"2013-W52\" required />\n       </label>\n       <div role=\"alert\">\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n         <span class=\"error\" ng-show=\"myForm.input.$error.week\">\n             Not a valid date!</span>\n       </div>\n       <tt>value = {{example.value | date: \"yyyy-Www\"}}</tt><br/>\n       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var value = element(by.binding('example.value | date: \"yyyy-Www\"'));\n     var valid = element(by.binding('myForm.input.$valid'));\n     var input = element(by.model('example.value'));\n\n     // currently protractor/webdriver does not support\n     // sending keys to all known HTML5 input controls\n     // for various browsers (https://github.com/angular/protractor/issues/562).\n     function setInput(val) {\n       // set the value of the element and force validation.\n       var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n       \"ipt.value = '\" + val + \"';\" +\n       \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n       browser.executeScript(scr);\n     }\n\n     it('should initialize to model', function() {\n       expect(value.getText()).toContain('2013-W01');\n       expect(valid.getText()).toContain('myForm.input.$valid = true');\n     });\n\n     it('should be invalid if empty', function() {\n       setInput('');\n       expect(value.getText()).toEqual('value =');\n       expect(valid.getText()).toContain('myForm.input.$valid = false');\n     });\n\n     it('should be invalid if over max', function() {\n       setInput('2015-W01');\n       expect(value.getText()).toContain('');\n       expect(valid.getText()).toContain('myForm.input.$valid = false');\n     });\n   </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20877,
            "ngdoc": "input",
            "name": "input[month]",
            "description": "Input with month validation and transformation. In browsers that do not yet support\nthe HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nmonth format (yyyy-MM), for example: `2009-01`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\nIf the model is not set to the first of the month, the next view to model update will set it\nto the first of the month.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "min",
                    "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be\na valid ISO month format (yyyy-MM).",
                    "type": "String="
                },
                {
                    "name": "max",
                    "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must\nbe a valid ISO month format (yyyy-MM).",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n  <example name=\"month-input-directive\" module=\"monthExample\">\n  <file name=\"index.html\">\n    <script>\n     angular.module('monthExample', [])\n       .controller('DateController', ['$scope', function($scope) {\n         $scope.example = {\n           value: new Date(2013, 9, 1)\n         };\n       }]);\n    </script>\n    <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n      <label for=\"exampleInput\">Pick a month in 2013:</label>\n      <input id=\"exampleInput\" type=\"month\" name=\"input\" ng-model=\"example.value\"\n         placeholder=\"yyyy-MM\" min=\"2013-01\" max=\"2013-12\" required />\n      <div role=\"alert\">\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n           Required!</span>\n        <span class=\"error\" ng-show=\"myForm.input.$error.month\">\n           Not a valid month!</span>\n      </div>\n      <tt>value = {{example.value | date: \"yyyy-MM\"}}</tt><br/>\n      <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n      <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n    </form>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n     var value = element(by.binding('example.value | date: \"yyyy-MM\"'));\n     var valid = element(by.binding('myForm.input.$valid'));\n     var input = element(by.model('example.value'));\n\n     // currently protractor/webdriver does not support\n     // sending keys to all known HTML5 input controls\n     // for various browsers (https://github.com/angular/protractor/issues/562).\n     function setInput(val) {\n       // set the value of the element and force validation.\n       var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n       \"ipt.value = '\" + val + \"';\" +\n       \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n       browser.executeScript(scr);\n     }\n\n     it('should initialize to model', function() {\n       expect(value.getText()).toContain('2013-10');\n       expect(valid.getText()).toContain('myForm.input.$valid = true');\n     });\n\n     it('should be invalid if empty', function() {\n       setInput('');\n       expect(value.getText()).toEqual('value =');\n       expect(valid.getText()).toContain('myForm.input.$valid = false');\n     });\n\n     it('should be invalid if over max', function() {\n       setInput('2015-01');\n       expect(value.getText()).toContain('');\n       expect(valid.getText()).toContain('myForm.input.$valid = false');\n     });\n  </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 20974,
            "ngdoc": "input",
            "name": "input[number]",
            "description": "Text input with number validation and transformation. Sets the `number` validation\nerror if not a valid number.\n\n<div class=\"alert alert-warning\">\nThe model must always be of type `number` otherwise Angular will throw an error.\nBe aware that a string containing a number is not enough. See the {@link ngModel:numfmt}\nerror docs for more information and an example of how to convert your model if necessary.\n</div>\n\n## Issues with HTML5 constraint validation\n\nIn browsers that follow the\n[HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),\n`input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.\nIf a non-number is entered in the input, the browser will report the value as an empty string,\nwhich means the view / model values in `ngModel` and subsequently the scope value\nwill also be an empty string.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "min",
                    "description": "Sets the `min` validation error key if the value entered is less than `min`.",
                    "type": "String="
                },
                {
                    "name": "max",
                    "description": "Sets the `max` validation error key if the value entered is greater than `max`.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   any length.",
                    "type": "Number="
                },
                {
                    "name": "pattern",
                    "description": "Similar to `ngPattern` except that the attribute value is the actual string\n   that contains the regular expression body that will be converted to a regular expression\n   as in the ngPattern directive.",
                    "type": "String="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the ngModel value does not match\n   a RegExp found by evaluating the Angular expression given in the attribute value.\n   If the expression evaluates to a RegExp object, then this is used directly.\n   If the expression evaluates to a string, then it will be converted to a RegExp\n   after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   `new RegExp('^abc$')`.<br />\n   **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   start at the index of the last search's match, thus not taking the whole input value into\n   account.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n     <example name=\"number-input-directive\" module=\"numberExample\">\n       <file name=\"index.html\">\n        <script>\n          angular.module('numberExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.example = {\n                value: 12\n              };\n            }]);\n        </script>\n        <form name=\"myForm\" ng-controller=\"ExampleController\">\n          <label>Number:\n            <input type=\"number\" name=\"input\" ng-model=\"example.value\"\n                   min=\"0\" max=\"99\" required>\n         </label>\n          <div role=\"alert\">\n            <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n            <span class=\"error\" ng-show=\"myForm.input.$error.number\">\n              Not valid number!</span>\n          </div>\n          <tt>value = {{example.value}}</tt><br/>\n          <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n          <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n          <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n          <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         </form>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var value = element(by.binding('example.value'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var input = element(by.model('example.value'));\n\n         it('should initialize to model', function() {\n           expect(value.getText()).toContain('12');\n           expect(valid.getText()).toContain('true');\n         });\n\n         it('should be invalid if empty', function() {\n           input.clear();\n           input.sendKeys('');\n           expect(value.getText()).toEqual('value =');\n           expect(valid.getText()).toContain('false');\n         });\n\n         it('should be invalid if over max', function() {\n           input.clear();\n           input.sendKeys('123');\n           expect(value.getText()).toEqual('value =');\n           expect(valid.getText()).toContain('false');\n         });\n       </file>\n     </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 21084,
            "ngdoc": "input",
            "name": "input[url]",
            "description": "Text input with URL validation. Sets the `url` validation error key if the content is not a\nvalid URL.\n\n<div class=\"alert alert-warning\">\n**Note:** `input[url]` uses a regex to validate urls that is derived from the regex\nused in Chromium. If you need stricter validation, you can use `ng-pattern` or modify\nthe built-in validators (see the {@link guide/forms Forms guide})\n</div>",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   any length.",
                    "type": "Number="
                },
                {
                    "name": "pattern",
                    "description": "Similar to `ngPattern` except that the attribute value is the actual string\n   that contains the regular expression body that will be converted to a regular expression\n   as in the ngPattern directive.",
                    "type": "String="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the ngModel value does not match\n   a RegExp found by evaluating the Angular expression given in the attribute value.\n   If the expression evaluates to a RegExp object, then this is used directly.\n   If the expression evaluates to a string, then it will be converted to a RegExp\n   after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   `new RegExp('^abc$')`.<br />\n   **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   start at the index of the last search's match, thus not taking the whole input value into\n   account.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n     <example name=\"url-input-directive\" module=\"urlExample\">\n       <file name=\"index.html\">\n        <script>\n          angular.module('urlExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.url = {\n                text: 'http://google.com'\n              };\n            }]);\n        </script>\n        <form name=\"myForm\" ng-controller=\"ExampleController\">\n          <label>URL:\n            <input type=\"url\" name=\"input\" ng-model=\"url.text\" required>\n          <label>\n          <div role=\"alert\">\n            <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n            <span class=\"error\" ng-show=\"myForm.input.$error.url\">\n              Not valid url!</span>\n          </div>\n          <tt>text = {{url.text}}</tt><br/>\n          <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n          <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n          <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n          <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>\n         </form>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var text = element(by.binding('url.text'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var input = element(by.model('url.text'));\n\n         it('should initialize to model', function() {\n           expect(text.getText()).toContain('http://google.com');\n           expect(valid.getText()).toContain('true');\n         });\n\n         it('should be invalid if empty', function() {\n           input.clear();\n           input.sendKeys('');\n\n           expect(text.getText()).toEqual('text =');\n           expect(valid.getText()).toContain('false');\n         });\n\n         it('should be invalid if not url', function() {\n           input.clear();\n           input.sendKeys('box');\n\n           expect(valid.getText()).toContain('false');\n         });\n       </file>\n     </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 21183,
            "ngdoc": "input",
            "name": "input[email]",
            "description": "Text input with email validation. Sets the `email` validation error key if not a valid email\naddress.\n\n<div class=\"alert alert-warning\">\n**Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex\nused in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can\nuse `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})\n</div>",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   any length.",
                    "type": "Number="
                },
                {
                    "name": "pattern",
                    "description": "Similar to `ngPattern` except that the attribute value is the actual string\n   that contains the regular expression body that will be converted to a regular expression\n   as in the ngPattern directive.",
                    "type": "String="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the ngModel value does not match\n   a RegExp found by evaluating the Angular expression given in the attribute value.\n   If the expression evaluates to a RegExp object, then this is used directly.\n   If the expression evaluates to a string, then it will be converted to a RegExp\n   after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   `new RegExp('^abc$')`.<br />\n   **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   start at the index of the last search's match, thus not taking the whole input value into\n   account.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n     <example name=\"email-input-directive\" module=\"emailExample\">\n       <file name=\"index.html\">\n        <script>\n          angular.module('emailExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.email = {\n                text: 'me@example.com'\n              };\n            }]);\n        </script>\n          <form name=\"myForm\" ng-controller=\"ExampleController\">\n            <label>Email:\n              <input type=\"email\" name=\"input\" ng-model=\"email.text\" required>\n            </label>\n            <div role=\"alert\">\n              <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n                Required!</span>\n              <span class=\"error\" ng-show=\"myForm.input.$error.email\">\n                Not valid email!</span>\n            </div>\n            <tt>text = {{email.text}}</tt><br/>\n            <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n            <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n            <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n            <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n            <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>\n          </form>\n        </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var text = element(by.binding('email.text'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var input = element(by.model('email.text'));\n\n         it('should initialize to model', function() {\n           expect(text.getText()).toContain('me@example.com');\n           expect(valid.getText()).toContain('true');\n         });\n\n         it('should be invalid if empty', function() {\n           input.clear();\n           input.sendKeys('');\n           expect(text.getText()).toEqual('text =');\n           expect(valid.getText()).toContain('false');\n         });\n\n         it('should be invalid if not email', function() {\n           input.clear();\n           input.sendKeys('xxx');\n\n           expect(valid.getText()).toContain('false');\n         });\n       </file>\n     </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 21281,
            "ngdoc": "input",
            "name": "input[radio]",
            "description": "HTML radio button.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to which the `ngModel` expression should be set when selected.\n   Note that `value` only supports `string` values, i.e. the scope model needs to be a string,\n   too. Use `ngValue` if you need complex models (`number`, `object`, ...).",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                },
                {
                    "name": "ngValue",
                    "description": "Angular expression to which `ngModel` will be be set when the radio\n   is selected. Should be used instead of the `value` attribute if you need\n   a non-string `ngModel` (`boolean`, `array`, ...).",
                    "type": "String"
                }
            ],
            "example": [
                "\n     <example name=\"radio-input-directive\" module=\"radioExample\">\n       <file name=\"index.html\">\n        <script>\n          angular.module('radioExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.color = {\n                name: 'blue'\n              };\n              $scope.specialValue = {\n                \"id\": \"12345\",\n                \"value\": \"green\"\n              };\n            }]);\n        </script>\n        <form name=\"myForm\" ng-controller=\"ExampleController\">\n          <label>\n            <input type=\"radio\" ng-model=\"color.name\" value=\"red\">\n            Red\n          </label><br/>\n          <label>\n            <input type=\"radio\" ng-model=\"color.name\" ng-value=\"specialValue\">\n            Green\n          </label><br/>\n          <label>\n            <input type=\"radio\" ng-model=\"color.name\" value=\"blue\">\n            Blue\n          </label><br/>\n          <tt>color = {{color.name | json}}</tt><br/>\n         </form>\n         Note that `ng-value=\"specialValue\"` sets radio item's value to be the value of `$scope.specialValue`.\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         it('should change state', function() {\n           var color = element(by.binding('color.name'));\n\n           expect(color.getText()).toContain('blue');\n\n           element.all(by.model('color.name')).get(0).click();\n\n           expect(color.getText()).toContain('red');\n         });\n       </file>\n     </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 21347,
            "ngdoc": "input",
            "name": "input[checkbox]",
            "description": "HTML checkbox.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "ngTrueValue",
                    "description": "The value to which the expression should be set when selected.",
                    "type": "Expression="
                },
                {
                    "name": "ngFalseValue",
                    "description": "The value to which the expression should be set when not selected.",
                    "type": "Expression="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n     <example name=\"checkbox-input-directive\" module=\"checkboxExample\">\n       <file name=\"index.html\">\n        <script>\n          angular.module('checkboxExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.checkboxModel = {\n               value1 : true,\n               value2 : 'YES'\n             };\n            }]);\n        </script>\n        <form name=\"myForm\" ng-controller=\"ExampleController\">\n          <label>Value1:\n            <input type=\"checkbox\" ng-model=\"checkboxModel.value1\">\n          </label><br/>\n          <label>Value2:\n            <input type=\"checkbox\" ng-model=\"checkboxModel.value2\"\n                   ng-true-value=\"'YES'\" ng-false-value=\"'NO'\">\n           </label><br/>\n          <tt>value1 = {{checkboxModel.value1}}</tt><br/>\n          <tt>value2 = {{checkboxModel.value2}}</tt><br/>\n         </form>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         it('should change state', function() {\n           var value1 = element(by.binding('checkboxModel.value1'));\n           var value2 = element(by.binding('checkboxModel.value2'));\n\n           expect(value1.getText()).toContain('true');\n           expect(value2.getText()).toContain('YES');\n\n           element(by.model('checkboxModel.value1')).click();\n           element(by.model('checkboxModel.value2')).click();\n\n           expect(value1.getText()).toContain('false');\n           expect(value2.getText()).toContain('NO');\n         });\n       </file>\n     </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 21823,
            "ngdoc": "directive",
            "name": "textarea",
            "restrict": "E",
            "description": "HTML textarea element control with angular data-binding. The data-binding and validation\nproperties of this element are exactly the same as those of the\n{@link ng.directive:input input element}.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any\n   length.",
                    "type": "Number="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the ngModel value does not match\n   a RegExp found by evaluating the Angular expression given in the attribute value.\n   If the expression evaluates to a RegExp object, then this is used directly.\n   If the expression evaluates to a string, then it will be converted to a RegExp\n   after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   `new RegExp('^abc$')`.<br />\n   **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   start at the index of the last search's match, thus not taking the whole input value into\n   account.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                },
                {
                    "name": "ngTrim",
                    "description": "If set to false Angular will not automatically trim the input.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 21859,
            "ngdoc": "directive",
            "name": "input",
            "restrict": "E",
            "description": "HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,\ninput state control, and validation.\nInput control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.\n\n<div class=\"alert alert-warning\">\n**Note:** Not every feature offered is available for all input types.\nSpecifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.\n</div>",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Sets `required` attribute if set to true",
                    "type": "Boolean="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any\n   length.",
                    "type": "Number="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the ngModel value does not match\n   a RegExp found by evaluating the Angular expression given in the attribute value.\n   If the expression evaluates to a RegExp object, then this is used directly.\n   If the expression evaluates to a string, then it will be converted to a RegExp\n   after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   `new RegExp('^abc$')`.<br />\n   **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   start at the index of the last search's match, thus not taking the whole input value into\n   account.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                },
                {
                    "name": "ngTrim",
                    "description": "If set to false Angular will not automatically trim the input.\n   This parameter is ignored for input[type=password] controls, which will never trim the\n   input.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "example": [
                "\n   <example name=\"input-directive\" module=\"inputExample\">\n     <file name=\"index.html\">\n      <script>\n         angular.module('inputExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.user = {name: 'guest', last: 'visitor'};\n           }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n        <form name=\"myForm\">\n          <label>\n             User name:\n             <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n          </label>\n          <div role=\"alert\">\n            <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n             Required!</span>\n          </div>\n          <label>\n             Last name:\n             <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n             ng-minlength=\"3\" ng-maxlength=\"10\">\n          </label>\n          <div role=\"alert\">\n            <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n              Too short!</span>\n            <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n              Too long!</span>\n          </div>\n        </form>\n        <hr>\n        <tt>user = {{user}}</tt><br/>\n        <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>\n        <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>\n        <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>\n        <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n        <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>\n        <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>\n      </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var user = element(by.exactBinding('user'));\n       var userNameValid = element(by.binding('myForm.userName.$valid'));\n       var lastNameValid = element(by.binding('myForm.lastName.$valid'));\n       var lastNameError = element(by.binding('myForm.lastName.$error'));\n       var formValid = element(by.binding('myForm.$valid'));\n       var userNameInput = element(by.model('user.name'));\n       var userLastInput = element(by.model('user.last'));\n\n       it('should initialize to model', function() {\n         expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"visitor\"}');\n         expect(userNameValid.getText()).toContain('true');\n         expect(formValid.getText()).toContain('true');\n       });\n\n       it('should be invalid if empty when required', function() {\n         userNameInput.clear();\n         userNameInput.sendKeys('');\n\n         expect(user.getText()).toContain('{\"last\":\"visitor\"}');\n         expect(userNameValid.getText()).toContain('false');\n         expect(formValid.getText()).toContain('false');\n       });\n\n       it('should be valid if empty when min length is set', function() {\n         userLastInput.clear();\n         userLastInput.sendKeys('');\n\n         expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"\"}');\n         expect(lastNameValid.getText()).toContain('true');\n         expect(formValid.getText()).toContain('true');\n       });\n\n       it('should be invalid if less than required min length', function() {\n         userLastInput.clear();\n         userLastInput.sendKeys('xx');\n\n         expect(user.getText()).toContain('{\"name\":\"guest\"}');\n         expect(lastNameValid.getText()).toContain('false');\n         expect(lastNameError.getText()).toContain('minlength');\n         expect(formValid.getText()).toContain('false');\n       });\n\n       it('should be invalid if longer than max length', function() {\n         userLastInput.clear();\n         userLastInput.sendKeys('some ridiculously long name');\n\n         expect(user.getText()).toContain('{\"name\":\"guest\"}');\n         expect(lastNameValid.getText()).toContain('false');\n         expect(lastNameError.getText()).toContain('maxlength');\n         expect(formValid.getText()).toContain('false');\n       });\n     </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22015,
            "ngdoc": "directive",
            "name": "ngValue",
            "description": "Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},\nso that when the element is selected, the {@link ngModel `ngModel`} of that element is set to\nthe bound value.\n\n`ngValue` is useful when dynamically generating lists of radio buttons using\n{@link ngRepeat `ngRepeat`}, as shown below.\n\nLikewise, `ngValue` can be used to generate `<option>` elements for\nthe {@link select `select`} element. In that case however, only strings are supported\nfor the `value `attribute, so the resulting `ngModel` will always be a string.\nSupport for `select` models with non-string values is available via `ngOptions`.",
            "element": "input",
            "params": [
                {
                    "name": "ngValue",
                    "description": "angular expression, whose value will be bound to the `value` attribute\n  of the `input` element",
                    "type": "String="
                }
            ],
            "example": [
                "\n   <example name=\"ngValue-directive\" module=\"valueExample\">\n     <file name=\"index.html\">\n      <script>\n         angular.module('valueExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.names = ['pizza', 'unicorns', 'robots'];\n             $scope.my = { favorite: 'unicorns' };\n           }]);\n      </script>\n       <form ng-controller=\"ExampleController\">\n         <h2>Which is your favorite?</h2>\n           <label ng-repeat=\"name in names\" for=\"{{name}}\">\n             {{name}}\n             <input type=\"radio\"\n                    ng-model=\"my.favorite\"\n                    ng-value=\"name\"\n                    id=\"{{name}}\"\n                    name=\"favorite\">\n           </label>\n         <div>You chose {{my.favorite}}</div>\n       </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var favorite = element(by.binding('my.favorite'));\n\n       it('should initialize to model', function() {\n         expect(favorite.getText()).toContain('unicorns');\n       });\n       it('should bind the values to the inputs', function() {\n         element.all(by.model('my.favorite')).get(0).click();\n         expect(favorite.getText()).toContain('pizza');\n       });\n     </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22092,
            "ngdoc": "directive",
            "name": "ngBind",
            "restrict": "AC",
            "description": "The `ngBind` attribute tells Angular to replace the text content of the specified HTML element\nwith the value of a given expression, and to update the text content when the value of that\nexpression changes.\n\nTypically, you don't use `ngBind` directly, but instead you use the double curly markup like\n`{{ expression }}` which is similar but less verbose.\n\nIt is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily\ndisplayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an\nelement attribute, it makes the bindings invisible to the user while the page is loading.\n\nAn alternative solution to this problem would be using the\n{@link ng.directive:ngCloak ngCloak} directive.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngBind",
                    "description": "{@link guide/expression Expression} to evaluate.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\nEnter a name in the Live Preview text box; the greeting below the text box changes instantly.\n  <example module=\"bindExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('bindExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.name = 'Whirled';\n          }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n        <label>Enter name: <input type=\"text\" ng-model=\"name\"></label><br>\n        Hello <span ng-bind=\"name\"></span>!\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-bind', function() {\n        var nameInput = element(by.model('name'));\n\n        expect(element(by.binding('name')).getText()).toBe('Whirled');\n        nameInput.clear();\n        nameInput.sendKeys('world');\n        expect(element(by.binding('name')).getText()).toBe('world');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22160,
            "ngdoc": "directive",
            "name": "ngBindTemplate",
            "description": "The `ngBindTemplate` directive specifies that the element\ntext content should be replaced with the interpolation of the template\nin the `ngBindTemplate` attribute.\nUnlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`\nexpressions. This directive is needed since some HTML elements\n(such as TITLE and OPTION) cannot contain SPAN elements.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngBindTemplate",
                    "description": "template of form\n  <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.",
                    "type": "String"
                }
            ],
            "example": [
                "\nTry it here: enter text in text box and watch the greeting change.\n  <example module=\"bindExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('bindExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.salutation = 'Hello';\n            $scope.name = 'World';\n          }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n       <label>Salutation: <input type=\"text\" ng-model=\"salutation\"></label><br>\n       <label>Name: <input type=\"text\" ng-model=\"name\"></label><br>\n       <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-bind', function() {\n        var salutationElem = element(by.binding('salutation'));\n        var salutationInput = element(by.model('salutation'));\n        var nameInput = element(by.model('name'));\n\n        expect(salutationElem.getText()).toBe('Hello World!');\n\n        salutationInput.clear();\n        salutationInput.sendKeys('Greetings');\n        nameInput.clear();\n        nameInput.sendKeys('user');\n\n        expect(salutationElem.getText()).toBe('Greetings user!');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22228,
            "ngdoc": "directive",
            "name": "ngBindHtml",
            "description": "Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,\nthe resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.\nTo utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link\nngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}\nin your module's dependencies, you need to include \"angular-sanitize.js\" in your application.\n\nYou may also bypass sanitization for values you know are safe. To do so, bind to\nan explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example\nunder {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.\n\nNote: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you\nwill have an exception (instead of an exploit.)",
            "element": "ANY",
            "params": [
                {
                    "name": "ngBindHtml",
                    "description": "{@link guide/expression Expression} to evaluate.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n\n  <example module=\"bindHtmlExample\" deps=\"angular-sanitize.js\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n       <p ng-bind-html=\"myHTML\"></p>\n      </div>\n    </file>\n\n    <file name=\"script.js\">\n      angular.module('bindHtmlExample', ['ngSanitize'])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.myHTML =\n             'I am an <code>HTML</code>string with ' +\n             '<a href=\"#\">links!</a> and other <em>stuff</em>';\n        }]);\n    </file>\n\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-bind-html', function() {\n        expect(element(by.binding('myHTML')).getText()).toBe(\n            'I am an HTMLstring with links! and other stuff');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22298,
            "ngdoc": "directive",
            "name": "ngChange",
            "description": "Evaluate the given expression when the user changes the input.\nThe expression is evaluated immediately, unlike the JavaScript onchange event\nwhich only triggers at the end of a change (usually, when the user leaves the\nform element or presses the return key).\n\nThe `ngChange` expression is only evaluated when a change in the input value causes\na new value to be committed to the model.\n\nIt will not be evaluated:\n* if the value returned from the `$parsers` transformation pipeline has not changed\n* if the input has continued to be invalid since the model will stay `null`\n* if the model is changed programmatically and not by a change to the input value\n\n\nNote, this directive requires `ngModel` to be present.",
            "element": "input",
            "params": [
                {
                    "name": "ngChange",
                    "description": "{@link guide/expression Expression} to evaluate upon change\nin input value.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n<example name=\"ngChange-directive\" module=\"changeExample\">\n  <file name=\"index.html\">\n    <script>\n      angular.module('changeExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.counter = 0;\n          $scope.change = function() {\n            $scope.counter++;\n          };\n        }]);\n    </script>\n    <div ng-controller=\"ExampleController\">\n      <input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />\n      <input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />\n      <label for=\"ng-change-example2\">Confirmed</label><br />\n      <tt>debug = {{confirmed}}</tt><br/>\n      <tt>counter = {{counter}}</tt><br/>\n    </div>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    var counter = element(by.binding('counter'));\n    var debug = element(by.binding('confirmed'));\n\n    it('should evaluate the expression if changing from view', function() {\n      expect(counter.getText()).toContain('0');\n\n      element(by.id('ng-change-example1')).click();\n\n      expect(counter.getText()).toContain('1');\n      expect(debug.getText()).toContain('true');\n    });\n\n    it('should not evaluate the expression if changing from model', function() {\n      element(by.id('ng-change-example2')).click();\n\n      expect(counter.getText()).toContain('0');\n      expect(debug.getText()).toContain('true');\n    });\n  </file>\n</example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22494,
            "ngdoc": "directive",
            "name": "ngClass",
            "restrict": "AC",
            "description": "The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding\nan expression that represents all classes to be added.\n\nThe directive operates in three different ways, depending on which of three types the expression\nevaluates to:\n\n1. If the expression evaluates to a string, the string should be one or more space-delimited class\nnames.\n\n2. If the expression evaluates to an object, then for each key-value pair of the\nobject with a truthy value the corresponding key is used as a class name.\n\n3. If the expression evaluates to an array, each element of the array should either be a string as in\ntype 1 or an object as in type 2. This means that you can mix strings and objects together in an array\nto give you more control over what CSS classes appear. See the code below for an example of this.\n\n\nThe directive won't add duplicate classes if a particular class was already set.\n\nWhen the expression changes, the previously added classes are removed and only then are the\nnew classes added.",
            "animations": "**add** - happens just before the class is applied to the elements\n\n**remove** - happens just before the class is removed from the element",
            "element": "ANY",
            "params": [
                {
                    "name": "ngClass",
                    "description": "{@link guide/expression Expression} to eval. The result\n  of the evaluation can be a string representing space delimited class\n  names, an array, or a map of class names to boolean values. In the case of a map, the\n  names of the properties whose values are truthy will be added as css classes to the\n  element.",
                    "type": "Expression"
                }
            ],
            "example": [
                " Example that demonstrates basic bindings via ngClass directive.\n  <example>\n    <file name=\"index.html\">\n      <p ng-class=\"{strike: deleted, bold: important, 'has-error': error}\">Map Syntax Example</p>\n      <label>\n         <input type=\"checkbox\" ng-model=\"deleted\">\n         deleted (apply \"strike\" class)\n      </label><br>\n      <label>\n         <input type=\"checkbox\" ng-model=\"important\">\n         important (apply \"bold\" class)\n      </label><br>\n      <label>\n         <input type=\"checkbox\" ng-model=\"error\">\n         error (apply \"has-error\" class)\n      </label>\n      <hr>\n      <p ng-class=\"style\">Using String Syntax</p>\n      <input type=\"text\" ng-model=\"style\"\n             placeholder=\"Type: bold strike red\" aria-label=\"Type: bold strike red\">\n      <hr>\n      <p ng-class=\"[style1, style2, style3]\">Using Array Syntax</p>\n      <input ng-model=\"style1\"\n             placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red\"><br>\n      <input ng-model=\"style2\"\n             placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red 2\"><br>\n      <input ng-model=\"style3\"\n             placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red 3\"><br>\n      <hr>\n      <p ng-class=\"[style4, {orange: warning}]\">Using Array and Map Syntax</p>\n      <input ng-model=\"style4\" placeholder=\"Type: bold, strike\" aria-label=\"Type: bold, strike\"><br>\n      <label><input type=\"checkbox\" ng-model=\"warning\"> warning (apply \"orange\" class)</label>\n    </file>\n    <file name=\"style.css\">\n      .strike {\n          text-decoration: line-through;\n      }\n      .bold {\n          font-weight: bold;\n      }\n      .red {\n          color: red;\n      }\n      .has-error {\n          color: red;\n          background-color: yellow;\n      }\n      .orange {\n          color: orange;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var ps = element.all(by.css('p'));\n\n      it('should let you toggle the class', function() {\n\n        expect(ps.first().getAttribute('class')).not.toMatch(/bold/);\n        expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);\n\n        element(by.model('important')).click();\n        expect(ps.first().getAttribute('class')).toMatch(/bold/);\n\n        element(by.model('error')).click();\n        expect(ps.first().getAttribute('class')).toMatch(/has-error/);\n      });\n\n      it('should let you toggle string example', function() {\n        expect(ps.get(1).getAttribute('class')).toBe('');\n        element(by.model('style')).clear();\n        element(by.model('style')).sendKeys('red');\n        expect(ps.get(1).getAttribute('class')).toBe('red');\n      });\n\n      it('array example should have 3 classes', function() {\n        expect(ps.get(2).getAttribute('class')).toBe('');\n        element(by.model('style1')).sendKeys('bold');\n        element(by.model('style2')).sendKeys('strike');\n        element(by.model('style3')).sendKeys('red');\n        expect(ps.get(2).getAttribute('class')).toBe('bold strike red');\n      });\n\n      it('array with map example should have 2 classes', function() {\n        expect(ps.last().getAttribute('class')).toBe('');\n        element(by.model('style4')).sendKeys('bold');\n        element(by.model('warning')).click();\n        expect(ps.last().getAttribute('class')).toBe('bold orange');\n      });\n    </file>\n  </example>\n\n  ## Animations\n\n  The example below demonstrates how to perform animations using ngClass.\n\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n     <input id=\"setbtn\" type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n     <input id=\"clearbtn\" type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n     <br>\n     <span class=\"base-class\" ng-class=\"myVar\">Sample Text</span>\n    </file>\n    <file name=\"style.css\">\n      .base-class {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n      }\n\n      .base-class.my-class {\n        color: red;\n        font-size:3em;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-class', function() {\n        expect(element(by.css('.base-class')).getAttribute('class')).not.\n          toMatch(/my-class/);\n\n        element(by.id('setbtn')).click();\n\n        expect(element(by.css('.base-class')).getAttribute('class')).\n          toMatch(/my-class/);\n\n        element(by.id('clearbtn')).click();\n\n        expect(element(by.css('.base-class')).getAttribute('class')).not.\n          toMatch(/my-class/);\n      });\n    </file>\n  </example>\n\n\n  ## ngClass and pre-existing CSS3 Transitions/Animations\n  The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.\n  Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder\n  any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure\n  to view the step by step details of {@link $animate#addClass $animate.addClass} and\n  {@link $animate#removeClass $animate.removeClass}."
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22674,
            "ngdoc": "directive",
            "name": "ngClassOdd",
            "restrict": "AC",
            "description": "The `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngClassOdd",
                    "description": "{@link guide/expression Expression} to eval. The result\n  of the evaluation can be a string representing space delimited class names or an array.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n       <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n         <li ng-repeat=\"name in names\">\n          <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n            {{name}}\n          </span>\n         </li>\n       </ol>\n    </file>\n    <file name=\"style.css\">\n      .odd {\n        color: red;\n      }\n      .even {\n        color: blue;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-class-odd and ng-class-even', function() {\n        expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n          toMatch(/odd/);\n        expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n          toMatch(/even/);\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22722,
            "ngdoc": "directive",
            "name": "ngClassEven",
            "restrict": "AC",
            "description": "The `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngClassEven",
                    "description": "{@link guide/expression Expression} to eval. The\n  result of the evaluation can be a string representing space delimited class names or an array.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n       <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n         <li ng-repeat=\"name in names\">\n          <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n            {{name}} &nbsp; &nbsp; &nbsp;\n          </span>\n         </li>\n       </ol>\n    </file>\n    <file name=\"style.css\">\n      .odd {\n        color: red;\n      }\n      .even {\n        color: blue;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-class-odd and ng-class-even', function() {\n        expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n          toMatch(/odd/);\n        expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n          toMatch(/even/);\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22770,
            "ngdoc": "directive",
            "name": "ngCloak",
            "restrict": "AC",
            "description": "The `ngCloak` directive is used to prevent the Angular html template from being briefly\ndisplayed by the browser in its raw (uncompiled) form while your application is loading. Use this\ndirective to avoid the undesirable flicker effect caused by the html template display.\n\nThe directive can be applied to the `<body>` element, but the preferred usage is to apply\nmultiple `ngCloak` directives to small portions of the page to permit progressive rendering\nof the browser view.\n\n`ngCloak` works in cooperation with the following css rule embedded within `angular.js` and\n`angular.min.js`.\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```css\n[ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n  display: none !important;\n}\n```\n\nWhen this css rule is loaded by the browser, all html elements (including their children) that\nare tagged with the `ngCloak` directive are hidden. When Angular encounters this directive\nduring the compilation of the template it deletes the `ngCloak` element attribute, making\nthe compiled element visible.\n\nFor the best result, the `angular.js` script must be loaded in the head section of the html\ndocument; alternatively, the css rule above must be included in the external stylesheet of the\napplication.",
            "element": "ANY",
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n       <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>\n       <div id=\"template2\" class=\"ng-cloak\">{{ 'world' }}</div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should remove the template directive and css class', function() {\n        expect($('#template1').getAttribute('ng-cloak')).\n          toBeNull();\n        expect($('#template2').getAttribute('ng-cloak')).\n          toBeNull();\n      });\n    </file>\n  </example>\n"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 22829,
            "ngdoc": "directive",
            "name": "ngController",
            "description": "The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular\nsupports the principles behind the Model-View-Controller design pattern.\n\nMVC components in angular:\n\n* Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties\n  are accessed through bindings.\n* View — The template (HTML with data bindings) that is rendered into the View.\n* Controller — The `ngController` directive specifies a Controller class; the class contains business\n  logic behind the application to decorate the scope with functions and values\n\nNote that you can also attach controllers to the DOM by declaring it in a route definition\nvia the {@link ngRoute.$route $route} service. A common mistake is to declare the controller\nagain using `ng-controller` in the template itself.  This will cause the controller to be attached\nand executed twice.",
            "element": "ANY",
            "scope": "",
            "priority": "500",
            "params": [
                {
                    "name": "ngController",
                    "description": "Name of a constructor function registered with the current\n{@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}\nthat on the current scope evaluates to a constructor function.\n\nThe controller instance can be published into a scope property by specifying\n`ng-controller=\"as propertyName\"`.\n\nIf the current `$controllerProvider` is configured to use globals (via\n{@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may\nalso be the name of a globally accessible constructor function (not recommended).",
                    "type": "Expression"
                }
            ],
            "example": [
                "\nHere is a simple form for editing user contact information. Adding, removing, clearing, and\ngreeting are methods declared on the controller (see source tab). These methods can\neasily be called from the angular markup. Any changes to the data are automatically reflected\nin the View without the need for a manual update.\n\nTwo different declaration styles are included below:\n\n* one binds methods and properties directly onto the controller using `this`:\n`ng-controller=\"SettingsController1 as settings\"`\n* one injects `$scope` into the controller:\n`ng-controller=\"SettingsController2\"`\n\nThe second option is more common in the Angular community, and is generally used in boilerplates\nand in this guide. However, there are advantages to binding properties directly to the controller\nand avoiding scope.\n\n* Using `controller as` makes it obvious which controller you are accessing in the template when\nmultiple controllers apply to an element.\n* If you are writing your controllers as classes you have easier access to the properties and\nmethods, which will appear on the scope, from inside the controller code.\n* Since there is always a `.` in the bindings, you don't have to worry about prototypal\ninheritance masking primitives.\n\nThis example demonstrates the `controller as` syntax.\n\n<example name=\"ngControllerAs\" module=\"controllerAsExample\">\n  <file name=\"index.html\">\n   <div id=\"ctrl-as-exmpl\" ng-controller=\"SettingsController1 as settings\">\n     <label>Name: <input type=\"text\" ng-model=\"settings.name\"/></label>\n     <button ng-click=\"settings.greet()\">greet</button><br/>\n     Contact:\n     <ul>\n       <li ng-repeat=\"contact in settings.contacts\">\n         <select ng-model=\"contact.type\" aria-label=\"Contact method\" id=\"select_{{$index}}\">\n            <option>phone</option>\n            <option>email</option>\n         </select>\n         <input type=\"text\" ng-model=\"contact.value\" aria-labelledby=\"select_{{$index}}\" />\n         <button ng-click=\"settings.clearContact(contact)\">clear</button>\n         <button ng-click=\"settings.removeContact(contact)\" aria-label=\"Remove\">X</button>\n       </li>\n       <li><button ng-click=\"settings.addContact()\">add</button></li>\n    </ul>\n   </div>\n  </file>\n  <file name=\"app.js\">\n   angular.module('controllerAsExample', [])\n     .controller('SettingsController1', SettingsController1);\n\n   function SettingsController1() {\n     this.name = \"John Smith\";\n     this.contacts = [\n       {type: 'phone', value: '408 555 1212'},\n       {type: 'email', value: 'john.smith@example.org'} ];\n   }\n\n   SettingsController1.prototype.greet = function() {\n     alert(this.name);\n   };\n\n   SettingsController1.prototype.addContact = function() {\n     this.contacts.push({type: 'email', value: 'yourname@example.org'});\n   };\n\n   SettingsController1.prototype.removeContact = function(contactToRemove) {\n    var index = this.contacts.indexOf(contactToRemove);\n     this.contacts.splice(index, 1);\n   };\n\n   SettingsController1.prototype.clearContact = function(contact) {\n     contact.type = 'phone';\n     contact.value = '';\n   };\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should check controller as', function() {\n      var container = element(by.id('ctrl-as-exmpl'));\n        expect(container.element(by.model('settings.name'))\n          .getAttribute('value')).toBe('John Smith');\n\n      var firstRepeat =\n          container.element(by.repeater('contact in settings.contacts').row(0));\n      var secondRepeat =\n          container.element(by.repeater('contact in settings.contacts').row(1));\n\n      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n          .toBe('408 555 1212');\n\n      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))\n          .toBe('john.smith@example.org');\n\n      firstRepeat.element(by.buttonText('clear')).click();\n\n      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n          .toBe('');\n\n      container.element(by.buttonText('add')).click();\n\n      expect(container.element(by.repeater('contact in settings.contacts').row(2))\n          .element(by.model('contact.value'))\n          .getAttribute('value'))\n          .toBe('yourname@example.org');\n    });\n  </file>\n</example>\n\nThis example demonstrates the \"attach to `$scope`\" style of controller.\n\n<example name=\"ngController\" module=\"controllerExample\">\n <file name=\"index.html\">\n  <div id=\"ctrl-exmpl\" ng-controller=\"SettingsController2\">\n    <label>Name: <input type=\"text\" ng-model=\"name\"/></label>\n    <button ng-click=\"greet()\">greet</button><br/>\n    Contact:\n    <ul>\n      <li ng-repeat=\"contact in contacts\">\n        <select ng-model=\"contact.type\" id=\"select_{{$index}}\">\n           <option>phone</option>\n           <option>email</option>\n        </select>\n        <input type=\"text\" ng-model=\"contact.value\" aria-labelledby=\"select_{{$index}}\" />\n        <button ng-click=\"clearContact(contact)\">clear</button>\n        <button ng-click=\"removeContact(contact)\">X</button>\n      </li>\n      <li>[ <button ng-click=\"addContact()\">add</button> ]</li>\n   </ul>\n  </div>\n </file>\n <file name=\"app.js\">\n  angular.module('controllerExample', [])\n    .controller('SettingsController2', ['$scope', SettingsController2]);\n\n  function SettingsController2($scope) {\n    $scope.name = \"John Smith\";\n    $scope.contacts = [\n      {type:'phone', value:'408 555 1212'},\n      {type:'email', value:'john.smith@example.org'} ];\n\n    $scope.greet = function() {\n      alert($scope.name);\n    };\n\n    $scope.addContact = function() {\n      $scope.contacts.push({type:'email', value:'yourname@example.org'});\n    };\n\n    $scope.removeContact = function(contactToRemove) {\n      var index = $scope.contacts.indexOf(contactToRemove);\n      $scope.contacts.splice(index, 1);\n    };\n\n    $scope.clearContact = function(contact) {\n      contact.type = 'phone';\n      contact.value = '';\n    };\n  }\n </file>\n <file name=\"protractor.js\" type=\"protractor\">\n   it('should check controller', function() {\n     var container = element(by.id('ctrl-exmpl'));\n\n     expect(container.element(by.model('name'))\n         .getAttribute('value')).toBe('John Smith');\n\n     var firstRepeat =\n         container.element(by.repeater('contact in contacts').row(0));\n     var secondRepeat =\n         container.element(by.repeater('contact in contacts').row(1));\n\n     expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n         .toBe('408 555 1212');\n     expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))\n         .toBe('john.smith@example.org');\n\n     firstRepeat.element(by.buttonText('clear')).click();\n\n     expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n         .toBe('');\n\n     container.element(by.buttonText('add')).click();\n\n     expect(container.element(by.repeater('contact in contacts').row(2))\n         .element(by.model('contact.value'))\n         .getAttribute('value'))\n         .toBe('yourname@example.org');\n   });\n </file>\n</example>\n"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23064,
            "ngdoc": "directive",
            "name": "ngCsp",
            "element": "html",
            "description": "Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n\nThis is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.\n\nCSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).\nFor Angular to be CSP compatible there are only two things that we need to do differently:\n\n- don't use `Function` constructor to generate optimized value getters\n- don't inject custom stylesheet into the document\n\nAngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`\ndirective will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will\nevaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will\nbe raised.\n\nCSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically\nincludes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).\nTo make those directives work in CSP mode, include the `angular-csp.css` manually.\n\nAngular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This\nautodetection however triggers a CSP error to be logged in the console:\n\n```\nRefused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of\nscript in the following Content Security Policy directive: \"default-src 'self'\". Note that\n'script-src' was not explicitly set, so 'default-src' is used as a fallback.\n```\n\nThis error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`\ndirective on the root element of the application or on the `angular.js` script tag, whichever\nappears first in the html document.\n\n*Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*",
            "example": [
                "\nThis example shows how to apply the `ngCsp` directive to the `html` tag.\n  ```html\n    <!doctype html>\n    <html ng-app ng-csp>\n    ...\n    ...\n    </html>\n  ```",
                "\n     // Note: the suffix `.csp` in the example name triggers\n     // csp mode in our http server!\n     <example name=\"example.csp\" module=\"cspExample\" ng-csp=\"true\">\n       <file name=\"index.html\">\n         <div ng-controller=\"MainController as ctrl\">\n           <div>\n             <button ng-click=\"ctrl.inc()\" id=\"inc\">Increment</button>\n             <span id=\"counter\">\n               {{ctrl.counter}}\n             </span>\n           </div>\n\n           <div>\n             <button ng-click=\"ctrl.evil()\" id=\"evil\">Evil</button>\n             <span id=\"evilError\">\n               {{ctrl.evilError}}\n             </span>\n           </div>\n         </div>\n       </file>\n       <file name=\"script.js\">\n          angular.module('cspExample', [])\n            .controller('MainController', function() {\n               this.counter = 0;\n               this.inc = function() {\n                 this.counter++;\n               };\n               this.evil = function() {\n                 // jshint evil:true\n                 try {\n                   eval('1+2');\n                 } catch (e) {\n                   this.evilError = e.message;\n                 }\n               };\n             });\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var util, webdriver;\n\n         var incBtn = element(by.id('inc'));\n         var counter = element(by.id('counter'));\n         var evilBtn = element(by.id('evil'));\n         var evilError = element(by.id('evilError'));\n\n         function getAndClearSevereErrors() {\n           return browser.manage().logs().get('browser').then(function(browserLog) {\n             return browserLog.filter(function(logEntry) {\n               return logEntry.level.value > webdriver.logging.Level.WARNING.value;\n             });\n           });\n         }\n\n         function clearErrors() {\n           getAndClearSevereErrors();\n         }\n\n         function expectNoErrors() {\n           getAndClearSevereErrors().then(function(filteredLog) {\n             expect(filteredLog.length).toEqual(0);\n             if (filteredLog.length) {\n               console.log('browser console errors: ' + util.inspect(filteredLog));\n             }\n           });\n         }\n\n         function expectError(regex) {\n           getAndClearSevereErrors().then(function(filteredLog) {\n             var found = false;\n             filteredLog.forEach(function(log) {\n               if (log.message.match(regex)) {\n                 found = true;\n               }\n             });\n             if (!found) {\n               throw new Error('expected an error that matches ' + regex);\n             }\n           });\n         }\n\n         beforeEach(function() {\n           util = require('util');\n           webdriver = require('protractor/node_modules/selenium-webdriver');\n         });\n\n         // For now, we only test on Chrome,\n         // as Safari does not load the page with Protractor's injected scripts,\n         // and Firefox webdriver always disables content security policy (#6358)\n         if (browser.params.browser !== 'chrome') {\n           return;\n         }\n\n         it('should not report errors when the page is loaded', function() {\n           // clear errors so we are not dependent on previous tests\n           clearErrors();\n           // Need to reload the page as the page is already loaded when\n           // we come here\n           browser.driver.getCurrentUrl().then(function(url) {\n             browser.get(url);\n           });\n           expectNoErrors();\n         });\n\n         it('should evaluate expressions', function() {\n           expect(counter.getText()).toEqual('0');\n           incBtn.click();\n           expect(counter.getText()).toEqual('1');\n           expectNoErrors();\n         });\n\n         it('should throw and report an error when using \"eval\"', function() {\n           evilBtn.click();\n           expect(evilError.getText()).toMatch(/Content Security Policy/);\n           expectError(/Content Security Policy/);\n         });\n       </file>\n     </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23237,
            "ngdoc": "directive",
            "name": "ngClick",
            "description": "The ngClick directive allows you to specify custom behavior when\nan element is clicked.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngClick",
                    "description": "{@link guide/expression Expression} to evaluate upon\nclick. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n       Increment\n     </button>\n     <span>\n       count: {{count}}\n     </span>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-click', function() {\n        expect(element(by.binding('count')).getText()).toMatch('0');\n        element(by.css('button')).click();\n        expect(element(by.binding('count')).getText()).toMatch('1');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23313,
            "ngdoc": "directive",
            "name": "ngDblclick",
            "description": "The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngDblclick",
                    "description": "{@link guide/expression Expression} to evaluate upon\na dblclick. (The Event object is available as `$event`)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-dblclick=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (on double click)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23337,
            "ngdoc": "directive",
            "name": "ngMousedown",
            "description": "The ngMousedown directive allows you to specify custom behavior on mousedown event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMousedown",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmousedown. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mousedown=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (on mouse down)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23361,
            "ngdoc": "directive",
            "name": "ngMouseup",
            "description": "Specify custom behavior on mouseup event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMouseup",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmouseup. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mouseup=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (on mouse up)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23384,
            "ngdoc": "directive",
            "name": "ngMouseover",
            "description": "Specify custom behavior on mouseover event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMouseover",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmouseover. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mouseover=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (when mouse is over)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23408,
            "ngdoc": "directive",
            "name": "ngMouseenter",
            "description": "Specify custom behavior on mouseenter event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMouseenter",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmouseenter. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mouseenter=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (when mouse enters)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23432,
            "ngdoc": "directive",
            "name": "ngMouseleave",
            "description": "Specify custom behavior on mouseleave event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMouseleave",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmouseleave. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mouseleave=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (when mouse leaves)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23456,
            "ngdoc": "directive",
            "name": "ngMousemove",
            "description": "Specify custom behavior on mousemove event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMousemove",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmousemove. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mousemove=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (when mouse moves)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23480,
            "ngdoc": "directive",
            "name": "ngKeydown",
            "description": "Specify custom behavior on keydown event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngKeydown",
                    "description": "{@link guide/expression Expression} to evaluate upon\nkeydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-keydown=\"count = count + 1\" ng-init=\"count=0\">\n     key down count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23502,
            "ngdoc": "directive",
            "name": "ngKeyup",
            "description": "Specify custom behavior on keyup event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngKeyup",
                    "description": "{@link guide/expression Expression} to evaluate upon\nkeyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <p>Typing in the input box below updates the key count</p>\n      <input ng-keyup=\"count = count + 1\" ng-init=\"count=0\"> key up count: {{count}}\n\n      <p>Typing in the input box below updates the keycode</p>\n      <input ng-keyup=\"event=$event\">\n      <p>event keyCode: {{ event.keyCode }}</p>\n      <p>event altKey: {{ event.altKey }}</p>\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23529,
            "ngdoc": "directive",
            "name": "ngKeypress",
            "description": "Specify custom behavior on keypress event.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngKeypress",
                    "description": "{@link guide/expression Expression} to evaluate upon\nkeypress. ({@link guide/expression#-event- Event object is available as `$event`}\nand can be interrogated for keyCode, altKey, etc.)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-keypress=\"count = count + 1\" ng-init=\"count=0\">\n     key press count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23551,
            "ngdoc": "directive",
            "name": "ngSubmit",
            "description": "Enables binding angular expressions to onsubmit events.\n\nAdditionally it prevents the default action (which for form means sending the request to the\nserver and reloading the current page), but only if the form does not contain `action`,\n`data-action`, or `x-action` attributes.\n\n<div class=\"alert alert-warning\">\n**Warning:** Be careful not to cause \"double-submission\" by using both the `ngClick` and\n`ngSubmit` handlers together. See the\n{@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}\nfor a detailed discussion of when `ngSubmit` may be triggered.\n</div>",
            "element": "form",
            "priority": "0",
            "params": [
                {
                    "name": "ngSubmit",
                    "description": "{@link guide/expression Expression} to eval.\n({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example module=\"submitExample\">\n    <file name=\"index.html\">\n     <script>\n       angular.module('submitExample', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.list = [];\n           $scope.text = 'hello';\n           $scope.submit = function() {\n             if ($scope.text) {\n               $scope.list.push(this.text);\n               $scope.text = '';\n             }\n           };\n         }]);\n     </script>\n     <form ng-submit=\"submit()\" ng-controller=\"ExampleController\">\n       Enter text and hit enter:\n       <input type=\"text\" ng-model=\"text\" name=\"text\" />\n       <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n       <pre>list={{list}}</pre>\n     </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-submit', function() {\n        expect(element(by.binding('list')).getText()).toBe('list=[]');\n        element(by.css('#submit')).click();\n        expect(element(by.binding('list')).getText()).toContain('hello');\n        expect(element(by.model('text')).getAttribute('value')).toBe('');\n      });\n      it('should ignore empty strings', function() {\n        expect(element(by.binding('list')).getText()).toBe('list=[]');\n        element(by.css('#submit')).click();\n        element(by.css('#submit')).click();\n        expect(element(by.binding('list')).getText()).toContain('hello');\n       });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23614,
            "ngdoc": "directive",
            "name": "ngFocus",
            "description": "Specify custom behavior on focus event.\n\nNote: As the `focus` event is executed synchronously when calling `input.focus()`\nAngularJS executes the expression using `scope.$evalAsync` if the event is fired\nduring an `$apply` to ensure a consistent state.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngFocus",
                    "description": "{@link guide/expression Expression} to evaluate upon\nfocus. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\nSee {@link ng.directive:ngClick ngClick}"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23634,
            "ngdoc": "directive",
            "name": "ngBlur",
            "description": "Specify custom behavior on blur event.\n\nA [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when\nan element has lost focus.\n\nNote: As the `blur` event is executed synchronously also during DOM manipulations\n(e.g. removing a focussed input),\nAngularJS executes the expression using `scope.$evalAsync` if the event is fired\nduring an `$apply` to ensure a consistent state.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngBlur",
                    "description": "{@link guide/expression Expression} to evaluate upon\nblur. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\nSee {@link ng.directive:ngClick ngClick}"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23658,
            "ngdoc": "directive",
            "name": "ngCopy",
            "description": "Specify custom behavior on copy event.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngCopy",
                    "description": "{@link guide/expression Expression} to evaluate upon\ncopy. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-copy=\"copied=true\" ng-init=\"copied=false; value='copy me'\" ng-model=\"value\">\n     copied: {{copied}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23679,
            "ngdoc": "directive",
            "name": "ngCut",
            "description": "Specify custom behavior on cut event.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngCut",
                    "description": "{@link guide/expression Expression} to evaluate upon\ncut. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-cut=\"cut=true\" ng-init=\"cut=false; value='cut me'\" ng-model=\"value\">\n     cut: {{cut}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23700,
            "ngdoc": "directive",
            "name": "ngPaste",
            "description": "Specify custom behavior on paste event.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngPaste",
                    "description": "{@link guide/expression Expression} to evaluate upon\npaste. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-paste=\"paste=true\" ng-init=\"paste=false\" placeholder='paste here'>\n     pasted: {{paste}}\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23721,
            "ngdoc": "directive",
            "name": "ngIf",
            "restrict": "A",
            "multielement": "",
            "description": "The `ngIf` directive removes or recreates a portion of the DOM tree based on an\n{expression}. If the expression assigned to `ngIf` evaluates to a false\nvalue then the element is removed from the DOM, otherwise a clone of the\nelement is reinserted into the DOM.\n\n`ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the\nelement in the DOM rather than changing its visibility via the `display` css property.  A common\ncase when this difference is significant is when using css selectors that rely on an element's\nposition within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.\n\nNote that when an element is removed using `ngIf` its scope is destroyed and a new scope\nis created when the element is restored.  The scope created within `ngIf` inherits from\nits parent scope using\n[prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).\nAn important implication of this is if `ngModel` is used within `ngIf` to bind to\na javascript primitive defined in the parent scope. In this case any modifications made to the\nvariable within the child scope will override (hide) the value in the parent scope.\n\nAlso, `ngIf` recreates elements using their compiled state. An example of this behavior\nis if an element's class attribute is directly modified after it's compiled, using something like\njQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element\nthe added class will be lost because the original compiled state is used to regenerate the element.\n\nAdditionally, you can provide animations via the `ngAnimate` module to animate the `enter`\nand `leave` effects.",
            "animations": "enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container\nleave - happens just before the `ngIf` contents are removed from the DOM",
            "element": "ANY",
            "scope": "",
            "priority": "600",
            "params": [
                {
                    "name": "ngIf",
                    "description": "If the {@link guide/expression expression} is falsy then\n    the element is removed from the DOM tree. If it is truthy a copy of the compiled\n    element is added to the DOM tree.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     <label>Click me: <input type=\"checkbox\" ng-model=\"checked\" ng-init=\"checked=true\" /></label><br/>\n     Show when checked:\n     <span ng-if=\"checked\" class=\"animate-if\">\n       This is removed when the checkbox is unchecked.\n     </span>\n   </file>\n   <file name=\"animations.css\">\n     .animate-if {\n       background:white;\n       border:1px solid black;\n       padding:10px;\n     }\n\n     .animate-if.ng-enter, .animate-if.ng-leave {\n       -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n     }\n\n     .animate-if.ng-enter,\n     .animate-if.ng-leave.ng-leave-active {\n       opacity:0;\n     }\n\n     .animate-if.ng-leave,\n     .animate-if.ng-enter.ng-enter-active {\n       opacity:1;\n     }\n   </file>\n </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23846,
            "ngdoc": "directive",
            "name": "ngInclude",
            "restrict": "ECA",
            "description": "Fetches, compiles and includes an external HTML fragment.\n\nBy default, the template URL is restricted to the same domain and protocol as the\napplication document. This is done by calling {@link $sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols\nyou may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or\n{@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link\nng.$sce Strict Contextual Escaping}.\n\nIn addition, the browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy may further restrict whether the template is successfully loaded.\nFor example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`\naccess on some browsers.",
            "animations": "enter - animation is used to bring new content into the browser.\nleave - animation is used to animate existing content away.\n\nThe enter and leave animation occur concurrently.",
            "scope": "",
            "priority": "400",
            "params": [
                {
                    "name": "ngInclude|src",
                    "description": "angular expression evaluating to URL. If the source is a string constant,\n                make sure you wrap it in **single** quotes, e.g. `src=\"'myPartialTemplate.html'\"`.",
                    "type": "String"
                },
                {
                    "name": "onload",
                    "description": "Expression to evaluate when a new partial is loaded.",
                    "type": "String="
                },
                {
                    "name": "autoscroll",
                    "description": "Whether `ngInclude` should call {@link ng.$anchorScroll\n                 $anchorScroll} to scroll the viewport after the content is loaded.\n\n                 - If the attribute is not set, disable scrolling.\n                 - If the attribute is set without value, enable scrolling.\n                 - Otherwise enable scrolling only if the expression evaluates to truthy value.",
                    "type": "String="
                }
            ],
            "example": [
                "\n <example module=\"includeExample\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n    <div ng-controller=\"ExampleController\">\n      <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n       <option value=\"\">(blank)</option>\n      </select>\n      url of the template: <code>{{template.url}}</code>\n      <hr/>\n      <div class=\"slide-animate-container\">\n        <div class=\"slide-animate\" ng-include=\"template.url\"></div>\n      </div>\n    </div>\n   </file>\n   <file name=\"script.js\">\n     angular.module('includeExample', ['ngAnimate'])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.templates =\n           [ { name: 'template1.html', url: 'template1.html'},\n             { name: 'template2.html', url: 'template2.html'} ];\n         $scope.template = $scope.templates[0];\n       }]);\n    </file>\n   <file name=\"template1.html\">\n     Content of template1.html\n   </file>\n   <file name=\"template2.html\">\n     Content of template2.html\n   </file>\n   <file name=\"animations.css\">\n     .slide-animate-container {\n       position:relative;\n       background:white;\n       border:1px solid black;\n       height:40px;\n       overflow:hidden;\n     }\n\n     .slide-animate {\n       padding:10px;\n     }\n\n     .slide-animate.ng-enter, .slide-animate.ng-leave {\n       -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n       position:absolute;\n       top:0;\n       left:0;\n       right:0;\n       bottom:0;\n       display:block;\n       padding:10px;\n     }\n\n     .slide-animate.ng-enter {\n       top:-50px;\n     }\n     .slide-animate.ng-enter.ng-enter-active {\n       top:0;\n     }\n\n     .slide-animate.ng-leave {\n       top:0;\n     }\n     .slide-animate.ng-leave.ng-leave-active {\n       top:50px;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var templateSelect = element(by.model('template'));\n     var includeElem = element(by.css('[ng-include]'));\n\n     it('should load template1.html', function() {\n       expect(includeElem.getText()).toMatch(/Content of template1.html/);\n     });\n\n     it('should load template2.html', function() {\n       if (browser.params.browser == 'firefox') {\n         // Firefox can't handle using selects\n         // See https://github.com/angular/protractor/issues/480\n         return;\n       }\n       templateSelect.click();\n       templateSelect.all(by.css('option')).get(2).click();\n       expect(includeElem.getText()).toMatch(/Content of template2.html/);\n     });\n\n     it('should change to blank', function() {\n       if (browser.params.browser == 'firefox') {\n         // Firefox can't handle using selects\n         return;\n       }\n       templateSelect.click();\n       templateSelect.all(by.css('option')).get(0).click();\n       expect(includeElem.isPresent()).toBe(false);\n     });\n   </file>\n </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 23990,
            "ngdoc": "event",
            "name": "ngInclude#$includeContentRequested",
            "eventtype": "emit on the scope ngInclude was declared in",
            "description": "Emitted every time the ngInclude content is requested.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "URL of content to load.",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24002,
            "ngdoc": "event",
            "name": "ngInclude#$includeContentLoaded",
            "eventtype": "emit on the current ngInclude scope",
            "description": "Emitted every time the ngInclude content is reloaded.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "URL of content to load.",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24014,
            "ngdoc": "event",
            "name": "ngInclude#$includeContentError",
            "eventtype": "emit on the scope ngInclude was declared in",
            "description": "Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "URL of content to load.",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24140,
            "ngdoc": "directive",
            "name": "ngInit",
            "restrict": "AC",
            "description": "The `ngInit` directive allows you to evaluate an expression in the\ncurrent scope.\n\n<div class=\"alert alert-danger\">\nThe only appropriate use of `ngInit` is for aliasing special properties of\n{@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you\nshould use {@link guide/controller controllers} rather than `ngInit`\nto initialize values on a scope.\n</div>\n<div class=\"alert alert-warning\">\n**Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make\nsure you have parenthesis for correct precedence:\n<pre class=\"prettyprint\">\n`<div ng-init=\"test1 = (data | orderBy:'name')\"></div>`\n</pre>\n</div>",
            "priority": "450",
            "element": "ANY",
            "params": [
                {
                    "name": "ngInit",
                    "description": "{@link guide/expression Expression} to eval.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example module=\"initExample\">\n    <file name=\"index.html\">\n  <script>\n    angular.module('initExample', [])\n      .controller('ExampleController', ['$scope', function($scope) {\n        $scope.list = [['a', 'b'], ['c', 'd']];\n      }]);\n  </script>\n  <div ng-controller=\"ExampleController\">\n    <div ng-repeat=\"innerList in list\" ng-init=\"outerIndex = $index\">\n      <div ng-repeat=\"value in innerList\" ng-init=\"innerIndex = $index\">\n         <span class=\"example-init\">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>\n      </div>\n    </div>\n  </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should alias index positions', function() {\n        var elements = element.all(by.css('.example-init'));\n        expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');\n        expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');\n        expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');\n        expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24207,
            "ngdoc": "directive",
            "name": "ngList",
            "description": "Text input that converts between a delimited string and an array of strings. The default\ndelimiter is a comma followed by a space - equivalent to `ng-list=\", \"`. You can specify a custom\ndelimiter as the value of the `ngList` attribute - for example, `ng-list=\" | \"`.\n\nThe behaviour of the directive is affected by the use of the `ngTrim` attribute.\n* If `ngTrim` is set to `\"false\"` then whitespace around both the separator and each\n  list item is respected. This implies that the user of the directive is responsible for\n  dealing with whitespace but also allows you to use whitespace as a delimiter, such as a\n  tab or newline character.\n* Otherwise whitespace around the delimiter is ignored when splitting (although it is respected\n  when joining the list items back together) and whitespace around each list item is stripped\n  before it is added to the model.\n\n### Example with Validation\n\n<example name=\"ngList-directive\" module=\"listExample\">\n  <file name=\"app.js\">\n     angular.module('listExample', [])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.names = ['morpheus', 'neo', 'trinity'];\n       }]);\n  </file>\n  <file name=\"index.html\">\n   <form name=\"myForm\" ng-controller=\"ExampleController\">\n     <label>List: <input name=\"namesInput\" ng-model=\"names\" ng-list required></label>\n     <span role=\"alert\">\n       <span class=\"error\" ng-show=\"myForm.namesInput.$error.required\">\n       Required!</span>\n     </span>\n     <br>\n     <tt>names = {{names}}</tt><br/>\n     <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n     <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n    </form>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    var listInput = element(by.model('names'));\n    var names = element(by.exactBinding('names'));\n    var valid = element(by.binding('myForm.namesInput.$valid'));\n    var error = element(by.css('span.error'));\n\n    it('should initialize to model', function() {\n      expect(names.getText()).toContain('[\"morpheus\",\"neo\",\"trinity\"]');\n      expect(valid.getText()).toContain('true');\n      expect(error.getCssValue('display')).toBe('none');\n    });\n\n    it('should be invalid if empty', function() {\n      listInput.clear();\n      listInput.sendKeys('');\n\n      expect(names.getText()).toContain('');\n      expect(valid.getText()).toContain('false');\n      expect(error.getCssValue('display')).not.toBe('none');\n    });\n  </file>\n</example>\n\n### Example - splitting on whitespace\n<example name=\"ngList-directive-newlines\">\n  <file name=\"index.html\">\n   <textarea ng-model=\"list\" ng-list=\"&#10;\" ng-trim=\"false\"></textarea>\n   <pre>{{ list | json }}</pre>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it(\"should split the text by newlines\", function() {\n      var listInput = element(by.model('list'));\n      var output = element(by.binding('list | json'));\n      listInput.sendKeys('abc\\ndef\\nghi');\n      expect(output.getText()).toContain('[\\n  \"abc\",\\n  \"def\",\\n  \"ghi\"\\n]');\n    });\n  </file>\n</example>",
            "element": "input",
            "params": [
                {
                    "name": "ngList",
                    "description": "optional delimiter that should be used to split the value.",
                    "type": "String="
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24354,
            "ngdoc": "type",
            "name": "{string} $name The name attribute of the control.",
            "itemtype": "property",
            "type": "String",
            "description": "`NgModelController` provides API for the {@link ngModel `ngModel`} directive.\nThe controller contains services for data-binding, validation, CSS updates, and value formatting\nand parsing. It purposefully does not contain any logic which deals with DOM rendering or\nlistening to DOM events.\nSuch DOM related logic should be provided by other directives which make use of\n`NgModelController` for data-binding to control elements.\nAngular provides this DOM logic for most {@link input `input`} elements.\nAt the end of this page you can find a {@link ngModel.NgModelController#custom-control-example\ncustom control example} that uses `ngModelController` to bind to `contenteditable` elements.",
            "example": [
                "\n### Custom Control Example\nThis example shows how to use `NgModelController` with a custom control to achieve\ndata-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)\ncollaborate together to achieve the desired result.\n\n`contenteditable` is an HTML5 attribute, which tells the browser to let the element\ncontents be edited in place by the user.\n\nWe are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}\nmodule to automatically remove \"bad\" content like inline event listener (e.g. `<span onclick=\"...\">`).\nHowever, as we are using `$sce` the model can still decide to provide unsafe content if it marks\nthat content using the `$sce` service.\n\n<example name=\"NgModelController\" module=\"customControl\" deps=\"angular-sanitize.js\">\n   <file name=\"style.css\">\n     [contenteditable] {\n       border: 1px solid black;\n       background-color: white;\n       min-height: 20px;\n     }\n\n     .ng-invalid {\n       border: 1px solid red;\n     }\n\n   </file>\n   <file name=\"script.js\">\n     angular.module('customControl', ['ngSanitize']).\n       directive('contenteditable', ['$sce', function($sce) {\n         return {\n           restrict: 'A', // only activate on element attribute\n           require: '?ngModel', // get a hold of NgModelController\n           link: function(scope, element, attrs, ngModel) {\n             if (!ngModel) return; // do nothing if no ng-model\n\n             // Specify how UI should be updated\n             ngModel.$render = function() {\n               element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));\n             };\n\n             // Listen for change events to enable binding\n             element.on('blur keyup change', function() {\n               scope.$evalAsync(read);\n             });\n             read(); // initialize\n\n             // Write data to the model\n             function read() {\n               var html = element.html();\n               // When we clear the content editable the browser leaves a <br> behind\n               // If strip-br attribute is provided then we strip this out\n               if ( attrs.stripBr && html == '<br>' ) {\n                 html = '';\n               }\n               ngModel.$setViewValue(html);\n             }\n           }\n         };\n       }]);\n   </file>\n   <file name=\"index.html\">\n     <form name=\"myForm\">\n      <div contenteditable\n           name=\"myWidget\" ng-model=\"userContent\"\n           strip-br=\"true\"\n           required>Change me!</div>\n       <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n      <hr>\n      <textarea ng-model=\"userContent\" aria-label=\"Dynamic textarea\"></textarea>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n   it('should data-bind and become invalid', function() {\n     if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {\n       // SafariDriver can't handle contenteditable\n       // and Firefox driver can't clear contenteditables very well\n       return;\n     }\n     var contentEditable = element(by.css('[contenteditable]'));\n     var content = 'Change me!';\n\n     expect(contentEditable.getText()).toEqual(content);\n\n     contentEditable.clear();\n     contentEditable.sendKeys(protractor.Key.BACK_SPACE);\n     expect(contentEditable.getText()).toEqual('');\n     expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);\n   });\n   </file>\n</example>\n\n"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24608,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$render",
            "description": "Called when the view needs to be updated. It is expected that the user of the ng-model\ndirective will implement this method.\n\nThe `$render()` method is invoked in the following situations:\n\n* `$rollbackViewValue()` is called.  If we are rolling back the view value to the last\n  committed value then `$render()` is called to update the input control.\n* The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and\n  the `$viewValue` are different from last time.\n\nSince `ng-model` does not do a deep watch, `$render()` is only invoked if the values of\n`$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`\nor `$viewValue` are objects (rather than a string or number) then `$render()` will not be\ninvoked if you only change a property on the objects.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24630,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$isEmpty",
            "description": "This is called when we need to determine if the value of an input is empty.\n\nFor instance, the required directive does this to work out if the input has data or not.\n\nThe default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.\n\nYou can override this for input directives whose concept of being empty is different from the\ndefault. The `checkboxInputType` directive does this because in its case a value of `false`\nimplies empty.",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the input to check for emptiness.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "True if `value` is \"empty\".",
                "type": "Boolean"
            },
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24655,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setValidity",
            "description": "Change the validity state, and notify the form.\n\nThis method can be called within $parsers/$formatters or a custom validation implementation.\nHowever, in most cases it should be sufficient to use the `ngModel.$validators` and\n`ngModel.$asyncValidators` collections which will call `$setValidity` automatically.",
            "params": [
                {
                    "name": "validationErrorKey",
                    "description": "Name of the validator. The `validationErrorKey` will be assigned\n       to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`\n       (for unfulfilled `$asyncValidators`), so that it is available for data-binding.\n       The `validationErrorKey` should be in camelCase and will get converted into dash-case\n       for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\n       class and can be bound to as  `{{someForm.someControl.$error.myError}}` .",
                    "type": "String"
                },
                {
                    "name": "isValid",
                    "description": "Whether the current state is valid (true), invalid (false), pending (undefined),\n                         or skipped (null). Pending is used for unfulfilled `$asyncValidators`.\n                         Skipped is used by Angular when validators do not run because of parse errors and\n                         when `$asyncValidators` do not run because any of the `$validators` failed.",
                    "type": "Boolean"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24690,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setPristine",
            "description": "Sets the control to its pristine state.\n\nThis method can be called to remove the `ng-dirty` class and set the control to its pristine\nstate (`ng-pristine` class). A model is considered to be pristine when the control\nhas not been changed from when first compiled.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24708,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setDirty",
            "description": "Sets the control to its dirty state.\n\nThis method can be called to remove the `ng-pristine` class and set the control to its dirty\nstate (`ng-dirty` class). A model is considered to be dirty when the control has been changed\nfrom when first compiled.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24727,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setUntouched",
            "description": "Sets the control to its untouched state.\n\nThis method can be called to remove the `ng-touched` class and set the control to its\nuntouched state (`ng-untouched` class). Upon compilation, a model is set as untouched\nby default, however this function can be used to restore that state if the model has\nalready been touched by the user.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24745,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setTouched",
            "description": "Sets the control to its touched state.\n\nThis method can be called to remove the `ng-untouched` class and set the control to its\ntouched state (`ng-touched` class). A model is considered to be touched when the user has\nfirst focused the control element and then shifted focus away from the control (blur event).",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24762,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$rollbackViewValue",
            "description": "Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,\nwhich may be caused by a pending debounced event or because the input is waiting for a some\nfuture event.\n\nIf you have an input that uses `ng-model-options` to set up debounced events or events such\nas blur you can have a situation where there is a period when the `$viewValue`\nis out of synch with the ngModel's `$modelValue`.\n\nIn this case, you can run into difficulties if you try to update the ngModel's `$modelValue`\nprogrammatically before these debounced/future events have resolved/occurred, because Angular's\ndirty checking mechanism is not able to tell whether the model has actually changed or not.\n\nThe `$rollbackViewValue()` method should be called before programmatically changing the model of an\ninput which may have such events pending. This is important in order to make sure that the\ninput field will be updated with the new model value and any pending operations are cancelled.\n\n<example name=\"ng-model-cancel-update\" module=\"cancel-update-example\">\n  <file name=\"app.js\">\n    angular.module('cancel-update-example', [])\n\n    .controller('CancelUpdateController', ['$scope', function($scope) {\n      $scope.resetWithCancel = function(e) {\n        if (e.keyCode == 27) {\n          $scope.myForm.myInput1.$rollbackViewValue();\n          $scope.myValue = '';\n        }\n      };\n      $scope.resetWithoutCancel = function(e) {\n        if (e.keyCode == 27) {\n          $scope.myValue = '';\n        }\n      };\n    }]);\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"CancelUpdateController\">\n      <p>Try typing something in each input.  See that the model only updates when you\n         blur off the input.\n       </p>\n       <p>Now see what happens if you start typing then press the Escape key</p>\n\n      <form name=\"myForm\" ng-model-options=\"{ updateOn: 'blur' }\">\n        <p id=\"inputDescription1\">With $rollbackViewValue()</p>\n        <input name=\"myInput1\" aria-describedby=\"inputDescription1\" ng-model=\"myValue\"\n               ng-keydown=\"resetWithCancel($event)\"><br/>\n        myValue: \"{{ myValue }}\"\n\n        <p id=\"inputDescription2\">Without $rollbackViewValue()</p>\n        <input name=\"myInput2\" aria-describedby=\"inputDescription2\" ng-model=\"myValue\"\n               ng-keydown=\"resetWithoutCancel($event)\"><br/>\n        myValue: \"{{ myValue }}\"\n      </form>\n    </div>\n  </file>\n</example>",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24829,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$validate",
            "description": "Runs each of the registered validators (first synchronous validators and then\nasynchronous validators).\nIf the validity changes to invalid, the model will be set to `undefined`,\nunless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.\nIf the validity changes to valid, it will set the model to the last available valid\n`$modelValue`, i.e. either the last parsed value or the last value set from the scope.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 24968,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$commitViewValue",
            "description": "Commit a pending update to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. this method is rarely needed as `NgModelController`\nusually handles calling this in response to input events.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 25057,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setViewValue",
            "description": "Update the view value.\n\nThis method should be called when an input directive want to change the view value; typically,\nthis is done from within a DOM event handler.\n\nFor example {@link ng.directive:input input} calls it when the value of the input changes and\n{@link ng.directive:select select} calls it when an option is selected.\n\nIf the new `value` is an object (rather than a string or a number), we should make a copy of the\nobject before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep\nwatch of objects, it only looks for a change of identity. If you only change the property of\nthe object then ngModel will not realise that the object has changed and will not invoke the\n`$parsers` and `$validators` pipelines.\n\nFor this reason, you should not change properties of the copy once it has been passed to\n`$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.\n\nWhen this method is called, the new `value` will be staged for committing through the `$parsers`\nand `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged\nvalue sent directly for processing, finally to be applied to `$modelValue` and then the\n**expression** specified in the `ng-model` attribute.\n\nLastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.\n\nIn case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`\nand the `default` trigger is not listed, all those actions will remain pending until one of the\n`updateOn` events is triggered on the DOM element.\nAll these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}\ndirective is used with a custom debounce for this particular event.\n\nNote that calling this function does not trigger a `$digest`.",
            "params": [
                {
                    "name": "value",
                    "description": "Value from the view.",
                    "type": "String"
                },
                {
                    "name": "trigger",
                    "description": "Event that triggered the update.",
                    "type": "String"
                }
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 25174,
            "ngdoc": "directive",
            "name": "ngModel",
            "element": "input",
            "priority": "1",
            "description": "The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a\nproperty on the scope using {@link ngModel.NgModelController NgModelController},\nwhich is created and exposed by this directive.\n\n`ngModel` is responsible for:\n\n- Binding the view into the model, which other directives such as `input`, `textarea` or `select`\n  require.\n- Providing validation behavior (i.e. required, number, email, url).\n- Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).\n- Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.\n- Registering the control with its parent {@link ng.directive:form form}.\n\nNote: `ngModel` will try to bind to the property given by evaluating the expression on the\ncurrent scope. If the property doesn't already exist on this scope, it will be created\nimplicitly and added to the scope.\n\nFor best practices on using `ngModel`, see:\n\n - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)\n\nFor basic examples, how to use `ngModel`, see:\n\n - {@link ng.directive:input input}\n   - {@link input[text] text}\n   - {@link input[checkbox] checkbox}\n   - {@link input[radio] radio}\n   - {@link input[number] number}\n   - {@link input[email] email}\n   - {@link input[url] url}\n   - {@link input[date] date}\n   - {@link input[datetime-local] datetime-local}\n   - {@link input[time] time}\n   - {@link input[month] month}\n   - {@link input[week] week}\n - {@link ng.directive:select select}\n - {@link ng.directive:textarea textarea}\n\n# CSS classes\nThe following CSS classes are added and removed on the associated input/select/textarea element\ndepending on the validity of the model.\n\n - `ng-valid`: the model is valid\n - `ng-invalid`: the model is invalid\n - `ng-valid-[key]`: for each valid key added by `$setValidity`\n - `ng-invalid-[key]`: for each invalid key added by `$setValidity`\n - `ng-pristine`: the control hasn't been interacted with yet\n - `ng-dirty`: the control has been interacted with\n - `ng-touched`: the control has been blurred\n - `ng-untouched`: the control hasn't been blurred\n - `ng-pending`: any `$asyncValidators` are unfulfilled\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n## Animation Hooks\n\nAnimations within models are triggered when any of the associated CSS classes are added and removed\non the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,\n`.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.\nThe animations that are triggered within ngModel are similar to how they work in ngClass and\nanimations can be hooked into using CSS transitions, keyframes as well as JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style an input element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-input {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-input.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre>",
            "example": [
                "\n<example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"inputExample\">\n    <file name=\"index.html\">\n      <script>\n       angular.module('inputExample', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.val = '1';\n         }]);\n      </script>\n      <style>\n        .my-input {\n          -webkit-transition:all linear 0.5s;\n          transition:all linear 0.5s;\n          background: transparent;\n        }\n        .my-input.ng-invalid {\n          color:white;\n          background: red;\n        }\n      </style>\n      <p id=\"inputDescription\">\n       Update input to see transitions when valid/invalid.\n       Integer is a valid value.\n      </p>\n      <form name=\"testForm\" ng-controller=\"ExampleController\">\n        <input ng-model=\"val\" ng-pattern=\"/^\\d+$/\" name=\"anim\" class=\"my-input\"\n               aria-describedby=\"inputDescription\" />\n      </form>\n    </file>\n</example>\n\n## Binding to a getter/setter\n\nSometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a\nfunction that returns a representation of the model when called with zero arguments, and sets\nthe internal state of a model when called with an argument. It's sometimes useful to use this\nfor models that have an internal representation that's different from what the model exposes\nto the view.\n\n<div class=\"alert alert-success\">\n**Best Practice:** It's best to keep getters fast because Angular is likely to call them more\nfrequently than other parts of your code.\n</div>\n\nYou use this behavior by adding `ng-model-options=\"{ getterSetter: true }\"` to an element that\nhas `ng-model` attached to it. You can also add `ng-model-options=\"{ getterSetter: true }\"` to\na `<form>`, which will enable this behavior for all `<input>`s within it. See\n{@link ng.directive:ngModelOptions `ngModelOptions`} for more.\n\nThe following example shows how to use `ngModel` with a getter/setter:",
                "\n<example name=\"ngModel-getter-setter\" module=\"getterSetterExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form name=\"userForm\">\n          <label>Name:\n            <input type=\"text\" name=\"userName\"\n                   ng-model=\"user.name\"\n                   ng-model-options=\"{ getterSetter: true }\" />\n          </label>\n        </form>\n        <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>\n      </div>\n    </file>\n    <file name=\"app.js\">\n      angular.module('getterSetterExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          var _name = 'Brian';\n          $scope.user = {\n            name: function(newName) {\n             // Note that newName can be undefined for two reasons:\n             // 1. Because it is called as a getter and thus called with no arguments\n             // 2. Because the property should actually be set to undefined. This happens e.g. if the\n             //    input is invalid\n             return arguments.length ? (_name = newName) : _name;\n            }\n          };\n        }]);\n    </file>\n</example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 25400,
            "ngdoc": "directive",
            "name": "ngModelOptions",
            "description": "Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of\nevents that will trigger a model update and/or a debouncing delay so that the actual update only\ntakes place when a timer expires; this timer will be reset after another change takes place.\n\nGiven the nature of `ngModelOptions`, the value displayed inside input fields in the view might\nbe different from the value in the actual model. This means that if you update the model you\nshould also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in\norder to make sure it is synchronized with the model and that any debounced action is canceled.\n\nThe easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}\nmethod is by making sure the input is placed inside a form that has a `name` attribute. This is\nimportant because `form` controllers are published to the related scope under the name in their\n`name` attribute.\n\nAny pending changes will take place immediately when an enclosing form is submitted via the\n`submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\nto have access to the updated model.\n\n`ngModelOptions` has an effect on the element it's declared on and its descendants.",
            "params": [
                {
                    "name": "ngModelOptions",
                    "description": "options to apply to the current model. Valid keys are:\n  - `updateOn`: string specifying which event should the input be bound to. You can set several\n    events using an space delimited list. There is a special event called `default` that\n    matches the default events belonging of the control.\n  - `debounce`: integer value which contains the debounce model update value in milliseconds. A\n    value of 0 triggers an immediate update. If an object is supplied instead, you can specify a\n    custom value for each event. For example:\n    `ng-model-options=\"{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }\"`\n  - `allowInvalid`: boolean value which indicates that the model can be set with values that did\n    not validate correctly instead of the default behavior of setting the model to undefined.\n  - `getterSetter`: boolean value which determines whether or not to treat functions bound to\n      `ngModel` as getters/setters.\n  - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for\n    `<input type=\"date\">`, `<input type=\"time\">`, ... . It understands UTC/GMT and the\n    continental US time zone abbreviations, but for general use, use a time zone offset, for\n    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)\n    If not specified, the timezone of the browser will be used.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n The following example shows how to override immediate updates. Changes on the inputs within the\n form will update the model only when the control loses focus (blur event). If `escape` key is\n pressed while the input field is focused, the value is reset to the value in the current model.\n\n <example name=\"ngModelOptions-directive-blur\" module=\"optionsExample\">\n   <file name=\"index.html\">\n     <div ng-controller=\"ExampleController\">\n       <form name=\"userForm\">\n         <label>Name:\n           <input type=\"text\" name=\"userName\"\n                  ng-model=\"user.name\"\n                  ng-model-options=\"{ updateOn: 'blur' }\"\n                  ng-keyup=\"cancel($event)\" />\n         </label><br />\n         <label>Other data:\n           <input type=\"text\" ng-model=\"user.data\" />\n         </label><br />\n       </form>\n       <pre>user.name = <span ng-bind=\"user.name\"></span></pre>\n     </div>\n   </file>\n   <file name=\"app.js\">\n     angular.module('optionsExample', [])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.user = { name: 'say', data: '' };\n\n         $scope.cancel = function(e) {\n           if (e.keyCode == 27) {\n             $scope.userForm.userName.$rollbackViewValue();\n           }\n         };\n       }]);\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var model = element(by.binding('user.name'));\n     var input = element(by.model('user.name'));\n     var other = element(by.model('user.data'));\n\n     it('should allow custom events', function() {\n       input.sendKeys(' hello');\n       input.click();\n       expect(model.getText()).toEqual('say');\n       other.click();\n       expect(model.getText()).toEqual('say hello');\n     });\n\n     it('should $rollbackViewValue when model changes', function() {\n       input.sendKeys(' hello');\n       expect(input.getAttribute('value')).toEqual('say hello');\n       input.sendKeys(protractor.Key.ESCAPE);\n       expect(input.getAttribute('value')).toEqual('say');\n       other.click();\n       expect(model.getText()).toEqual('say');\n     });\n   </file>\n </example>\n\n This one shows how to debounce model changes. Model will be updated only 1 sec after last change.\n If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.\n\n <example name=\"ngModelOptions-directive-debounce\" module=\"optionsExample\">\n   <file name=\"index.html\">\n     <div ng-controller=\"ExampleController\">\n       <form name=\"userForm\">\n         <label>Name:\n           <input type=\"text\" name=\"userName\"\n                  ng-model=\"user.name\"\n                  ng-model-options=\"{ debounce: 1000 }\" />\n         </label>\n         <button ng-click=\"userForm.userName.$rollbackViewValue(); user.name=''\">Clear</button>\n         <br />\n       </form>\n       <pre>user.name = <span ng-bind=\"user.name\"></span></pre>\n     </div>\n   </file>\n   <file name=\"app.js\">\n     angular.module('optionsExample', [])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.user = { name: 'say' };\n       }]);\n   </file>\n </example>\n\n This one shows how to bind to getter/setters:\n\n <example name=\"ngModelOptions-directive-getter-setter\" module=\"getterSetterExample\">\n   <file name=\"index.html\">\n     <div ng-controller=\"ExampleController\">\n       <form name=\"userForm\">\n         <label>Name:\n           <input type=\"text\" name=\"userName\"\n                  ng-model=\"user.name\"\n                  ng-model-options=\"{ getterSetter: true }\" />\n         </label>\n       </form>\n       <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>\n     </div>\n   </file>\n   <file name=\"app.js\">\n     angular.module('getterSetterExample', [])\n       .controller('ExampleController', ['$scope', function($scope) {\n         var _name = 'Brian';\n         $scope.user = {\n           name: function(newName) {\n             // Note that newName can be undefined for two reasons:\n             // 1. Because it is called as a getter and thus called with no arguments\n             // 2. Because the property should actually be set to undefined. This happens e.g. if the\n             //    input is invalid\n             return arguments.length ? (_name = newName) : _name;\n           }\n         };\n       }]);\n   </file>\n </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 25690,
            "ngdoc": "directive",
            "name": "ngNonBindable",
            "restrict": "AC",
            "priority": "1000",
            "description": "The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current\nDOM element. This is useful if the element contains what appears to be Angular directives and\nbindings but which should be ignored by Angular. This could be the case if you have a site that\ndisplays snippets of code, for instance.",
            "element": "ANY",
            "example": [
                "\nIn this example there are two locations where a simple interpolation binding (`{{}}`) is present,\nbut the one wrapped in `ngNonBindable` is left alone.",
                "\n   <example>\n     <file name=\"index.html\">\n       <div>Normal: {{1 + 2}}</div>\n       <div ng-non-bindable>Ignored: {{1 + 2}}</div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-non-bindable', function() {\n        expect(element(by.binding('1 + 2')).getText()).toContain('3');\n        expect(element.all(by.css('div')).last().getText()).toMatch(/1 \\+ 2/);\n      });\n     </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 25728,
            "ngdoc": "directive",
            "name": "ngOptions",
            "restrict": "A",
            "description": "The `ngOptions` attribute can be used to dynamically generate a list of `<option>`\nelements for the `<select>` element using the array or object obtained by evaluating the\n`ngOptions` comprehension expression.\n\nIn many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a\nsimilar result. However, `ngOptions` provides some benefits such as reducing memory and\nincreasing speed by not creating a new scope for each repeated instance, as well as providing\nmore flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the\ncomprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound\n to a non-string value. This is because an option element can only be bound to string values at\npresent.\n\nWhen an item in the `<select>` menu is selected, the array element or object property\nrepresented by the selected option will be bound to the model identified by the `ngModel`\ndirective.\n\nOptionally, a single hard-coded `<option>` element, with the value set to an empty string, can\nbe nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\noption. See example below for demonstration.\n\n## Complex Models (objects or collections)\n\n**Note:** By default, `ngModel` watches the model by reference, not value. This is important when\nbinding any input directive to a model that is an object or a collection.\n\nSince this is a common situation for `ngOptions` the directive additionally watches the model using\n`$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in\nthe options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual\nobject/collection has not changed identity but only a property on the object or an item in the collection\nchanges.\n\nNote that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection\nif the model is an array). This means that changing a property deeper inside the object/collection that the\nfirst level will not trigger a re-rendering.\n\n\n## `select` **`as`**\n\nUsing `select` **`as`** will bind the result of the `select` expression to the model, but\nthe value of the `<select>` and `<option>` html elements will be either the index (for array data sources)\nor property name (for object data sources) of the value within the collection. If a **`track by`** expression\nis used, the result of that expression will be set as the value of the `option` and `select` elements.\n\n\n### `select` **`as`** and **`track by`**\n\n<div class=\"alert alert-warning\">\nDo not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.\n</div>\n\nConsider the following example:\n\n```html\n<select ng-options=\"item.subItem as item.label for item in values track by item.id\" ng-model=\"selected\">\n```\n\n```js\n$scope.values = [{\n  id: 1,\n  label: 'aLabel',\n  subItem: { name: 'aSubItem' }\n}, {\n  id: 2,\n  label: 'bLabel',\n  subItem: { name: 'bSubItem' }\n}];\n\n$scope.selected = { name: 'aSubItem' };\n```\n\nWith the purpose of preserving the selection, the **`track by`** expression is always applied to the element\nof the data source (to `item` in this example). To calculate whether an element is selected, we do the\nfollowing:\n\n1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`\n2. Apply **`track by`** to the already selected value in `ngModel`.\n   In the example: this is not possible as **`track by`** refers to `item.id`, but the selected\n   value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to\n   a wrong object, the selected element can't be found, `<select>` is always reset to the \"not\n   selected\" option.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "The control is considered valid only if value is entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngOptions",
                    "description": "in one of the following forms:\n\n  * for array data sources:\n    * `label` **`for`** `value` **`in`** `array`\n    * `select` **`as`** `label` **`for`** `value` **`in`** `array`\n    * `label` **`group by`** `group` **`for`** `value` **`in`** `array`\n    * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`\n    * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`\n    * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`\n    * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`\n       (for including a filter with `track by`)\n  * for object data sources:\n    * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n    * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n    * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`\n    * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`\n    * `select` **`as`** `label` **`group by`** `group`\n        **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n    * `select` **`as`** `label` **`disable when`** `disable`\n        **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n\nWhere:\n\n  * `array` / `object`: an expression which evaluates to an array / object to iterate over.\n  * `value`: local variable which will refer to each item in the `array` or each property value\n     of `object` during iteration.\n  * `key`: local variable which will refer to a property name in `object` during iteration.\n  * `label`: The result of this expression will be the label for `<option>` element. The\n    `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n  * `select`: The result of this expression will be bound to the model of the parent `<select>`\n     element. If not specified, `select` expression will default to `value`.\n  * `group`: The result of this expression will be used to group options using the `<optgroup>`\n     DOM element.\n  * `disable`: The result of this expression will be used to disable the rendered `<option>`\n     element. Return `true` to disable.\n  * `trackexpr`: Used when working with an array of objects. The result of this expression will be\n     used to identify the objects in the array. The `trackexpr` will most likely refer to the\n    `value` variable (e.g. `value.propertyName`). With this the selection is preserved\n     even when the options are recreated (e.g. reloaded from the server).",
                    "type": "Comprehension_expression="
                }
            ],
            "example": [
                "\n   <example module=\"selectExample\">\n     <file name=\"index.html\">\n       <script>\n       angular.module('selectExample', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.colors = [\n             {name:'black', shade:'dark'},\n             {name:'white', shade:'light', notAnOption: true},\n             {name:'red', shade:'dark'},\n             {name:'blue', shade:'dark', notAnOption: true},\n             {name:'yellow', shade:'light', notAnOption: false}\n           ];\n           $scope.myColor = $scope.colors[2]; // red\n         }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <ul>\n           <li ng-repeat=\"color in colors\">\n             <label>Name: <input ng-model=\"color.name\"></label>\n             <label><input type=\"checkbox\" ng-model=\"color.notAnOption\"> Disabled?</label>\n             <button ng-click=\"colors.splice($index, 1)\" aria-label=\"Remove\">X</button>\n           </li>\n           <li>\n             <button ng-click=\"colors.push({})\">add</button>\n           </li>\n         </ul>\n         <hr/>\n         <label>Color (null not allowed):\n           <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\"></select>\n         </label><br/>\n         <label>Color (null allowed):\n         <span  class=\"nullable\">\n           <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\">\n             <option value=\"\">-- choose color --</option>\n           </select>\n         </span></label><br/>\n\n         <label>Color grouped by shade:\n           <select ng-model=\"myColor\" ng-options=\"color.name group by color.shade for color in colors\">\n           </select>\n         </label><br/>\n\n         <label>Color grouped by shade, with some disabled:\n           <select ng-model=\"myColor\"\n                 ng-options=\"color.name group by color.shade disable when color.notAnOption for color in colors\">\n           </select>\n         </label><br/>\n\n\n\n         Select <button ng-click=\"myColor = { name:'not in list', shade: 'other' }\">bogus</button>.\n         <br/>\n         <hr/>\n         Currently selected: {{ {selected_color:myColor} }}\n         <div style=\"border:solid 1px black; height:20px\"\n              ng-style=\"{'background-color':myColor.name}\">\n         </div>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n        it('should check ng-options', function() {\n          expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');\n          element.all(by.model('myColor')).first().click();\n          element.all(by.css('select[ng-model=\"myColor\"] option')).first().click();\n          expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');\n          element(by.css('.nullable select[ng-model=\"myColor\"]')).click();\n          element.all(by.css('.nullable select[ng-model=\"myColor\"] option')).first().click();\n          expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');\n        });\n     </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 26450,
            "ngdoc": "directive",
            "name": "ngPluralize",
            "restrict": "EA",
            "description": "`ngPluralize` is a directive that displays messages according to en-US localization rules.\nThese rules are bundled with angular.js, but can be overridden\n(see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\nby specifying the mappings between\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nand the strings to be displayed.\n\n# Plural categories and explicit number rules\nThere are two\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nin Angular's default en-US locale: \"one\" and \"other\".\n\nWhile a plural category may match many numbers (for example, in en-US locale, \"other\" can match\nany number that is not 1), an explicit number rule can only match one number. For example, the\nexplicit number rule for \"3\" matches the number 3. There are examples of plural categories\nand explicit number rules throughout the rest of this documentation.\n\n# Configuring ngPluralize\nYou configure ngPluralize by providing 2 attributes: `count` and `when`.\nYou can also provide an optional attribute, `offset`.\n\nThe value of the `count` attribute can be either a string or an {@link guide/expression\nAngular expression}; these are evaluated on the current scope for its bound value.\n\nThe `when` attribute specifies the mappings between plural categories and the actual\nstring to be displayed. The value of the attribute should be a JSON object.\n\nThe following example shows how to configure ngPluralize:\n\n```html\n<ng-pluralize count=\"personCount\"\n                when=\"{'0': 'Nobody is viewing.',\n                     'one': '1 person is viewing.',\n                     'other': '{} people are viewing.'}\">\n</ng-pluralize>\n```\n\nIn the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\nspecify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\nwould be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\nother numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\nshow \"a dozen people are viewing\".\n\nYou can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted\ninto pluralized strings. In the previous example, Angular will replace `{}` with\n<span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\nfor <span ng-non-bindable>{{numberExpression}}</span>.\n\nIf no rule is defined for a category, then an empty string is displayed and a warning is generated.\nNote that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.\n\n# Configuring ngPluralize with offset\nThe `offset` attribute allows further customization of pluralized text, which can result in\na better user experience. For example, instead of the message \"4 people are viewing this document\",\nyou might display \"John, Kate and 2 others are viewing this document\".\nThe offset attribute allows you to offset a number by any desired value.\nLet's take a look at an example:\n\n```html\n<ng-pluralize count=\"personCount\" offset=2\n              when=\"{'0': 'Nobody is viewing.',\n                     '1': '{{person1}} is viewing.',\n                     '2': '{{person1}} and {{person2}} are viewing.',\n                     'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                     'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n</ng-pluralize>\n```\n\nNotice that we are still using two plural categories(one, other), but we added\nthree explicit number rules 0, 1 and 2.\nWhen one person, perhaps John, views the document, \"John is viewing\" will be shown.\nWhen three people view the document, no explicit number rule is found, so\nan offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\nIn this case, plural category 'one' is matched and \"John, Mary and one other person are viewing\"\nis shown.\n\nNote that when you specify offsets, you must provide explicit number rules for\nnumbers from 0 up to and including the offset. If you use an offset of 3, for example,\nyou must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\nplural categories \"one\" and \"other\".",
            "params": [
                {
                    "name": "count",
                    "description": "The variable to be bound to.",
                    "type": "String|expression"
                },
                {
                    "name": "when",
                    "description": "The mapping between plural category to its corresponding strings.",
                    "type": "String"
                },
                {
                    "name": "offset",
                    "description": "Offset to deduct from the total number.",
                    "type": "Number="
                }
            ],
            "example": [
                "\n   <example module=\"pluralizeExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('pluralizeExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.person1 = 'Igor';\n             $scope.person2 = 'Misko';\n             $scope.personCount = 1;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <label>Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /></label><br/>\n         <label>Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /></label><br/>\n         <label>Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /></label><br/>\n\n         <!--- Example with simple pluralization rules for en locale --->\n         Without Offset:\n         <ng-pluralize count=\"personCount\"\n                       when=\"{'0': 'Nobody is viewing.',\n                              'one': '1 person is viewing.',\n                              'other': '{} people are viewing.'}\">\n         </ng-pluralize><br>\n\n         <!--- Example with offset --->\n         With Offset(2):\n         <ng-pluralize count=\"personCount\" offset=2\n                       when=\"{'0': 'Nobody is viewing.',\n                              '1': '{{person1}} is viewing.',\n                              '2': '{{person1}} and {{person2}} are viewing.',\n                              'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                              'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n         </ng-pluralize>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should show correct pluralized string', function() {\n         var withoutOffset = element.all(by.css('ng-pluralize')).get(0);\n         var withOffset = element.all(by.css('ng-pluralize')).get(1);\n         var countInput = element(by.model('personCount'));\n\n         expect(withoutOffset.getText()).toEqual('1 person is viewing.');\n         expect(withOffset.getText()).toEqual('Igor is viewing.');\n\n         countInput.clear();\n         countInput.sendKeys('0');\n\n         expect(withoutOffset.getText()).toEqual('Nobody is viewing.');\n         expect(withOffset.getText()).toEqual('Nobody is viewing.');\n\n         countInput.clear();\n         countInput.sendKeys('2');\n\n         expect(withoutOffset.getText()).toEqual('2 people are viewing.');\n         expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');\n\n         countInput.clear();\n         countInput.sendKeys('3');\n\n         expect(withoutOffset.getText()).toEqual('3 people are viewing.');\n         expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');\n\n         countInput.clear();\n         countInput.sendKeys('4');\n\n         expect(withoutOffset.getText()).toEqual('4 people are viewing.');\n         expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');\n       });\n       it('should show data-bound names', function() {\n         var withOffset = element.all(by.css('ng-pluralize')).get(1);\n         var personCount = element(by.model('personCount'));\n         var person1 = element(by.model('person1'));\n         var person2 = element(by.model('person2'));\n         personCount.clear();\n         personCount.sendKeys('4');\n         person1.clear();\n         person1.sendKeys('Di');\n         person2.clear();\n         person2.sendKeys('Vojta');\n         expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');\n       });\n     </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 26689,
            "ngdoc": "directive",
            "name": "ngRepeat",
            "multielement": "",
            "description": "The `ngRepeat` directive instantiates a template once per item from a collection. Each template\ninstance gets its own scope, where the given loop variable is set to the current collection item,\nand `$index` is set to the item index or key.\n\nSpecial properties are exposed on the local scope of each template instance, including:\n\n| Variable  | Type            | Details                                                                     |\n|-----------|-----------------|-----------------------------------------------------------------------------|\n| `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |\n| `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |\n| `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |\n| `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |\n| `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |\n| `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |\n\nCreating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.\nThis may be useful when, for instance, nesting ngRepeats.\n\n\n# Iterating over object properties\n\nIt is possible to get `ngRepeat` to iterate over the properties of an object using the following\nsyntax:\n\n```js\n<div ng-repeat=\"(key, value) in myObj\"> ... </div>\n```\n\nYou need to be aware that the JavaScript specification does not define the order of keys\nreturned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive\nused to sort the keys alphabetically.)\n\nVersion 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser\nwhen running `for key in myObj`. It seems that browsers generally follow the strategy of providing\nkeys in the order in which they were defined, although there are exceptions when keys are deleted\nand reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues\n\nIf this is not desired, the recommended workaround is to convert your object into an array\nthat is sorted into the order that you prefer before providing it to `ngRepeat`.  You could\ndo this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)\nor implement a `$watch` on the object yourself.\n\n\n# Tracking and Duplicates\n\nWhen the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:\n\n* When an item is added, a new instance of the template is added to the DOM.\n* When an item is removed, its template instance is removed from the DOM.\n* When items are reordered, their respective templates are reordered in the DOM.\n\nBy default, `ngRepeat` does not allow duplicate items in arrays. This is because when\nthere are duplicates, it is not possible to maintain a one-to-one mapping between collection\nitems and DOM elements.\n\nIf you do need to repeat duplicate items, you can substitute the default tracking behavior\nwith your own using the `track by` expression.\n\nFor example, you may track items by the index of each item in the collection, using the\nspecial scope property `$index`:\n```html\n   <div ng-repeat=\"n in [42, 42, 43, 43] track by $index\">\n     {{n}}\n   </div>\n```\n\nYou may use arbitrary expressions in `track by`, including references to custom functions\non the scope:\n```html\n   <div ng-repeat=\"n in [42, 42, 43, 43] track by myTrackingFunction(n)\">\n     {{n}}\n   </div>\n```\n\nIf you are working with objects that have an identifier property, you can track\nby the identifier instead of the whole object. Should you reload your data later, `ngRepeat`\nwill not have to rebuild the DOM elements for items it has already rendered, even if the\nJavaScript objects in the collection have been substituted for new ones:\n```html\n   <div ng-repeat=\"model in collection track by model.id\">\n     {{model.name}}\n   </div>\n```\n\nWhen no `track by` expression is provided, it is equivalent to tracking by the built-in\n`$id` function, which tracks items by their identity:\n```html\n   <div ng-repeat=\"obj in collection track by $id(obj)\">\n     {{obj.prop}}\n   </div>\n```\n\n<div class=\"alert alert-warning\">\n**Note:** `track by` must always be the last expression:\n</div>\n```\n<div ng-repeat=\"model in collection | orderBy: 'id' as filtered_result track by model.id\">\n    {{model.name}}\n</div>\n```\n\n# Special repeat start and end points\nTo repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending\nthe range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.\nThe **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)\nup to and including the ending HTML tag where **ng-repeat-end** is placed.\n\nThe example below makes use of this feature:\n```html\n  <header ng-repeat-start=\"item in items\">\n    Header {{ item }}\n  </header>\n  <div class=\"body\">\n    Body {{ item }}\n  </div>\n  <footer ng-repeat-end>\n    Footer {{ item }}\n  </footer>\n```\n\nAnd with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:\n```html\n  <header>\n    Header A\n  </header>\n  <div class=\"body\">\n    Body A\n  </div>\n  <footer>\n    Footer A\n  </footer>\n  <header>\n    Header B\n  </header>\n  <div class=\"body\">\n    Body B\n  </div>\n  <footer>\n    Footer B\n  </footer>\n```\n\nThe custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such\nas **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).",
            "animations": "**.enter** - when a new item is added to the list or when an item is revealed after a filter\n\n**.leave** - when an item is removed from the list or when an item is filtered out\n\n**.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered",
            "element": "ANY",
            "scope": "",
            "priority": "1000",
            "params": [
                {
                    "name": "ngRepeat",
                    "description": "The expression indicating how to enumerate a collection. These\n  formats are currently supported:\n\n  * `variable in expression` – where variable is the user defined loop variable and `expression`\n    is a scope expression giving the collection to enumerate.\n\n    For example: `album in artist.albums`.\n\n  * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,\n    and `expression` is the scope expression giving the collection to enumerate.\n\n    For example: `(name, age) in {'adam':10, 'amalie':12}`.\n\n  * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression\n    which can be used to associate the objects in the collection with the DOM elements. If no tracking expression\n    is specified, ng-repeat associates elements by identity. It is an error to have\n    more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are\n    mapped to the same DOM element, which is not possible.)\n\n    Note that the tracking expression must come last, after any filters, and the alias expression.\n\n    For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements\n    will be associated by item identity in the array.\n\n    For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique\n    `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements\n    with the corresponding item in the array by identity. Moving the same object in array would move the DOM\n    element in the same way in the DOM.\n\n    For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this\n    case the object identity does not matter. Two objects are considered equivalent as long as their `id`\n    property is same.\n\n    For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter\n    to items in conjunction with a tracking expression.\n\n  * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the\n    intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message\n    when a filter is active on the repeater, but the filtered result set is empty.\n\n    For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after\n    the items have been processed through the filter.\n\n    Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end\n    (and not as operator, inside an expression).\n\n    For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .",
                    "type": "Repeat_expression"
                }
            ],
            "example": [
                "\nThis example initializes the scope to a list of names and\nthen uses `ngRepeat` to display every person:\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     <div ng-init=\"friends = [\n       {name:'John', age:25, gender:'boy'},\n       {name:'Jessie', age:30, gender:'girl'},\n       {name:'Johanna', age:28, gender:'girl'},\n       {name:'Joy', age:15, gender:'girl'},\n       {name:'Mary', age:28, gender:'girl'},\n       {name:'Peter', age:95, gender:'boy'},\n       {name:'Sebastian', age:50, gender:'boy'},\n       {name:'Erika', age:27, gender:'girl'},\n       {name:'Patrick', age:40, gender:'boy'},\n       {name:'Samantha', age:60, gender:'girl'}\n     ]\">\n       I have {{friends.length}} friends. They are:\n       <input type=\"search\" ng-model=\"q\" placeholder=\"filter friends...\" aria-label=\"filter friends\" />\n       <ul class=\"example-animate-container\">\n         <li class=\"animate-repeat\" ng-repeat=\"friend in friends | filter:q as results\">\n           [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n         </li>\n         <li class=\"animate-repeat\" ng-if=\"results.length == 0\">\n           <strong>No results found...</strong>\n         </li>\n       </ul>\n     </div>\n   </file>\n   <file name=\"animations.css\">\n     .example-animate-container {\n       background:white;\n       border:1px solid black;\n       list-style:none;\n       margin:0;\n       padding:0 10px;\n     }\n\n     .animate-repeat {\n       line-height:40px;\n       list-style:none;\n       box-sizing:border-box;\n     }\n\n     .animate-repeat.ng-move,\n     .animate-repeat.ng-enter,\n     .animate-repeat.ng-leave {\n       -webkit-transition:all linear 0.5s;\n       transition:all linear 0.5s;\n     }\n\n     .animate-repeat.ng-leave.ng-leave-active,\n     .animate-repeat.ng-move,\n     .animate-repeat.ng-enter {\n       opacity:0;\n       max-height:0;\n     }\n\n     .animate-repeat.ng-leave,\n     .animate-repeat.ng-move.ng-move-active,\n     .animate-repeat.ng-enter.ng-enter-active {\n       opacity:1;\n       max-height:40px;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var friends = element.all(by.repeater('friend in friends'));\n\n     it('should render initial data set', function() {\n       expect(friends.count()).toBe(10);\n       expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');\n       expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');\n       expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');\n       expect(element(by.binding('friends.length')).getText())\n           .toMatch(\"I have 10 friends. They are:\");\n     });\n\n      it('should update repeater when filter predicate changes', function() {\n        expect(friends.count()).toBe(10);\n\n        element(by.model('q')).sendKeys('ma');\n\n        expect(friends.count()).toBe(2);\n        expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');\n        expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');\n      });\n     </file>\n   </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 27219,
            "ngdoc": "directive",
            "name": "ngShow",
            "multielement": "",
            "description": "The `ngShow` directive shows or hides the given HTML element based on the expression\nprovided to the `ngShow` attribute. The element is shown or hidden by removing or adding\nthe `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is visible) -->\n<div ng-show=\"myValue\"></div>\n\n<!-- when $scope.myValue is falsy (element is hidden) -->\n<div ng-show=\"myValue\" class=\"ng-hide\"></div>\n```\n\nWhen the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class\nattribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding `.ng-hide`\n\nBy default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope\nwith extra animation classes that can be added.\n\n```css\n.ng-hide:not(.ng-hide-animate) {\n  /&#42; this is just another form of hiding an element &#42;/\n  display: block!important;\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with `ngShow`\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass except that\nyou must also include the !important flag to override the display property\nso that you can perform an animation when the element is hidden during the time of the animation.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  /&#42; this is required as of 1.3x to properly\n     apply all styling in a show/hide animation &#42;/\n  transition: 0s linear all;\n}\n\n.my-element.ng-hide-add-active,\n.my-element.ng-hide-remove-active {\n  /&#42; the transition is defined in the active class &#42;/\n  transition: 1s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
            "animations": "addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible\nremoveClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden",
            "element": "ANY",
            "params": [
                {
                    "name": "ngShow",
                    "description": "If the {@link guide/expression expression} is truthy\n    then the element is shown or hidden respectively.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     Click me: <input type=\"checkbox\" ng-model=\"checked\" aria-label=\"Toggle ngHide\"><br/>\n     <div>\n       Show:\n       <div class=\"check-element animate-show\" ng-show=\"checked\">\n         <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.\n       </div>\n     </div>\n     <div>\n       Hide:\n       <div class=\"check-element animate-show\" ng-hide=\"checked\">\n         <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.\n       </div>\n     </div>\n   </file>\n   <file name=\"glyphicons.css\">"
            ],
            "import": "url(../../components/bootstrap-3.1.1/css/bootstrap.css);\n   </file>\n   <file name=\"animations.css\">\n     .animate-show {\n       line-height: 20px;\n       opacity: 1;\n       padding: 10px;\n       border: 1px solid black;\n       background: white;\n     }\n\n     .animate-show.ng-hide-add.ng-hide-add-active,\n     .animate-show.ng-hide-remove.ng-hide-remove-active {\n       -webkit-transition: all linear 0.5s;\n       transition: all linear 0.5s;\n     }\n\n     .animate-show.ng-hide {\n       line-height: 0;\n       opacity: 0;\n       padding: 0 10px;\n     }\n\n     .check-element {\n       padding: 10px;\n       border: 1px solid black;\n       background: white;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));\n     var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));\n\n     it('should check ng-show / ng-hide', function() {\n       expect(thumbsUp.isDisplayed()).toBeFalsy();\n       expect(thumbsDown.isDisplayed()).toBeTruthy();\n\n       element(by.model('checked')).click();\n\n       expect(thumbsUp.isDisplayed()).toBeTruthy();\n       expect(thumbsDown.isDisplayed()).toBeFalsy();\n     });\n   </file>\n </example>",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 27395,
            "ngdoc": "directive",
            "name": "ngHide",
            "multielement": "",
            "description": "The `ngHide` directive shows or hides the given HTML element based on the expression\nprovided to the `ngHide` attribute. The element is shown or hidden by removing or adding\nthe `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is hidden) -->\n<div ng-hide=\"myValue\" class=\"ng-hide\"></div>\n\n<!-- when $scope.myValue is falsy (element is visible) -->\n<div ng-hide=\"myValue\"></div>\n```\n\nWhen the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class\nattribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding `.ng-hide`\n\nBy default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass in CSS:\n\n```css\n.ng-hide {\n  /&#42; this is just another form of hiding an element &#42;/\n  display: block!important;\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with `ngHide`\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`\nCSS class is added and removed for you instead of your own CSS class.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  transition: 0.5s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
            "animations": "removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden\naddClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible",
            "element": "ANY",
            "params": [
                {
                    "name": "ngHide",
                    "description": "If the {@link guide/expression expression} is truthy then\n    the element is shown or hidden respectively.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     Click me: <input type=\"checkbox\" ng-model=\"checked\" aria-label=\"Toggle ngShow\"><br/>\n     <div>\n       Show:\n       <div class=\"check-element animate-hide\" ng-show=\"checked\">\n         <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.\n       </div>\n     </div>\n     <div>\n       Hide:\n       <div class=\"check-element animate-hide\" ng-hide=\"checked\">\n         <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.\n       </div>\n     </div>\n   </file>\n   <file name=\"glyphicons.css\">"
            ],
            "import": "url(../../components/bootstrap-3.1.1/css/bootstrap.css);\n   </file>\n   <file name=\"animations.css\">\n     .animate-hide {\n       -webkit-transition: all linear 0.5s;\n       transition: all linear 0.5s;\n       line-height: 20px;\n       opacity: 1;\n       padding: 10px;\n       border: 1px solid black;\n       background: white;\n     }\n\n     .animate-hide.ng-hide {\n       line-height: 0;\n       opacity: 0;\n       padding: 0 10px;\n     }\n\n     .check-element {\n       padding: 10px;\n       border: 1px solid black;\n       background: white;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));\n     var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));\n\n     it('should check ng-show / ng-hide', function() {\n       expect(thumbsUp.isDisplayed()).toBeFalsy();\n       expect(thumbsDown.isDisplayed()).toBeTruthy();\n\n       element(by.model('checked')).click();\n\n       expect(thumbsUp.isDisplayed()).toBeTruthy();\n       expect(thumbsDown.isDisplayed()).toBeFalsy();\n     });\n   </file>\n </example>",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 27554,
            "ngdoc": "directive",
            "name": "ngStyle",
            "restrict": "AC",
            "description": "The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngStyle\n\n{@link",
                    "description": "guide/expression Expression} which evals to an\nobject whose keys are CSS style names and values are corresponding values for those CSS\nkeys.\n\nSince some CSS style names are not valid keys for an object, they must be quoted.\nSee the 'background-color' style in the example below.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n       <input type=\"button\" value=\"set color\" ng-click=\"myStyle={color:'red'}\">\n       <input type=\"button\" value=\"set background\" ng-click=\"myStyle={'background-color':'blue'}\">\n       <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n       <br/>\n       <span ng-style=\"myStyle\">Sample Text</span>\n       <pre>myStyle={{myStyle}}</pre>\n    </file>\n    <file name=\"style.css\">\n      span {\n        color: black;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var colorSpan = element(by.css('span'));\n\n      it('should check ng-style', function() {\n        expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n        element(by.css('input[value=\\'set color\\']')).click();\n        expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');\n        element(by.css('input[value=clear]')).click();\n        expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n      });\n    </file>\n  </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 27609,
            "ngdoc": "directive",
            "name": "ngSwitch",
            "restrict": "EA",
            "description": "The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.\nElements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location\nas specified in the template.\n\nThe directive itself works similar to ngInclude, however, instead of downloading template code (or loading it\nfrom the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element\nmatches the value obtained from the evaluated expression. In other words, you define a container element\n(where you place the directive), place an expression on the **`on=\"...\"` attribute**\n(or the **`ng-switch=\"...\"` attribute**), define any inner elements inside of the directive and place\na when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on\nexpression is evaluated. If a matching expression is not found via a when attribute then an element with the default\nattribute is displayed.\n\n<div class=\"alert alert-info\">\nBe aware that the attribute values to match against cannot be expressions. They are interpreted\nas literal string values to match against.\nFor example, **`ng-switch-when=\"someVal\"`** will match against the string `\"someVal\"` not against the\nvalue of the expression `$scope.someVal`.\n</div>",
            "animations": "enter - happens after the ngSwitch contents change and the matched child element is placed inside the container\nleave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM",
            "usage": "```\n<ANY ng-switch=\"expression\">\n  <ANY ng-switch-when=\"matchValue1\">...</ANY>\n  <ANY ng-switch-when=\"matchValue2\">...</ANY>\n  <ANY ng-switch-default>...</ANY>\n</ANY>\n```",
            "scope": "",
            "priority": "1200",
            "params": [
                {
                    "name": "ngSwitch|on",
                    "description": "expression to match against <code>ng-switch-when</code>.\nOn child elements add:\n\n* `ngSwitchWhen`: the case statement to match against. If match then this\n  case will be displayed. If the same match appears multiple times, all the\n  elements will be displayed.\n* `ngSwitchDefault`: the default case when no other case match. If there\n  are multiple default cases, all of them will be displayed when no other\n  case match.",
                    "type": "*"
                }
            ],
            "example": [
                "\n <example module=\"switchExample\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     <div ng-controller=\"ExampleController\">\n       <select ng-model=\"selection\" ng-options=\"item for item in items\">\n       </select>\n       <code>selection={{selection}}</code>\n       <hr/>\n       <div class=\"animate-switch-container\"\n         ng-switch on=\"selection\">\n           <div class=\"animate-switch\" ng-switch-when=\"settings\">Settings Div</div>\n           <div class=\"animate-switch\" ng-switch-when=\"home\">Home Span</div>\n           <div class=\"animate-switch\" ng-switch-default>default</div>\n       </div>\n     </div>\n   </file>\n   <file name=\"script.js\">\n     angular.module('switchExample', ['ngAnimate'])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.items = ['settings', 'home', 'other'];\n         $scope.selection = $scope.items[0];\n       }]);\n   </file>\n   <file name=\"animations.css\">\n     .animate-switch-container {\n       position:relative;\n       background:white;\n       border:1px solid black;\n       height:40px;\n       overflow:hidden;\n     }\n\n     .animate-switch {\n       padding:10px;\n     }\n\n     .animate-switch.ng-animate {\n       -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n       position:absolute;\n       top:0;\n       left:0;\n       right:0;\n       bottom:0;\n     }\n\n     .animate-switch.ng-leave.ng-leave-active,\n     .animate-switch.ng-enter {\n       top:-50px;\n     }\n     .animate-switch.ng-leave,\n     .animate-switch.ng-enter.ng-enter-active {\n       top:0;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var switchElem = element(by.css('[ng-switch]'));\n     var select = element(by.model('selection'));\n\n     it('should start in settings', function() {\n       expect(switchElem.getText()).toMatch(/Settings Div/);\n     });\n     it('should change to home', function() {\n       select.all(by.css('option')).get(1).click();\n       expect(switchElem.getText()).toMatch(/Home Span/);\n     });\n     it('should select default', function() {\n       select.all(by.css('option')).get(2).click();\n       expect(switchElem.getText()).toMatch(/default/);\n     });\n   </file>\n </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 27813,
            "ngdoc": "directive",
            "name": "ngTransclude",
            "restrict": "EAC",
            "description": "Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n\nAny existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.",
            "element": "ANY",
            "example": [
                "\n  <example module=\"transcludeExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('transcludeExample', [])\n         .directive('pane', function(){\n            return {\n              restrict: 'E',\n              transclude: true,\n              scope: { title:'@' },\n              template: '<div style=\"border: 1px solid black;\">' +\n                          '<div style=\"background-color: gray\">{{title}}</div>' +\n                          '<ng-transclude></ng-transclude>' +\n                        '</div>'\n            };\n        })\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.title = 'Lorem Ipsum';\n          $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n        }]);\n      </script>\n      <div ng-controller=\"ExampleController\">\n        <input ng-model=\"title\" aria-label=\"title\"> <br/>\n        <textarea ng-model=\"text\" aria-label=\"text\"></textarea> <br/>\n        <pane title=\"{{title}}\">{{text}}</pane>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n       it('should have transcluded', function() {\n         var titleElement = element(by.model('title'));\n         titleElement.clear();\n         titleElement.sendKeys('TITLE');\n         var textElement = element(by.model('text'));\n         textElement.clear();\n         textElement.sendKeys('TEXT');\n         expect(element(by.binding('title')).getText()).toEqual('TITLE');\n         expect(element(by.binding('text')).getText()).toEqual('TEXT');\n       });\n    </file>\n  </example>\n"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 27885,
            "ngdoc": "directive",
            "name": "script",
            "restrict": "E",
            "description": "Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the\ntemplate can be used by {@link ng.directive:ngInclude `ngInclude`},\n{@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the\n`<script>` element must be specified as `text/ng-template`, and a cache name for the template must be\nassigned through the element's `id`, which can then be used as a directive's `templateUrl`.",
            "params": [
                {
                    "name": "type",
                    "description": "Must be set to `'text/ng-template'`.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Cache name of the template.",
                    "type": "String"
                }
            ],
            "example": [
                "\n <example>\n   <file name=\"index.html\">\n     <script type=\"text/ng-template\" id=\"/tpl.html\">\n       Content of the template.\n     </script>\n\n     <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>\n     <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should load template defined inside script tag', function() {\n       element(by.css('#tpl-link')).click();\n       expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);\n     });\n   </file>\n </example>"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 27935,
            "ngdoc": "type",
            "name": "select.SelectController",
            "description": "The controller for the `<select>` directive. This provides support for reading\nand writing the selected value(s) of the control and also coordinates dynamically\nadded `<option>` elements, perhaps by an `ngRepeat` directive.",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/angular/angular.js",
            "line": 28033,
            "ngdoc": "directive",
            "name": "select",
            "restrict": "E",
            "description": "HTML `SELECT` element with angular data-binding.\n\nIn many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions\nngOptions} to achieve a similar result. However, `ngOptions` provides some benefits such as reducing\nmemory and increasing speed by not creating a new scope for each repeated instance, as well as providing\nmore flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the\ncomprehension expression.\n\nWhen an item in the `<select>` menu is selected, the array element or object property\nrepresented by the selected option will be bound to the model identified by the `ngModel`\ndirective.\n\nIf the viewValue contains a value that doesn't match any of the options then the control\nwill automatically add an \"unknown\" option, which it then removes when this is resolved.\n\nOptionally, a single hard-coded `<option>` element, with the value set to an empty string, can\nbe nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\noption. See example below for demonstration.\n\n<div class=\"alert alert-info\">\nThe value of a `select` directive used without `ngOptions` is always a string.\nWhen the model needs to be bound to a non-string value, you must either explictly convert it\nusing a directive (see example below) or use `ngOptions` to specify the set of options.\nThis is because an option element can only be bound to string values at present.\n</div>\n\n### Example (binding `select` to a non-string value)\n\n<example name=\"select-with-non-string-options\" module=\"nonStringSelect\">\n  <file name=\"index.html\">\n    <select ng-model=\"model.id\" convert-to-number>\n      <option value=\"0\">Zero</option>\n      <option value=\"1\">One</option>\n      <option value=\"2\">Two</option>\n    </select>\n    {{ model }}\n  </file>\n  <file name=\"app.js\">\n    angular.module('nonStringSelect', [])\n      .run(function($rootScope) {\n        $rootScope.model = { id: 2 };\n      })\n      .directive('convertToNumber', function() {\n        return {\n          require: 'ngModel',\n          link: function(scope, element, attrs, ngModel) {\n            ngModel.$parsers.push(function(val) {\n              return parseInt(val, 10);\n            });\n            ngModel.$formatters.push(function(val) {\n              return '' + val;\n            });\n          }\n        };\n      });\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should initialize to model', function() {\n      var select = element(by.css('select'));\n      expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');\n    });\n  </file>\n</example>",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/ngStorage/ngStorage-0.3.7.js",
            "line": 15,
            "ngdoc": "overview",
            "name": "ngStorage",
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/ngStorage/ngStorage-0.3.7.js",
            "line": 22,
            "ngdoc": "object",
            "name": "ngStorage.$localStorage",
            "requires": [
                "$rootScope",
                "$window"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/lib/ngStorage/ngStorage-0.3.7.js",
            "line": 31,
            "ngdoc": "object",
            "name": "ngStorage.$sessionStorage",
            "requires": [
                "$rootScope",
                "$window"
            ],
            "class": "$modelFactory",
            "module": "ng"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 25,
            "itemtype": "property",
            "name": "",
            "type": "{String} incremental path for the model",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 31,
            "itemtype": "property",
            "name": "",
            "type": "{String} the name of the model",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 37,
            "itemtype": "property",
            "name": "",
            "type": "{String} the name of the angular factory for the model (i.e. Person -> $person)",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 43,
            "itemtype": "property",
            "name": "",
            "type": "{String} the name of the SDK to which the model belongs",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 49,
            "itemtype": "property",
            "name": "",
            "type": "{Array} an array of field definitions of each field for that model where each field definition is an object of that field's properties",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 55,
            "itemtype": "property",
            "name": "",
            "type": "{Array} an array of query scope definitions for that model where each definition is an object of properties that define that query scope",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 61,
            "itemtype": "property",
            "name": "",
            "type": "{Array} an array of belongs_to relationship definitions for that model where each definition is an object of that belongs_to relationship's properties",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 67,
            "itemtype": "property",
            "name": "",
            "type": "{Array} an array of hasOne relationship definitions for that model where each definition is an object of that hasOne relationship's properties",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 73,
            "itemtype": "property",
            "name": "",
            "type": "{Array} an array of hasMany relationship definitions for that model where each definition is an object of that hasMany relationship's properties",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 79,
            "itemtype": "property",
            "name": "",
            "type": "{Dispatcher} the dispatcher used by the SDK",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 85,
            "itemtype": "property",
            "name": "",
            "type": "{String} the name of the data source for the model",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 91,
            "itemtype": "property",
            "name": "",
            "type": "{Object} the definitions of direct to source configurations for the model and all its actions and query scopes",
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 101,
            "description": "Gets the Adapter for the API to which this Model belongs to\nNOTE: For now all Model instances belong to an AP backend",
            "itemtype": "method",
            "name": "client",
            "return": {
                "description": "",
                "type": "Adapter"
            },
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 111,
            "description": "Saves an instance passed as an argument to the server. If the instance has an \"id\" property then it assumes\nthe operation is for updating instead of creating",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "data",
                    "description": "the instance data to save",
                    "type": "Object"
                },
                {
                    "name": "interpolation",
                    "description": "context to use (only valid for direct to source models)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 126,
            "description": "Creates a Resource instance for this Model",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "data",
                    "description": "the data with which the Resource is created",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Resource"
            },
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 136,
            "description": "Reads an instance from the server",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "with",
                    "description": "the query for the instance ( usually just { id: ... } )",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 146,
            "description": "Deletes an instance from the server",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "with",
                    "description": "the id of the instance to delete",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 156,
            "description": "Creates an instance of Resource. If an Object is passed as an argument then the attributes of that\nObject will be added to the resulting Resource",
            "itemtype": "method",
            "name": "createResource",
            "params": [
                {
                    "name": "obj",
                    "description": "attributes for the Resource",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Resource"
            },
            "class": "Model",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 173,
            "description": "Copies the Resources attributes and calls the save method from the Model that created the instance",
            "itemtype": "method",
            "name": "$save",
            "params": [
                {
                    "name": "interpolation",
                    "description": "context to use when saving",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Resource",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 198,
            "description": "Adds methods to a Resource than represent each of the relationships defined for this Model.\nAll relationship methods are stored inside a $related Object in the Model service.",
            "itemtype": "method",
            "name": "addRelationshipsToResource",
            "params": [
                {
                    "name": "res",
                    "description": "the Resource instance to add the methods to",
                    "type": "Resource"
                }
            ],
            "return": {
                "description": "the same Resource passed",
                "type": "Resource"
            },
            "class": "Resource",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 264,
            "description": "Given an Array of Objects representing a collection, it transforms every Object in the Array into a Resource",
            "itemtype": "method",
            "name": "createCollection",
            "params": [
                {
                    "name": "data",
                    "description": "the collection data",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Resource[]"
            },
            "class": "Resource",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 283,
            "description": "Helper Functions",
            "class": "Resource",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 286,
            "description": "Adds all the scopes defined for the Model to the instance",
            "itemtype": "method",
            "name": "addScopes",
            "params": [
                {
                    "name": "model",
                    "description": "the model instance to add the scopes too",
                    "type": "Model"
                },
                {
                    "name": "scopes",
                    "description": "the scopes' definitions",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Resource",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/model.factory.js",
            "line": 302,
            "description": "Creates a Model instance",
            "itemtype": "method",
            "name": "createModel",
            "params": [
                {
                    "name": "dispatcher",
                    "description": "the dispatcher used by the SDK for the Model to connect to the backend",
                    "type": "Dispatcher"
                },
                {
                    "name": "definition",
                    "description": "configuration data describing the model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Model"
            },
            "class": "Resource",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/registry.service.js",
            "line": 5,
            "description": "HELPER METHODS",
            "class": "ModelRegistry",
            "module": "AP"
        },
        {
            "file": "sdk/model/registry.service.js",
            "line": 8,
            "itemtype": "method",
            "name": "isEmptyString",
            "params": [
                {
                    "name": "str",
                    "description": "the string to check if it's empty or not.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if str is both a string and empty, false otherwise",
                "type": "Boolean"
            },
            "class": "ModelRegistry",
            "module": "AP"
        },
        {
            "file": "sdk/model/registry.service.js",
            "line": 33,
            "description": "Checks that the SDK name and Model name passed are Strings and are not empty Strings",
            "itemtype": "method",
            "name": "validateSdkAndModelNames",
            "params": [
                {
                    "name": "sdk",
                    "description": "the name of an SDK",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "the name of a Model",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if they both check out, false if they don't",
                "type": "Boolean"
            },
            "class": "ModelRegistry",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/registry.service.js",
            "line": 44,
            "description": "Stores a Model service, within the space of its container SDk with the name passed",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "sdk",
                    "description": "the name of the SDK where the Model is defined",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "the name of the Model, which will be used as the key to store the service",
                    "type": "String"
                },
                {
                    "name": "modelFactory",
                    "description": "the Model service",
                    "type": "Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ModelRegistry",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/model/registry.service.js",
            "line": 64,
            "description": "Gets a Model based on the SDk name and Model name passed from the store. If a Model requested isn't\nfound within the store, the registry will attempt to inject it using angular's $injector service. This is\nbecause angular doesn't initialize services until they are needed so there might be a case when a Model\nhasn't been registered simply because nobody has used it yet. If a Model gets injected using $injector the\nresulting Model will be registered for later use.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "sdk",
                    "description": "the name of the SDK where the Model is registered",
                    "type": "String"
                },
                {
                    "name": "modelName",
                    "description": "the name of the Model to get",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the requested Model service",
                "type": "Model"
            },
            "class": "ModelRegistry",
            "module": "AP",
            "submodule": "model"
        },
        {
            "file": "sdk/utility/cache.service.js",
            "line": 17,
            "description": "Single function for getting or setting data in the Cache. If only a key is provided then it will get that key, if a key and value are\nprovided then it will set the value of that key in the cache. If nothing is passed or if you try to get a value that doesn't exist\nit will return undefined.",
            "itemtype": "method",
            "name": "store",
            "params": [
                {
                    "name": "key",
                    "description": "the key to get or set, it can be a value type or reference type",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "the value to store, if no value then it will act as a getter",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "if acting as a getter",
                "type": "Object"
            },
            "class": "{Cache}",
            "module": "AP",
            "submodule": "utility"
        },
        {
            "file": "sdk/utility/cache.service.js",
            "line": 59,
            "description": "Return a string version of a key. This allows to use reference types as keys",
            "itemtype": "method",
            "name": "serializeKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key to serialize",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "serialized key",
                "type": "String"
            },
            "class": "{Cache}",
            "module": "AP",
            "submodule": "utility"
        },
        {
            "file": "sdk/utility/cache.service.js",
            "line": 69,
            "description": "Wipe the cache clean",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "{Cache}",
            "module": "AP",
            "submodule": "utility"
        },
        {
            "file": "sdk/utility/helpers.service.js",
            "line": 13,
            "description": "Generates a unique String id",
            "itemtype": "method",
            "name": "uniqueId",
            "params": [
                {
                    "name": "prefix",
                    "description": "optional prefix to prepend to the id",
                    "type": "String"
                },
                {
                    "name": "suffix",
                    "description": "optional suffix to append to the id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "$helpers",
            "module": "AP",
            "submodule": "utility"
        },
        {
            "file": "sdk/utility/helpers.service.js",
            "line": 27,
            "description": "Generates a random Number within a range. If no start and no end for the range is specified the default\nrange will be 1-100000",
            "itemtype": "method",
            "name": "randomNumber",
            "params": [
                {
                    "name": "start",
                    "description": "start of range",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "end of range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "$helpers",
            "module": "AP",
            "submodule": "utility"
        },
        {
            "file": "sdk/utility/helpers.service.js",
            "line": 41,
            "description": "Finds an element within an Array, given a comparison Function passed as an argument",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "arr",
                    "description": "the array to search",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "a compare Function that recieves an element as an argument and should return true/false if its the one its looking for",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the element (any type) or null if no element met satisfied the comparison Function"
            },
            "class": "$helpers",
            "module": "AP",
            "submodule": "utility"
        },
        {
            "file": "sdk/utility/helpers.service.js",
            "line": 62,
            "description": "Create a query string from an object of parameters where the object's keys are the parameter names and their associated values are the parameter values",
            "itemtype": "method",
            "name": "getQueryString",
            "params": [
                {
                    "name": "params",
                    "description": "an object of parameters where the object's keys are the parameter names and their associated values are the parameter values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "$helpers",
            "module": "AP",
            "submodule": "utility"
        },
        {
            "file": "sdk/utility/timestamps.service.js",
            "line": 4,
            "description": "This is used to help calculate the difference in days between cache record timestamps",
            "itemtype": "property",
            "name": "millisecondsInOneDay",
            "type": "{Number}",
            "class": "",
            "module": "AP"
        },
        {
            "file": "sdk/utility/timestamps.service.js",
            "line": 11,
            "description": "The amount of days before a timestamp should be considered expired",
            "itemtype": "property",
            "name": "expiration",
            "type": "{Number}",
            "class": "",
            "module": "AP"
        },
        {
            "file": "sdk/utility/timestamps.service.js",
            "line": 21,
            "description": "Creates a timestamp from an ISO formatted string",
            "itemtype": "method",
            "name": "fromISOString",
            "params": [
                {
                    "name": "the",
                    "description": "ISO string to convert to a timestamp",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Date"
            },
            "class": "",
            "module": "AP"
        },
        {
            "file": "sdk/utility/timestamps.service.js",
            "line": 31,
            "description": "Checks if a {Date} is within the expiration range configured for the cache.",
            "itemtype": "method",
            "name": "isValid",
            "params": [
                {
                    "name": "date",
                    "description": "the date to check",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "AP"
        },
        {
            "file": "sdk/utility/timestamps.service.js",
            "line": 45,
            "description": "Gets the amount of days that are set as limit for expiration of stored values.",
            "itemtype": "method",
            "name": "getExpirationRange",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "",
            "module": "AP"
        },
        {
            "file": "sdk/utility/timestamps.service.js",
            "line": 54,
            "description": "Sets the amount of days to use as expiration range",
            "itemtype": "method",
            "name": "setExpirationRange",
            "params": [
                {
                    "name": "days",
                    "description": "the number of days",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "",
            "module": "AP"
        },
        {
            "file": "sdk/utility/timestamps.service.js",
            "line": 66,
            "description": "Returns a timestamp",
            "itemtype": "method",
            "name": "timestamp",
            "return": {
                "description": "",
                "type": "Date"
            },
            "class": "",
            "module": "AP"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:44"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:75"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:88"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:105"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:135"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:161"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:190"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:219"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:234"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:248"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:309"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:341"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/adapter.factory.js:359"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/dispatcher.factory.js:36"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/dispatcher.factory.js:49"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/dispatcher.factory.js:72"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:36"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:67"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:89"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:172"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:234"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:294"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:320"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:365"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:406"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:483"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:510"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:548"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:579"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:610"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:636"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http.adapter.factory.js:659"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:105"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:214"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:244"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:281"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:297"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:324"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:335"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:346"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:357"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:368"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/http_client.factory.js:380"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:22"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:42"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:63"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:84"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:102"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:119"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:133"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:165"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:209"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:226"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:271"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:281"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:291"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:301"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:311"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/adapter/mock_server.factory.js:325"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication.factory.js:105"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication.factory.js:115"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication.factory.js:130"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication_manager.factory.js:22"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication_manager.factory.js:31"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication_manager.factory.js:98"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication_manager.factory.js:120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication_storage.service.js:24"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication_storage.service.js:34"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication_storage.service.js:46"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/auth/authentication_storage.service.js:65"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/config/config.service.js:82"
        },
        {
            "message": "unknown tag: license",
            "line": " sdk/lib/angular/angular.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:8"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:170"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:170"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:191"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:191"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:191"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:191"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:204"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:204"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:204"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:204"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:286"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:286"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:286"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:286"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:374"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:383"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:440"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:440"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:440"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:440"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:463"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:463"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:463"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:463"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:496"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:496"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:496"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:516"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:516"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:516"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:516"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:545"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:545"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:545"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:545"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:560"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:560"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:560"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:560"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:575"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:575"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:575"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:575"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:594"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:604"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:604"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:604"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:604"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:619"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:619"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:619"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:619"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:640"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:640"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:640"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:640"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:657"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:657"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:657"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:657"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:671"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:671"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:671"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:671"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:686"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:698"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:759"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:759"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:759"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:759"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:777"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:806"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:806"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:806"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:806"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:984"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:984"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:984"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:984"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1074"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1074"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:1074"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1137"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1137"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:1137"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1137"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1193"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1193"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:1193"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1193"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1217"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1217"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:1217"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1217"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1256"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1281"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1298"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1393"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1393"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:1393"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1549"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1549"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1549"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1667"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1667"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1682"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1796"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1823"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1845"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1867"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1867"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1894"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1894"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:1894"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1981"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1981"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:1992"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:1992"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2003"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2003"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2015"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2015"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2026"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2026"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2037"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2037"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2048"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2048"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2060"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2060"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2072"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2072"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2106"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2106"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2124"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2124"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2136"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2136"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2149"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2149"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2162"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2162"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:2184"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:2198"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2337"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2337"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:2521"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:2521"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:2521"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:2521"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:3548"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:3602"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3627"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3627"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:3627"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:3627"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3681"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3681"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3745"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3745"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3798"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3798"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3810"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3810"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:3810"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3825"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3825"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:3825"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3836"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3836"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:3836"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3850"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3850"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:3850"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3937"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3937"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:3977"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:3977"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:3977"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4073"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4073"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:4073"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4107"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4107"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:4107"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4149"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:4149"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4182"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4182"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:4182"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4210"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4210"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4477"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4477"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4489"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4489"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4506"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4506"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:4506"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4912"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4912"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4929"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4929"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:4978"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:4978"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5020"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5020"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5043"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5043"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5043"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5071"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5071"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5071"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5097"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5097"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5097"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5115"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5115"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5115"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5146"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5146"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5146"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5158"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5158"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5158"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5184"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5184"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5184"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5210"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5210"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5210"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5229"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5229"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5229"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5253"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5253"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5253"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5277"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5277"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5277"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5303"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5303"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5303"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5349"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5440"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5516"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:5516"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5572"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5633"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:5633"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5647"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:5647"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5673"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:5673"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5702"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5702"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:5702"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5801"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5801"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5842"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5842"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5842"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:5842"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5878"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5878"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5878"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:5878"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5902"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5902"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5902"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5930"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5930"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5930"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5946"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5946"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5946"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:5963"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:5963"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:5963"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:5963"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:6016"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:6016"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:6016"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:6034"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:6034"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:6034"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:6053"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:6053"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:6131"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:6131"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:6131"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:6131"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:6817"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:6817"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:6914"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:6914"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:6914"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:6914"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:6974"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:6974"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:6974"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:6974"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:7004"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:7004"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:7004"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:7004"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:7033"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:7033"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:7033"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:7033"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:7087"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:7087"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:7087"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:7105"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:7105"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:7105"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:7122"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:7122"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:7122"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:7139"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:7139"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:7139"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:7265"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:7265"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:7265"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:7265"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:7431"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:7680"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:7712"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:7727"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:8189"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:8227"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:8771"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:8771"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:8785"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:8785"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:8795"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:8795"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:8795"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:8877"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:8877"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:8891"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:8891"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:8908"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:8908"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:8920"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:8920"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9035"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9035"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9066"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9066"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9132"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9132"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9169"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9169"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:9261"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:9291"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:9322"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9351"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9351"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9358"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9358"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9417"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9417"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:9417"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9444"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9444"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:9482"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:9482"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:9482"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:9482"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10146"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10146"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10146"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10158"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10158"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10158"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10170"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10170"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10170"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10182"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10182"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10182"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10196"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10196"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10196"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10209"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10209"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10209"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10222"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10222"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10222"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10236"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10236"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10409"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10409"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10590"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10590"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10629"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10629"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10629"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10647"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10647"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10647"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10698"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10698"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:10698"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10698"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10893"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10893"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10893"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10909"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10909"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10909"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:10934"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:10934"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:10934"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11094"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11094"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:11094"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11118"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11118"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:11203"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:11247"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11536"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11536"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11557"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11557"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11591"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11591"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11611"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11611"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11639"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11639"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11659"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11659"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11688"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11688"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11766"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11766"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11791"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11791"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11808"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11808"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11867"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11867"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11893"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11893"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11907"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11907"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:11907"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11923"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11923"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:11923"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11966"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11966"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " sdk/lib/angular/angular.js:11966"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:11988"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:11988"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " sdk/lib/angular/angular.js:11988"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:12180"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:12180"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:12218"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:12218"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:12228"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:12228"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:12228"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:12246"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:12246"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:12255"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:12255"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:12264"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:12264"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:12273"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:12273"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:12282"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:12282"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:13991"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:13991"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:13991"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:13991"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14032"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14032"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14253"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14253"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:14253"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:14484"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14507"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14507"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:14507"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:14507"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14659"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14659"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:14659"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:14659"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14729"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14729"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:14729"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:14729"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14750"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14750"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:14750"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:14750"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14763"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14763"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:14763"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:14763"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14931"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14931"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14939"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14939"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:14961"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:14961"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15006"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15006"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:15006"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15062"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15062"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15070"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15070"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15078"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15078"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15088"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15088"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15088"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:15088"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15152"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15152"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:15152"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15306"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15306"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15306"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:15306"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15390"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15390"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15390"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:15390"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15577"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15577"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15577"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15741"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15741"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " sdk/lib/angular/angular.js:15741"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15753"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15753"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15753"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15817"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15817"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15817"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:15817"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15849"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15849"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15849"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15897"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15897"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15897"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:15897"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15959"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15959"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15959"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:15986"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:15986"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:15986"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:15986"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16039"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16039"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:16039"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16112"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16112"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:16112"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:16261"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:16286"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16387"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16387"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:16387"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16414"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16414"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16461"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16461"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:16461"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16490"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16490"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:16490"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16593"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16593"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:16593"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16630"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16630"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:16630"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16656"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16656"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:16656"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16703"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16703"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16717"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16717"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:16717"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:16987"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:16987"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:16987"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17065"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17065"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:17065"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17088"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17088"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17088"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17118"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17118"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17118"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17137"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17137"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17137"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17152"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17152"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17167"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17167"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17167"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17182"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17182"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17182"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17197"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17197"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17215"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17215"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17215"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17227"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17227"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17227"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17239"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17239"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17239"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17251"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17251"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17251"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17263"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17263"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17263"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17275"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17275"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17275"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17292"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17292"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17292"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17309"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17309"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17309"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17326"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17326"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17326"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17343"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17343"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17343"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17382"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17471"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17471"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17547"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17556"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17591"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17615"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17626"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17642"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17665"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17665"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17665"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17728"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17728"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17728"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:17764"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17764"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:17843"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17856"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17856"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17901"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:17967"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:17967"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18024"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18024"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18024"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18059"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18059"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:18059"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18118"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18118"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18118"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18373"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18373"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18373"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:18373"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18445"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18445"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18445"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:18445"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18720"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18720"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18720"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:18720"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18890"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18890"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18890"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:18890"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18931"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18931"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18931"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18942"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18942"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18942"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:18952"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:18952"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:18952"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:18952"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19077"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19077"
        },
        {
            "message": "unknown tag: kind",
            "line": " sdk/lib/angular/angular.js:19077"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:19077"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19375"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19375"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19375"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19410"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19410"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19410"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:19410"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:19410"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19509"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19509"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19509"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:19509"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:19509"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19535"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19535"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19535"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:19535"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:19535"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19561"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19561"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19561"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:19561"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:19561"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19609"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19609"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19609"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:19609"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:19609"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19651"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19651"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19651"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:19651"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:19651"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19686"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19686"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19686"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:19686"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:19686"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19724"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19724"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:19724"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:19724"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:19724"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19873"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19873"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19935"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19935"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19952"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19952"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:19969"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:19969"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20000"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20000"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20027"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20027"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20064"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20064"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20082"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20082"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20106"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20106"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20125"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20125"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20139"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20139"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:20139"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20158"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20158"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:20158"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20398"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20398"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20494"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20494"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20591"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20591"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20686"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20686"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20782"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20782"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20877"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20877"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:20974"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:20974"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:21084"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:21084"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:21183"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:21183"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:21281"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:21281"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:21347"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:21347"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:21823"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:21823"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:21823"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:21859"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:21859"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:21859"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22015"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22015"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22015"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22092"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22092"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:22092"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22092"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22160"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22160"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22160"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22228"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22228"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22228"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22298"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22298"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22298"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22494"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22494"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:22494"
        },
        {
            "message": "unknown tag: animations",
            "line": " sdk/lib/angular/angular.js:22494"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22494"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22674"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22674"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:22674"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22674"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22722"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22722"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:22722"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22722"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22770"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22770"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:22770"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22770"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:22829"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:22829"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:22829"
        },
        {
            "message": "unknown tag: scope",
            "line": " sdk/lib/angular/angular.js:22829"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:22829"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23064"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23064"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23064"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23237"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23237"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23237"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23237"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23313"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23313"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23313"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23313"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23337"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23337"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23337"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23337"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23361"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23361"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23361"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23361"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23384"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23384"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23384"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23384"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23408"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23408"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23408"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23408"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23432"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23432"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23432"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23432"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23456"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23456"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23456"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23456"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23480"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23480"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23480"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23480"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23502"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23502"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23502"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23502"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23529"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23529"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23529"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23551"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23551"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23551"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23551"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23614"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23614"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23614"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23614"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23634"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23634"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23634"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23634"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23658"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23658"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23658"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23658"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23679"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23679"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23679"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23679"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23700"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23700"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23700"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23700"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "unknown tag: multielement",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "unknown tag: animations",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "unknown tag: scope",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23846"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23846"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:23846"
        },
        {
            "message": "unknown tag: animations",
            "line": " sdk/lib/angular/angular.js:23846"
        },
        {
            "message": "unknown tag: scope",
            "line": " sdk/lib/angular/angular.js:23846"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:23846"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:23990"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:23990"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " sdk/lib/angular/angular.js:23990"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24002"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24002"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " sdk/lib/angular/angular.js:24002"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24014"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24014"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " sdk/lib/angular/angular.js:24014"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24140"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24140"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:24140"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:24140"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:24140"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24207"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24207"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:24207"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24354"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24354"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24608"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24608"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24630"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24630"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/lib/angular/angular.js:24630"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24655"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24655"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24690"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24690"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24708"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24708"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24727"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24727"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24745"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24745"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24762"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24762"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24829"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24829"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:24968"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:24968"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:25057"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:25057"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:25174"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:25174"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:25174"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:25174"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:25400"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:25400"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:25690"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:25690"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:25690"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:25690"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:25690"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:25728"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:25728"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:25728"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:26450"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:26450"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:26450"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:26689"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:26689"
        },
        {
            "message": "unknown tag: multielement",
            "line": " sdk/lib/angular/angular.js:26689"
        },
        {
            "message": "unknown tag: animations",
            "line": " sdk/lib/angular/angular.js:26689"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:26689"
        },
        {
            "message": "unknown tag: scope",
            "line": " sdk/lib/angular/angular.js:26689"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:26689"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:27219"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:27219"
        },
        {
            "message": "unknown tag: multielement",
            "line": " sdk/lib/angular/angular.js:27219"
        },
        {
            "message": "unknown tag: animations",
            "line": " sdk/lib/angular/angular.js:27219"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:27219"
        },
        {
            "message": "unknown tag: import",
            "line": " sdk/lib/angular/angular.js:27219"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:27395"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:27395"
        },
        {
            "message": "unknown tag: multielement",
            "line": " sdk/lib/angular/angular.js:27395"
        },
        {
            "message": "unknown tag: animations",
            "line": " sdk/lib/angular/angular.js:27395"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:27395"
        },
        {
            "message": "unknown tag: import",
            "line": " sdk/lib/angular/angular.js:27395"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:27554"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:27554"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:27554"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:27554"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:27609"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:27609"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:27609"
        },
        {
            "message": "unknown tag: animations",
            "line": " sdk/lib/angular/angular.js:27609"
        },
        {
            "message": "unknown tag: usage",
            "line": " sdk/lib/angular/angular.js:27609"
        },
        {
            "message": "unknown tag: scope",
            "line": " sdk/lib/angular/angular.js:27609"
        },
        {
            "message": "unknown tag: priority",
            "line": " sdk/lib/angular/angular.js:27609"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:27813"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:27813"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:27813"
        },
        {
            "message": "unknown tag: element",
            "line": " sdk/lib/angular/angular.js:27813"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:27885"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:27885"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:27885"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:27935"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:27935"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/angular/angular.js:28033"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/angular/angular.js:28033"
        },
        {
            "message": "unknown tag: restrict",
            "line": " sdk/lib/angular/angular.js:28033"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:15"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:15"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:22"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:22"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:31"
        },
        {
            "message": "unknown tag: name",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:31"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:101"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:111"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:126"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:136"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:146"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:156"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:173"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:198"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:264"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:286"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/model.factory.js:302"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/registry.service.js:8"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/registry.service.js:33"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/registry.service.js:44"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/model/registry.service.js:64"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/cache.service.js:17"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/cache.service.js:59"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/cache.service.js:69"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/helpers.service.js:13"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/helpers.service.js:27"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/helpers.service.js:41"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/helpers.service.js:62"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/timestamps.service.js:21"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/timestamps.service.js:31"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/timestamps.service.js:45"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/timestamps.service.js:54"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/utility/timestamps.service.js:66"
        },
        {
            "message": "Missing item type\nThe http adapter does not have a class constructor it is quite simply a regular adapter with extra behaviour attached to it",
            "line": " sdk/adapter/http.adapter.factory.js:17"
        },
        {
            "message": "Missing item type\nInterpolate strings using {{}} notation",
            "line": " sdk/adapter/http.adapter.factory.js:43"
        },
        {
            "message": "Missing item type\nBASE URL SETTINGS",
            "line": " sdk/config/config.service.js:15"
        },
        {
            "message": "Missing item type\nMOCK SERVER SETTINGS",
            "line": " sdk/config/config.service.js:38"
        },
        {
            "message": "Missing item type\nOFFLINE CACHE SETTINGS",
            "line": " sdk/config/config.service.js:58"
        },
        {
            "message": "Missing item type\nAJAX SETTINGS",
            "line": " sdk/config/config.service.js:78"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:1"
        },
        {
            "message": "Missing item type\nThis object provides a utility for producing rich Error messages within\nAngular. It can be called as follows:\n\nvar exampleMinErr = minErr('example');\nthrow exampleMinErr('one', 'This {0} is {1}', foo, bar);\n\nThe above creates an instance of minErr in the example namespace. The\nresulting error will have a namespaced error code of example.one.  The\nresulting error will replace {0} with the value of foo, and {1} with the\nvalue of bar. The object is not restricted in the number of arguments it can\ntake.\n\nIf fewer arguments are specified than necessary for interpolation, the extra\ninterpolation markers will be preserved in the final string.\n\nSince data will be parsed statically during a build step, some restrictions\nare applied with respect to how minErr instances are created and called.\nInstances should have names of the form namespaceMinErr for a minErr created\nusing minErr('namespace') . Error codes, namespaces and template strings\nshould all be static strings, not variables or general expressions.",
            "line": " sdk/lib/angular/angular.js:8"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:251"
        },
        {
            "message": "Missing item type\ndocumentMode is an IE-only property\nhttp://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx",
            "line": " sdk/lib/angular/angular.js:256"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:263"
        },
        {
            "message": "Missing item type\nwhen using forEach the params are value, key, but it is often useful to have key, value.",
            "line": " sdk/lib/angular/angular.js:374"
        },
        {
            "message": "Missing item type\nA consistent way of creating unique IDs in angular.\n\nUsing simple numbers allows us to generate 28.6 million unique ids per second for 10 years before\nwe hit number precision issues in JavaScript.\n\nMath.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M",
            "line": " sdk/lib/angular/angular.js:383"
        },
        {
            "message": "Missing item type\nSet or clear the hashkey for an object.",
            "line": " sdk/lib/angular/angular.js:398"
        },
        {
            "message": "Missing item type\nDetermine if a value is an object with a null prototype",
            "line": " sdk/lib/angular/angular.js:594"
        },
        {
            "message": "Missing item type\nDetermines if a value is a regular expression object.",
            "line": " sdk/lib/angular/angular.js:686"
        },
        {
            "message": "Missing item type\nChecks if `obj` is a window object.",
            "line": " sdk/lib/angular/angular.js:698"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:777"
        },
        {
            "message": "Missing item type\nCreates a shallow copy of an object, an array or a primitive.\n\nAssumes that there are no proto properties for objects.",
            "line": " sdk/lib/angular/angular.js:958"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:1256"
        },
        {
            "message": "Missing item type\nTries to decode the URI component without throwing an exception.",
            "line": " sdk/lib/angular/angular.js:1281"
        },
        {
            "message": "Missing item type\nParses an escaped url query string into key-value pairs.",
            "line": " sdk/lib/angular/angular.js:1298"
        },
        {
            "message": "Missing item type\nWe need our custom method because encodeURIComponent is too aggressive and doesn't follow\nhttp://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\nsegments:\n   segment       = *pchar\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "line": " sdk/lib/angular/angular.js:1340"
        },
        {
            "message": "Missing item type\nThis method is intended for encoding *key* or *value* parts of query component. We need a custom\nmethod because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\nencoded per http://tools.ietf.org/html/rfc3986:\n   query       = *( pchar / \"/\" / \"?\" )\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "line": " sdk/lib/angular/angular.js:1359"
        },
        {
            "message": "Missing item type\nthrow error if the argument is falsy.",
            "line": " sdk/lib/angular/angular.js:1765"
        },
        {
            "message": "Missing item type\nthrow error if the name given is hasOwnProperty",
            "line": " sdk/lib/angular/angular.js:1785"
        },
        {
            "message": "Missing item type\nReturn the value accessible from the object by path. Any undefined traversals are ignored",
            "line": " sdk/lib/angular/angular.js:1796"
        },
        {
            "message": "Missing item type\nReturn the DOM siblings between the first and last node in the given array.",
            "line": " sdk/lib/angular/angular.js:1823"
        },
        {
            "message": "Missing item type\nCreates a new object without a prototype. This object is useful for lookup without having to\nguard against prototypically inherited properties via hasOwnProperty.\n\nRelated micro-benchmarks:\n- http://jsperf.com/object-create2\n- http://jsperf.com/proto-map-lookup/2\n- http://jsperf.com/for-in-vs-object-keys2",
            "line": " sdk/lib/angular/angular.js:1845"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:1891"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:1963"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:1966"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:1969"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:1974"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:2184"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:2198"
        },
        {
            "message": "Missing item type\nConverts snake_case to camelCase.\nAlso there is special case for Moz prefix starting with upper case letter.",
            "line": " sdk/lib/angular/angular.js:2637"
        },
        {
            "message": "Missing item type\nProperties: writes return selection, reads return first value",
            "line": " sdk/lib/angular/angular.js:3183"
        },
        {
            "message": "Missing item type\nchaining functions",
            "line": " sdk/lib/angular/angular.js:3502"
        },
        {
            "message": "Missing item type\nComputes a hash of an 'obj'.\nHash of a:\n string is string\n number is number as string\n object is either result of calling $$hashKey function on the object or uniquely generated id,\n        that is also assigned to the $$hashKey property of the object.",
            "line": " sdk/lib/angular/angular.js:3548"
        },
        {
            "message": "Missing item type\nHashMap which can use objects as keys",
            "line": " sdk/lib/angular/angular.js:3580"
        },
        {
            "message": "Missing item type\nStore key value pair",
            "line": " sdk/lib/angular/angular.js:3593"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:3602"
        },
        {
            "message": "Missing item type\nRemove the key/value pair",
            "line": " sdk/lib/angular/angular.js:3610"
        },
        {
            "message": "Missing item type\nImplicit module which gets automatically added to each {@link auto.$injector $injector}.",
            "line": " sdk/lib/angular/angular.js:3681"
        },
        {
            "message": "Missing item type\n`$injector` is used to retrieve object instances as defined by\n{@link auto.$provide provider}, instantiate types, invoke methods,\nand load modules.\n\nThe following always holds true:\n\n```js\n  var $injector = angular.injector();\n  expect($injector.get('$injector')).toBe($injector);\n  expect($injector.invoke(function($injector) {\n    return $injector;\n  })).toBe($injector);\n```\n\n# Injection Function Annotation\n\nJavaScript does not have annotations, and annotations are needed for dependency injection. The\nfollowing are all valid ways of annotating function with injection arguments and are equivalent.\n\n```js\n  // inferred (only works if code not minified/obfuscated)\n  $injector.invoke(function(serviceA){});\n\n  // annotated\n  function explicit(serviceA) {};\n  explicit.$inject = ['serviceA'];\n  $injector.invoke(explicit);\n\n  // inline\n  $injector.invoke(['serviceA', function(serviceA){}]);\n```\n\n## Inference\n\nIn JavaScript calling `toString()` on a function returns the function definition. The definition\ncan then be parsed and the function arguments can be extracted. This method of discovering\nannotations is disallowed when the injector is in strict mode.\n*NOTE:* This does not work with minification, and obfuscation tools since these tools change the\nargument names.\n\n## `$inject` Annotation\nBy adding an `$inject` property onto a function the injection parameters can be specified.\n\n## Inline\nAs an array of injection names, where the last item in the array is the function to call.",
            "line": " sdk/lib/angular/angular.js:3745"
        },
        {
            "message": "Missing item type\nReturn an instance of the service.",
            "line": " sdk/lib/angular/angular.js:3798"
        },
        {
            "message": "Missing item type\nInvoke the method and supply the method arguments from the `$injector`.",
            "line": " sdk/lib/angular/angular.js:3810"
        },
        {
            "message": "Missing item type\nAllows the user to query if the particular service exists.",
            "line": " sdk/lib/angular/angular.js:3825"
        },
        {
            "message": "Missing item type\nCreate a new instance of JS type. The method takes a constructor function, invokes the new\noperator, and supplies all of the arguments to the constructor function as specified by the\nconstructor annotation.",
            "line": " sdk/lib/angular/angular.js:3836"
        },
        {
            "message": "Missing item type\nReturns an array of service names which the function is requesting for injection. This API is\nused by the injector to determine which services need to be injected into the function when the\nfunction is invoked. There are three ways in which the function can be annotated with the needed\ndependencies.\n\n# Argument names\n\nThe simplest form is to extract the dependencies from the arguments of the function. This is done\nby converting the function into a string using `toString()` method and extracting the argument\nnames.\n```js\n  // Given\n  function MyController($scope, $route) {\n    // ...\n  }\n\n  // Then\n  expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\nYou can disallow this method by using strict injection mode.\n\nThis method does not work with code minification / obfuscation. For this reason the following\nannotation strategies are supported.\n\n# The `$inject` property\n\nIf a function has an `$inject` property and its value is an array of strings, then the strings\nrepresent names of services to be injected into the function.\n```js\n  // Given\n  var MyController = function(obfuscatedScope, obfuscatedRoute) {\n    // ...\n  }\n  // Define function dependencies\n  MyController['$inject'] = ['$scope', '$route'];\n\n  // Then\n  expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\n# The array notation\n\nIt is often desirable to inline Injected functions and that's when setting the `$inject` property\nis very inconvenient. In these situations using the array notation to specify the dependencies in\na way that survives minification is a better choice:\n\n```js\n  // We wish to write this (not minification / obfuscation safe)\n  injector.invoke(function($compile, $rootScope) {\n    // ...\n  });\n\n  // We are forced to write break inlining\n  var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n    // ...\n  };\n  tmpFn.$inject = ['$compile', '$rootScope'];\n  injector.invoke(tmpFn);\n\n  // To better support inline function the inline annotation is supported\n  injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n    // ...\n  }]);\n\n  // Therefore\n  expect(injector.annotate(\n     ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n   ).toEqual(['$compile', '$rootScope']);\n```",
            "line": " sdk/lib/angular/angular.js:3850"
        },
        {
            "message": "Missing item type\nThe {@link auto.$provide $provide} service has a number of methods for registering components\nwith the {@link auto.$injector $injector}. Many of these functions are also exposed on\n{@link angular.Module}.\n\nAn Angular **service** is a singleton object created by a **service factory**.  These **service\nfactories** are functions which, in turn, are created by a **service provider**.\nThe **service providers** are constructor functions. When instantiated they must contain a\nproperty called `$get`, which holds the **service factory** function.\n\nWhen you request a service, the {@link auto.$injector $injector} is responsible for finding the\ncorrect **service provider**, instantiating it and then calling its `$get` **service factory**\nfunction to get the instance of the **service**.\n\nOften services have no configuration options and there is no need to add methods to the service\nprovider.  The provider will be no more than a constructor function with a `$get` property. For\nthese cases the {@link auto.$provide $provide} service has additional helper methods to register\nservices without specifying a provider.\n\n* {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the\n    {@link auto.$injector $injector}\n* {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by\n    providers and services.\n* {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by\n    services, not providers.\n* {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,\n    that will be wrapped in a **service provider** object, whose `$get` property will contain the\n    given factory function.\n* {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`\n    that will be wrapped in a **service provider** object, whose `$get` property will instantiate\n     a new object using the given constructor function.\n\nSee the individual methods for more information and examples.",
            "line": " sdk/lib/angular/angular.js:3937"
        },
        {
            "message": "Missing item type\nRegister a **provider function** with the {@link auto.$injector $injector}. Provider functions\nare constructor functions, whose instances are responsible for \"providing\" a factory for a\nservice.\n\nService provider names start with the name of the service they provide followed by `Provider`.\nFor example, the {@link ng.$log $log} service has a provider called\n{@link ng.$logProvider $logProvider}.\n\nService provider objects can have additional methods which allow configuration of the provider\nand its service. Importantly, you can configure what kind of service is created by the `$get`\nmethod, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a\nmethod {@link ng.$logProvider#debugEnabled debugEnabled}\nwhich lets you specify whether the {@link ng.$log $log} service will log debug messages to the\nconsole or not.",
            "line": " sdk/lib/angular/angular.js:3977"
        },
        {
            "message": "Missing item type\nRegister a **service factory**, which will be called to return the service instance.\nThis is short for registering a service where its provider consists of only a `$get` property,\nwhich is the given service factory function.\nYou should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to\nconfigure your service in a provider.",
            "line": " sdk/lib/angular/angular.js:4073"
        },
        {
            "message": "Missing item type\nRegister a **service constructor**, which will be invoked with `new` to create the service\ninstance.\nThis is short for registering a service where its provider's `$get` property is the service\nconstructor function that will be used to instantiate the service instance.\n\nYou should use {@link auto.$provide#service $provide.service(class)} if you define your service\nas a type/class.",
            "line": " sdk/lib/angular/angular.js:4107"
        },
        {
            "message": "Missing item type\nRegister a **value service** with the {@link auto.$injector $injector}, such as a string, a\nnumber, an array, an object or a function.  This is short for registering a service where its\nprovider's `$get` property is a factory function that takes no arguments and returns the **value\nservice**.\n\nValue services are similar to constant services, except that they cannot be injected into a\nmodule configuration function (see {@link angular.Module#config}) but they can be overridden by\nan Angular\n{@link auto.$provide#decorator decorator}.",
            "line": " sdk/lib/angular/angular.js:4149"
        },
        {
            "message": "Missing item type\nRegister a **constant service**, such as a string, a number, an array, an object or a function,\nwith the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be\ninjected into a module configuration function (see {@link angular.Module#config}) and it cannot\nbe overridden by an Angular {@link auto.$provide#decorator decorator}.",
            "line": " sdk/lib/angular/angular.js:4182"
        },
        {
            "message": "Missing item type\nRegister a **service decorator** with the {@link auto.$injector $injector}. A service decorator\nintercepts the creation of a service, allowing it to override or modify the behaviour of the\nservice. The object returned by the decorator may be the original service, or a new service\nobject which replaces or wraps and delegates to the original service.",
            "line": " sdk/lib/angular/angular.js:4210"
        },
        {
            "message": "Missing item type\nUse `$anchorScrollProvider` to disable automatic scrolling whenever\n{@link ng.$location#hash $location.hash()} changes.",
            "line": " sdk/lib/angular/angular.js:4477"
        },
        {
            "message": "Missing item type\nBy default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to\n{@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />\nUse this method to disable automatic scrolling.\n\nIf automatic scrolling is disabled, one must explicitly call\n{@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the\ncurrent hash.",
            "line": " sdk/lib/angular/angular.js:4489"
        },
        {
            "message": "Missing item type\nDefault implementation of $animate that doesn't perform any animations, instead just\nsynchronously performs DOM updates and resolves the returned runner promise.\n\nIn order to enable animations the `ngAnimate` module has to be loaded.\n\nTo see the functional implementation check out `src/ngAnimate/animate.js`.",
            "line": " sdk/lib/angular/angular.js:4912"
        },
        {
            "message": "Missing item type\nRegisters a new injectable animation factory function. The factory function produces the\nanimation object which contains callback functions for each event that is expected to be\nanimated.\n\n  * `eventFn`: `function(element, ... , doneFunction, options)`\n  The element to animate, the `doneFunction` and the options fed into the animation. Depending\n  on the type of animation additional arguments will be injected into the animation function. The\n  list below explains the function signatures for the different animation methods:\n\n  - setClass: function(element, addedClasses, removedClasses, doneFunction, options)\n  - addClass: function(element, addedClasses, doneFunction, options)\n  - removeClass: function(element, removedClasses, doneFunction, options)\n  - enter, leave, move: function(element, doneFunction, options)\n  - animate: function(element, fromStyles, toStyles, doneFunction, options)\n\n  Make sure to trigger the `doneFunction` once the animation is fully complete.\n\n```js\n  return {\n    //enter, leave, move signature\n    eventFn : function(element, done, options) {\n      //code to run the animation\n      //once complete, then run done()\n      return function endFunction(wasCancelled) {\n        //code to cancel the animation\n      }\n    }\n  }\n```",
            "line": " sdk/lib/angular/angular.js:4929"
        },
        {
            "message": "Missing item type\nSets and/or returns the CSS class regular expression that is checked when performing\nan animation. Upon bootstrap the classNameFilter value is not set at all and will\ntherefore enable $animate to attempt to perform an animation on any element that is triggered.\nWhen setting the `classNameFilter` value, animations will only be performed on elements\nthat successfully match the filter expression. This in turn can boost performance\nfor low-powered devices as well as applications containing a lot of structural operations.",
            "line": " sdk/lib/angular/angular.js:4978"
        },
        {
            "message": "Missing item type\nThe $animate service exposes a series of DOM utility methods that provide support\nfor animation hooks. The default behavior is the application of DOM operations, however,\nwhen an animation is detected (and animations are enabled), $animate will do the heavy lifting\nto ensure that animation runs with the triggered DOM operation.\n\nBy default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't\nincluded and only when it is active then the animation hooks that `$animate` triggers will be\nfunctional. Once active then all structural `ng-` directives will trigger animations as they perform\ntheir DOM-related operations (enter, leave and move). Other directives such as `ngClass`,\n`ngShow`, `ngHide` and `ngMessages` also provide support for animations.\n\nIt is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.\n\nTo learn more about enabling animation support, click here to visit the\n{@link ngAnimate ngAnimate module page}.",
            "line": " sdk/lib/angular/angular.js:5020"
        },
        {
            "message": "Missing item type\nSets up an event listener to fire whenever the animation event (enter, leave, move, etc...)\n    has fired on the given element or among any of its children. Once the listener is fired, the provided callback\n    is fired with the following params:\n```js\n $animate.on('enter', container,\n    function callback(element, phase) {\n      // cool we detected an enter animation within the container\n    }\n );\n ```",
            "line": " sdk/lib/angular/angular.js:5043"
        },
        {
            "message": "Missing item type\nDeregisters an event listener based on the event which has been associated with the provided element. This method\n can be used in three different ways depending on the arguments:\n```js\n // remove all the animation event listeners listening for `enter`\n $animate.off('enter');\n// remove all the animation event listeners listening for `enter` on the given element and its children\n $animate.off('enter', container);\n// remove the event listener function provided by `listenerFn` that is set\n // to listen for `enter` on the given `element` as well as its children\n $animate.off('enter', container, callback);\n ```",
            "line": " sdk/lib/angular/angular.js:5071"
        },
        {
            "message": "Missing item type\nAssociates the provided element with a host parent element to allow the element to be animated even if it exists\n   outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the\n   element despite being outside the realm of the application or within another application. Say for example if the application\n   was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated\n   as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind\n   that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.\n\n   Note that this feature is only active when the `ngAnimate` module is used.",
            "line": " sdk/lib/angular/angular.js:5097"
        },
        {
            "message": "Missing item type\nUsed to get and set whether animations are enabled or not on the entire application or on an element and its children. This\n function can be called in four ways:\n```js\n // returns true or false\n $animate.enabled();\n// changes the enabled state for all animations\n $animate.enabled(false);\n $animate.enabled(true);\n// returns true or false if animations are enabled for an element\n $animate.enabled(element);\n// changes the enabled state for an element and its children\n $animate.enabled(element, true);\n $animate.enabled(element, false);\n ```",
            "line": " sdk/lib/angular/angular.js:5115"
        },
        {
            "message": "Missing item type\nCancels the provided animation.",
            "line": " sdk/lib/angular/angular.js:5146"
        },
        {
            "message": "Missing item type\nInserts the element into the DOM either after the `after` element (if provided) or\n   as the first child within the `parent` element and then triggers an animation.\n   A promise is returned that will be resolved during the next digest once the animation\n   has completed.",
            "line": " sdk/lib/angular/angular.js:5158"
        },
        {
            "message": "Missing item type\nInserts (moves) the element into its new position in the DOM either after\n   the `after` element (if provided) or as the first child within the `parent` element\n   and then triggers an animation. A promise is returned that will be resolved\n   during the next digest once the animation has completed.",
            "line": " sdk/lib/angular/angular.js:5184"
        },
        {
            "message": "Missing item type\nTriggers an animation and then removes the element from the DOM.\nWhen the function is called a promise is returned that will be resolved during the next\ndigest once the animation has completed.",
            "line": " sdk/lib/angular/angular.js:5210"
        },
        {
            "message": "Missing item type\nTriggers an addClass animation surrounding the addition of the provided CSS class(es). Upon\n  execution, the addClass operation will only be handled after the next digest and it will not trigger an\n  animation if element already contains the CSS class or if the class is removed at a later step.\n  Note that class-based animations are treated differently compared to structural animations\n  (like enter, move and leave) since the CSS classes may be added/removed at different points\n  depending if CSS or JavaScript animations are used.",
            "line": " sdk/lib/angular/angular.js:5229"
        },
        {
            "message": "Missing item type\nTriggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon\n  execution, the removeClass operation will only be handled after the next digest and it will not trigger an\n  animation if element does not contain the CSS class or if the class is added at a later step.\n  Note that class-based animations are treated differently compared to structural animations\n  (like enter, move and leave) since the CSS classes may be added/removed at different points\n  depending if CSS or JavaScript animations are used.",
            "line": " sdk/lib/angular/angular.js:5253"
        },
        {
            "message": "Missing item type\nPerforms both the addition and removal of a CSS classes on an element and (during the process)\n   triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and\n   `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has\n   passed. Note that class-based animations are treated differently compared to structural animations\n   (like enter, move and leave) since the CSS classes may be added/removed at different points\n   depending if CSS or JavaScript animations are used.",
            "line": " sdk/lib/angular/angular.js:5277"
        },
        {
            "message": "Missing item type\nPerforms an inline animation on the element which applies the provided to and from CSS styles to the element.\nIf any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take\non the provided styles. For example, if a transition animation is set for the given className then the provided from and\nto styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles\nwill be given in as function paramters into the `animate` method (or as apart of the `options` parameter).",
            "line": " sdk/lib/angular/angular.js:5303"
        },
        {
            "message": "Missing item type\nThis object has two goals:\n\n- hide all the global state in the browser caused by the window object\n- abstract away all the browser specific features and inconsistencies\n\nFor tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\nservice, which can be used for convenient testing of the application without the interaction with\nthe real browser apis.",
            "line": " sdk/lib/angular/angular.js:5349"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:5364"
        },
        {
            "message": "Missing item type\nExecutes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\ncounter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.",
            "line": " sdk/lib/angular/angular.js:5388"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:5414"
        },
        {
            "message": "Missing item type\nGETTER:\nWithout any argument, this method just returns current value of location.href.\n\nSETTER:\nWith at least one argument, this method sets url to new value.\nIf html5 history api supported, pushState/replaceState is used, otherwise\nlocation.href/location.replace is used.\nReturns its own instance to allow chaining\n\nNOTE: this api is intended for use only by the $location service. Please use the\n{@link ng.$location $location service} to change url.",
            "line": " sdk/lib/angular/angular.js:5440"
        },
        {
            "message": "Missing item type\nThis method is a getter.\n\nReturn history.state or null if history.state is undefined.",
            "line": " sdk/lib/angular/angular.js:5516"
        },
        {
            "message": "Missing item type\nRegister callback function that will be called, when url changes.\n\nIt's only called when the url is changed from outside of angular:\n- user types different url into address bar\n- user clicks on history (forward/back) button\n- user clicks on a link\n\nIt's not called when url is changed by $browser.url() method\n\nThe listener gets called with new url as parameter.\n\nNOTE: this api is intended for use only by the $location service. Please use the\n{@link ng.$location $location service} to monitor url changes in angular apps.",
            "line": " sdk/lib/angular/angular.js:5572"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:5612"
        },
        {
            "message": "Missing item type\nChecks whether the url has changed outside of Angular.\nNeeds to be exported to be able to check for changes that have been done in sync,\nas hashchange/popstate events fire in async.",
            "line": " sdk/lib/angular/angular.js:5622"
        },
        {
            "message": "Missing item type\nReturns current <base href>\n(always relative - without domain)",
            "line": " sdk/lib/angular/angular.js:5633"
        },
        {
            "message": "Missing item type\nExecutes a fn asynchronously via `setTimeout(fn, delay)`.\n\nUnlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n`setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\nvia `$browser.defer.flush()`.",
            "line": " sdk/lib/angular/angular.js:5647"
        },
        {
            "message": "Missing item type\nCancels a deferred task identified with `deferId`.",
            "line": " sdk/lib/angular/angular.js:5673"
        },
        {
            "message": "Missing item type\nFactory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to\nthem.\n\n```js\n\n var cache = $cacheFactory('cacheId');\n expect($cacheFactory.get('cacheId')).toBe(cache);\n expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();\n\n cache.put(\"key\", \"value\");\n cache.put(\"another key\", \"another value\");\n\n // We've specified no options on creation\n expect(cache.info()).toEqual({id: 'cacheId', size: 2});\n\n```",
            "line": " sdk/lib/angular/angular.js:5702"
        },
        {
            "message": "Missing item type\nA cache object used to store and retrieve data, primarily used by\n{@link $http $http} and the {@link ng.directive:script script} directive to cache\ntemplates and other data.\n\n```js\n angular.module('superCache')\n   .factory('superCache', ['$cacheFactory', function($cacheFactory) {\n     return $cacheFactory('super-cache');\n   }]);\n```\n\nExample test:\n\n```js\n it('should behave like a cache', inject(function(superCache) {\n   superCache.put('key', 'value');\n   superCache.put('another key', 'another value');\n\n   expect(superCache.info()).toEqual({\n     id: 'super-cache',\n     size: 2\n   });\n\n   superCache.remove('another key');\n   expect(superCache.get('another key')).toBeUndefined();\n\n   superCache.removeAll();\n   expect(superCache.info()).toEqual({\n     id: 'super-cache',\n     size: 0\n   });\n }));\n```",
            "line": " sdk/lib/angular/angular.js:5801"
        },
        {
            "message": "Missing item type\nInserts a named entry into the {@link $cacheFactory.Cache Cache} object to be\nretrieved later, and incrementing the size of the cache if the key was not already\npresent in the cache. If behaving like an LRU cache, it will also remove stale\nentries from the set.\n\nIt will not insert undefined values into the cache.",
            "line": " sdk/lib/angular/angular.js:5842"
        },
        {
            "message": "Missing item type\nRetrieves named data stored in the {@link $cacheFactory.Cache Cache} object.",
            "line": " sdk/lib/angular/angular.js:5878"
        },
        {
            "message": "Missing item type\nRemoves an entry from the {@link $cacheFactory.Cache Cache} object.",
            "line": " sdk/lib/angular/angular.js:5902"
        },
        {
            "message": "Missing item type\nClears the cache object of any entries.",
            "line": " sdk/lib/angular/angular.js:5930"
        },
        {
            "message": "Missing item type\nDestroys the {@link $cacheFactory.Cache Cache} object entirely,\nremoving it from the {@link $cacheFactory $cacheFactory} set.",
            "line": " sdk/lib/angular/angular.js:5946"
        },
        {
            "message": "Missing item type\nRetrieve information regarding a particular {@link $cacheFactory.Cache Cache}.",
            "line": " sdk/lib/angular/angular.js:5963"
        },
        {
            "message": "Missing item type\nmakes the `entry` the freshEnd of the LRU linked list",
            "line": " sdk/lib/angular/angular.js:5985"
        },
        {
            "message": "Missing item type\nbidirectionally links two entries of the LRU linked list",
            "line": " sdk/lib/angular/angular.js:6004"
        },
        {
            "message": "Missing item type\nGet information about all the caches that have been created",
            "line": " sdk/lib/angular/angular.js:6016"
        },
        {
            "message": "Missing item type\nGet access to a cache object by the `cacheId` used when it was created.",
            "line": " sdk/lib/angular/angular.js:6034"
        },
        {
            "message": "Missing item type\nThe first time a template is used, it is loaded in the template cache for quick retrieval. You\ncan load templates directly into the cache in a `script` tag, or by consuming the\n`$templateCache` service directly.\n\nAdding via the `script` tag:\n\n```html\n  <script type=\"text/ng-template\" id=\"templateId.html\">\n    <p>This is the content of the template</p>\n  </script>\n```\n\n**Note:** the `script` tag containing the template does not need to be included in the `head` of\nthe document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,\nelement with ng-app attribute), otherwise the template will be ignored.\n\nAdding via the `$templateCache` service:\n\n```js\nvar myApp = angular.module('myApp', []);\nmyApp.run(function($templateCache) {\n  $templateCache.put('templateId.html', 'This is the content of the template');\n});\n```\n\nTo retrieve the template later, simply use it in your HTML:\n```html\n<div ng-include=\" 'templateId.html' \"></div>\n```\n\nor get it via Javascript:\n```js\n$templateCache.get('templateId.html')\n```\n\nSee {@link ng.$cacheFactory $cacheFactory}.",
            "line": " sdk/lib/angular/angular.js:6053"
        },
        {
            "message": "Missing item type\nCompiles an HTML string or DOM into a template and produces a template function, which\ncan then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.\n\nThe compilation is a process of walking the DOM tree and matching DOM elements to\n{@link ng.$compileProvider#directive directives}.\n\n<div class=\"alert alert-warning\">\n**Note:** This document is an in-depth reference of all directive options.\nFor a gentle introduction to directives with examples of common use cases,\nsee the {@link guide/directive directive guide}.\n</div>\n\n## Comprehensive Directive API\n\nThere are many different options for a directive.\n\nThe difference resides in the return value of the factory function.\nYou can either return a \"Directive Definition Object\" (see below) that defines the directive properties,\nor just the `postLink` function (all other properties will have the default values).\n\n<div class=\"alert alert-success\">\n**Best Practice:** It's recommended to use the \"directive definition object\" form.\n</div>\n\nHere's an example directive declared with a Directive Definition Object:\n\n```js\n  var myModule = angular.module(...);\n\n  myModule.directive('directiveName', function factory(injectables) {\n    var directiveDefinitionObject = {\n      priority: 0,\n      template: '<div></div>', // or // function(tElement, tAttrs) { ... },\n      // or\n      // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },\n      transclude: false,\n      restrict: 'A',\n      templateNamespace: 'html',\n      scope: false,\n      controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },\n      controllerAs: 'stringIdentifier',\n      bindToController: false,\n      require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\n      compile: function compile(tElement, tAttrs, transclude) {\n        return {\n          pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n          post: function postLink(scope, iElement, iAttrs, controller) { ... }\n        }\n        // or\n        // return function postLink( ... ) { ... }\n      },\n      // or\n      // link: {\n      //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n      //  post: function postLink(scope, iElement, iAttrs, controller) { ... }\n      // }\n      // or\n      // link: function postLink( ... ) { ... }\n    };\n    return directiveDefinitionObject;\n  });\n```\n\n<div class=\"alert alert-warning\">\n**Note:** Any unspecified options will use the default value. You can see the default values below.\n</div>\n\nTherefore the above can be simplified as:\n\n```js\n  var myModule = angular.module(...);\n\n  myModule.directive('directiveName', function factory(injectables) {\n    var directiveDefinitionObject = {\n      link: function postLink(scope, iElement, iAttrs) { ... }\n    };\n    return directiveDefinitionObject;\n    // or\n    // return function postLink(scope, iElement, iAttrs) { ... }\n  });\n```\n\n\n\n### Directive Definition Object\n\nThe directive definition object provides instructions to the {@link ng.$compile\ncompiler}. The attributes are:\n\n#### `multiElement`\nWhen this property is set to true, the HTML compiler will collect DOM nodes between\nnodes with the attributes `directive-name-start` and `directive-name-end`, and group them\ntogether as the directive elements. It is recommended that this feature be used on directives\nwhich are not strictly behavioural (such as {@link ngClick}), and which\ndo not manipulate or replace child nodes (such as {@link ngInclude}).\n\n#### `priority`\nWhen there are multiple directives defined on a single DOM element, sometimes it\nis necessary to specify the order in which the directives are applied. The `priority` is used\nto sort the directives before their `compile` functions get called. Priority is defined as a\nnumber. Directives with greater numerical `priority` are compiled first. Pre-link functions\nare also run in priority order, but post-link functions are run in reverse order. The order\nof directives with the same priority is undefined. The default priority is `0`.\n\n#### `terminal`\nIf set to true then the current `priority` will be the last set of directives\nwhich will execute (any directives at the current priority will still execute\nas the order of execution on same `priority` is undefined). Note that expressions\nand other directives used in the directive's template will also be excluded from execution.\n\n#### `scope`\n**If set to `true`,** then a new scope will be created for this directive. If multiple directives on the\nsame element request a new scope, only one new scope is created. The new scope rule does not\napply for the root of the template since the root of the template always gets a new scope.\n\n**If set to `{}` (object hash),** then a new \"isolate\" scope is created. The 'isolate' scope differs from\nnormal scope in that it does not prototypically inherit from the parent scope. This is useful\nwhen creating reusable components, which should not accidentally read or modify data in the\nparent scope.\n\nThe 'isolate' scope takes an object hash which defines a set of local scope properties\nderived from the parent scope. These local properties are useful for aliasing values for\ntemplates. Locals definition is a hash of local scope property to its source:\n\n* `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is\n  always a string since DOM attributes are strings. If no `attr` name is specified  then the\n  attribute name is assumed to be the same as the local name.\n  Given `<widget my-attr=\"hello {{name}}\">` and widget definition\n  of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect\n  the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the\n  `localName` property on the widget scope. The `name` is read from the parent scope (not\n  component scope).\n\n* `=` or `=attr` - set up bi-directional binding between a local scope property and the\n  parent scope property of name defined via the value of the `attr` attribute. If no `attr`\n  name is specified then the attribute name is assumed to be the same as the local name.\n  Given `<widget my-attr=\"parentModel\">` and widget definition of\n  `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the\n  value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected\n  in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent\n  scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You\n  can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If\n  you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use\n  `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).\n\n* `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.\n  If no `attr` name is specified then the attribute name is assumed to be the same as the\n  local name. Given `<widget my-attr=\"count = count + value\">` and widget definition of\n  `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to\n  a function wrapper for the `count = count + value` expression. Often it's desirable to\n  pass data from the isolated scope via an expression to the parent scope, this can be\n  done by passing a map of local variable names and values into the expression wrapper fn.\n  For example, if the expression is `increment(amount)` then we can specify the amount value\n  by calling the `localFn` as `localFn({amount: 22})`.\n\n\n#### `bindToController`\nWhen an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will\nallow a component to have its properties bound to the controller, rather than to scope. When the controller\nis instantiated, the initial values of the isolate scope bindings are already available.\n\n#### `controller`\nController constructor function. The controller is instantiated before the\npre-linking phase and it is shared with other directives (see\n`require` attribute). This allows the directives to communicate with each other and augment\neach other's behavior. The controller is injectable (and supports bracket notation) with the following locals:\n\n* `$scope` - Current scope associated with the element\n* `$element` - Current element\n* `$attrs` - Current attributes object for the element\n* `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:\n  `function([scope], cloneLinkingFn, futureParentElement)`.\n   * `scope`: optional argument to override the scope.\n   * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.\n   * `futureParentElement`:\n       * defines the parent to which the `cloneLinkingFn` will add the cloned elements.\n       * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.\n       * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)\n         and when the `cloneLinkinFn` is passed,\n         as those elements need to created and cloned in a special way when they are defined outside their\n         usual containers (e.g. like `<svg>`).\n       * See also the `directive.templateNamespace` property.\n\n\n#### `require`\nRequire another directive and inject its controller as the fourth argument to the linking function. The\n`require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the\ninjected argument will be an array in corresponding order. If no such directive can be\nfound, or if the directive does not have a controller, then an error is raised (unless no link function\nis specified, in which case error checking is skipped). The name can be prefixed with:\n\n* (no prefix) - Locate the required controller on the current element. Throw an error if not found.\n* `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.\n* `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.\n* `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.\n* `?^` - Attempt to locate the required controller by searching the element and its parents or pass\n  `null` to the `link` fn if not found.\n* `?^^` - Attempt to locate the required controller by searching the element's parents, or pass\n  `null` to the `link` fn if not found.\n\n\n#### `controllerAs`\nIdentifier name for a reference to the controller in the directive's scope.\nThis allows the controller to be referenced from the directive template. The directive\nneeds to define a scope for this configuration to be used. Useful in the case when\ndirective is used as component.\n\n\n#### `restrict`\nString of subset of `EACM` which restricts the directive to a specific directive\ndeclaration style. If omitted, the defaults (elements and attributes) are used.\n\n* `E` - Element name (default): `<my-directive></my-directive>`\n* `A` - Attribute (default): `<div my-directive=\"exp\"></div>`\n* `C` - Class: `<div class=\"my-directive: exp;\"></div>`\n* `M` - Comment: `<!-- directive: my-directive exp -->`\n\n\n#### `templateNamespace`\nString representing the document type used by the markup in the template.\nAngularJS needs this information as those elements need to be created and cloned\nin a special way when they are defined outside their usual containers like `<svg>` and `<math>`.\n\n* `html` - All root nodes in the template are HTML. Root nodes may also be\n  top-level elements such as `<svg>` or `<math>`.\n* `svg` - The root nodes in the template are SVG elements (excluding `<math>`).\n* `math` - The root nodes in the template are MathML elements (excluding `<svg>`).\n\nIf no `templateNamespace` is specified, then the namespace is considered to be `html`.\n\n#### `template`\nHTML markup that may:\n* Replace the contents of the directive's element (default).\n* Replace the directive's element itself (if `replace` is true - DEPRECATED).\n* Wrap the contents of the directive's element (if `transclude` is true).\n\nValue may be:\n\n* A string. For example `<div red-on-hover>{{delete_str}}</div>`.\n* A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`\n  function api below) and returns a string value.\n\n\n#### `templateUrl`\nThis is similar to `template` but the template is loaded from the specified URL, asynchronously.\n\nBecause template loading is asynchronous the compiler will suspend compilation of directives on that element\nfor later when the template has been resolved.  In the meantime it will continue to compile and link\nsibling and parent elements as though this element had not contained any directives.\n\nThe compiler does not suspend the entire compilation to wait for templates to be loaded because this\nwould result in the whole app \"stalling\" until all templates are loaded asynchronously - even in the\ncase when only one deeply nested directive has `templateUrl`.\n\nTemplate loading is asynchronous even if the template has been preloaded into the {@link $templateCache}\n\nYou can specify `templateUrl` as a string representing the URL or as a function which takes two\narguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns\na string value representing the url.  In either case, the template URL is passed through {@link\n$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.\n\n\n#### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)\nspecify what the template should replace. Defaults to `false`.\n\n* `true` - the template will replace the directive's element.\n* `false` - the template will replace the contents of the directive's element.\n\nThe replacement process migrates all of the attributes / classes from the old element to the new\none. See the {@link guide/directive#template-expanding-directive\nDirectives Guide} for an example.\n\nThere are very few scenarios where element replacement is required for the application function,\nthe main one being reusable custom components that are used within SVG contexts\n(because SVG doesn't work with custom elements in the DOM tree).\n\n#### `transclude`\nExtract the contents of the element where the directive appears and make it available to the directive.\nThe contents are compiled and provided to the directive as a **transclusion function**. See the\n{@link $compile#transclusion Transclusion} section below.\n\nThere are two kinds of transclusion depending upon whether you want to transclude just the contents of the\ndirective's element or the entire element:\n\n* `true` - transclude the content (i.e. the child nodes) of the directive's element.\n* `'element'` - transclude the whole of the directive's element including any directives on this\n  element that defined at a lower priority than this directive. When used, the `template`\n  property is ignored.\n\n\n#### `compile`\n\n```js\n  function compile(tElement, tAttrs, transclude) { ... }\n```\n\nThe compile function deals with transforming the template DOM. Since most directives do not do\ntemplate transformation, it is not used often. The compile function takes the following arguments:\n\n  * `tElement` - template element - The element where the directive has been declared. It is\n    safe to do template transformation on the element and child elements only.\n\n  * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared\n    between all directive compile functions.\n\n  * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`\n\n<div class=\"alert alert-warning\">\n**Note:** The template instance and the link instance may be different objects if the template has\nbeen cloned. For this reason it is **not** safe to do anything other than DOM transformations that\napply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration\nshould be done in a linking function rather than in a compile function.\n</div>\n\n<div class=\"alert alert-warning\">\n**Note:** The compile function cannot handle directives that recursively use themselves in their\nown templates or compile functions. Compiling these directives results in an infinite loop and a\nstack overflow errors.\n\nThis can be avoided by manually using $compile in the postLink function to imperatively compile\na directive's template instead of relying on automatic template compilation via `template` or\n`templateUrl` declaration or manual compilation inside the compile function.\n</div>\n\n<div class=\"alert alert-danger\">\n**Note:** The `transclude` function that is passed to the compile function is deprecated, as it\n  e.g. does not know about the right outer scope. Please use the transclude function that is passed\n  to the link function instead.\n</div>\n\nA compile function can have a return value which can be either a function or an object.\n\n* returning a (post-link) function - is equivalent to registering the linking function via the\n  `link` property of the config object when the compile function is empty.\n\n* returning an object with function(s) registered via `pre` and `post` properties - allows you to\n  control when a linking function should be called during the linking phase. See info about\n  pre-linking and post-linking functions below.\n\n\n#### `link`\nThis property is used only if the `compile` property is not defined.\n\n```js\n  function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }\n```\n\nThe link function is responsible for registering DOM listeners as well as updating the DOM. It is\nexecuted after the template has been cloned. This is where most of the directive logic will be\nput.\n\n  * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the\n    directive for registering {@link ng.$rootScope.Scope#$watch watches}.\n\n  * `iElement` - instance element - The element where the directive is to be used. It is safe to\n    manipulate the children of the element only in `postLink` function since the children have\n    already been linked.\n\n  * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared\n    between all directive linking functions.\n\n  * `controller` - the directive's required controller instance(s) - Instances are shared\n    among all directives, which allows the directives to use the controllers as a communication\n    channel. The exact value depends on the directive's `require` property:\n      * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one\n      * `string`: the controller instance\n      * `array`: array of controller instances\n\n    If a required controller cannot be found, and it is optional, the instance is `null`,\n    otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.\n\n    Note that you can also require the directive's own controller - it will be made available like\n    like any other controller.\n\n  * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.\n    This is the same as the `$transclude`\n    parameter of directive controllers, see there for details.\n    `function([scope], cloneLinkingFn, futureParentElement)`.\n\n#### Pre-linking function\n\nExecuted before the child elements are linked. Not safe to do DOM transformation since the\ncompiler linking function will fail to locate the correct elements for linking.\n\n#### Post-linking function\n\nExecuted after the child elements are linked.\n\nNote that child elements that contain `templateUrl` directives will not have been compiled\nand linked since they are waiting for their template to load asynchronously and their own\ncompilation and linking has been suspended until that occurs.\n\nIt is safe to do DOM transformation in the post-linking function on elements that are not waiting\nfor their async templates to be resolved.\n\n\n### Transclusion\n\nTransclusion is the process of extracting a collection of DOM element from one part of the DOM and\ncopying them to another part of the DOM, while maintaining their connection to the original AngularJS\nscope from where they were taken.\n\nTransclusion is used (often with {@link ngTransclude}) to insert the\noriginal contents of a directive's element into a specified place in the template of the directive.\nThe benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded\ncontent has access to the properties on the scope from which it was taken, even if the directive\nhas isolated scope.\nSee the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.\n\nThis makes it possible for the widget to have private state for its template, while the transcluded\ncontent has access to its originating scope.\n\n<div class=\"alert alert-warning\">\n**Note:** When testing an element transclude directive you must not place the directive at the root of the\nDOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives\nTesting Transclusion Directives}.\n</div>\n\n#### Transclusion Functions\n\nWhen a directive requests transclusion, the compiler extracts its contents and provides a **transclusion\nfunction** to the directive's `link` function and `controller`. This transclusion function is a special\n**linking function** that will return the compiled contents linked to a new transclusion scope.\n\n<div class=\"alert alert-info\">\nIf you are just using {@link ngTransclude} then you don't need to worry about this function, since\nngTransclude will deal with it for us.\n</div>\n\nIf you want to manually control the insertion and removal of the transcluded content in your directive\nthen you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery\nobject that contains the compiled DOM, which is linked to the correct transclusion scope.\n\nWhen you call a transclusion function you can pass in a **clone attach function**. This function accepts\ntwo parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded\ncontent and the `scope` is the newly created transclusion scope, to which the clone is bound.\n\n<div class=\"alert alert-info\">\n**Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function\nsince you then get a fresh clone of the original DOM and also have access to the new transclusion scope.\n</div>\n\nIt is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone\nattach function**:\n\n```js\nvar transcludedContent, transclusionScope;\n\n$transclude(function(clone, scope) {\n  element.append(clone);\n  transcludedContent = clone;\n  transclusionScope = scope;\n});\n```\n\nLater, if you want to remove the transcluded content from your DOM then you should also destroy the\nassociated transclusion scope:\n\n```js\ntranscludedContent.remove();\ntransclusionScope.$destroy();\n```\n\n<div class=\"alert alert-info\">\n**Best Practice**: if you intend to add and remove transcluded content manually in your directive\n(by calling the transclude function to get the DOM and calling `element.remove()` to remove it),\nthen you are also responsible for calling `$destroy` on the transclusion scope.\n</div>\n\nThe built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}\nautomatically destroy their transluded clones as necessary so you do not need to worry about this if\nyou are simply using {@link ngTransclude} to inject the transclusion into your directive.\n\n\n#### Transclusion Scopes\n\nWhen you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion\nscope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed\nwhen the directive's scope gets destroyed) but it inherits the properties of the scope from which it\nwas taken.\n\nFor example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look\nlike this:\n\n```html\n<div ng-app>\n  <div isolate>\n    <div transclusion>\n    </div>\n  </div>\n</div>\n```\n\nThe `$parent` scope hierarchy will look like this:\n\n```\n- $rootScope\n  - isolate\n    - transclusion\n```\n\nbut the scopes will inherit prototypically from different scopes to their `$parent`.\n\n```\n- $rootScope\n  - transclusion\n- isolate\n```\n\n\n### Attributes\n\nThe {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the\n`link()` or `compile()` functions. It has a variety of uses.\n\naccessing *Normalized attribute names:*\nDirectives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.\nthe attributes object allows for normalized access to\n  the attributes.\n\n* *Directive inter-communication:* All directives share the same instance of the attributes\n  object which allows the directives to use the attributes object as inter directive\n  communication.\n\n* *Supports interpolation:* Interpolation attributes are assigned to the attribute object\n  allowing other directives to read the interpolated value.\n\n* *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes\n  that contain interpolation (e.g. `src=\"{{bar}}\"`). Not only is this very efficient but it's also\n  the only way to easily get the actual value because during the linking phase the interpolation\n  hasn't been evaluated yet and so the value is at this time set to `undefined`.\n\n```js\nfunction linkingFn(scope, elm, attrs, ctrl) {\n  // get the attribute value\n  console.log(attrs.ngModel);\n\n  // change the attribute\n  attrs.$set('ngModel', 'new value');\n\n  // observe changes to interpolated attribute\n  attrs.$observe('ngModel', function(value) {\n    console.log('ngModel has changed value to ' + value);\n  });\n}\n```\n\n## Example\n\n<div class=\"alert alert-warning\">\n**Note**: Typically directives are registered with `module.directive`. The example below is\nto illustrate how `$compile` works.\n</div>\n\n<example module=\"compileExample\">\n  <file name=\"index.html\">\n   <script>\n     angular.module('compileExample', [], function($compileProvider) {\n       // configure new 'compile' directive by passing a directive\n       // factory function. The factory function injects the '$compile'\n       $compileProvider.directive('compile', function($compile) {\n         // directive factory creates a link function\n         return function(scope, element, attrs) {\n           scope.$watch(\n             function(scope) {\n                // watch the 'compile' expression for changes\n               return scope.$eval(attrs.compile);\n             },\n             function(value) {\n               // when the 'compile' expression changes\n               // assign it into the current DOM\n               element.html(value);\n\n               // compile the new DOM and link it to the current\n               // scope.\n               // NOTE: we only compile .childNodes so that\n               // we don't get into infinite loop compiling ourselves\n               $compile(element.contents())(scope);\n             }\n           );\n         };\n       });\n     })\n     .controller('GreeterController', ['$scope', function($scope) {\n       $scope.name = 'Angular';\n       $scope.html = 'Hello {{name}}';\n     }]);\n   </script>\n   <div ng-controller=\"GreeterController\">\n     <input ng-model=\"name\"> <br/>\n     <textarea ng-model=\"html\"></textarea> <br/>\n     <div compile=\"html\"></div>\n   </div>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should auto compile', function() {\n      var textarea = $('textarea');\n      var output = $('div[compile]');\n      // The initial state reads 'Hello Angular'.\n      expect(output.getText()).toBe('Hello Angular');\n      textarea.clear();\n      textarea.sendKeys('{{name}}!');\n      expect(output.getText()).toBe('Angular!');\n    });\n  </file>\n</example>",
            "line": " sdk/lib/angular/angular.js:6131"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:6817"
        },
        {
            "message": "Missing item type\nRegister a new directive with the compiler.",
            "line": " sdk/lib/angular/angular.js:6914"
        },
        {
            "message": "Missing item type\nRetrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at preventing XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "line": " sdk/lib/angular/angular.js:6974"
        },
        {
            "message": "Missing item type\nRetrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "line": " sdk/lib/angular/angular.js:7004"
        },
        {
            "message": "Missing item type\nCall this method to enable/disable various debug runtime information in the compiler such as adding\nbinding information and a reference to the current scope on to DOM elements.\nIf enabled, the compiler will add the following to DOM elements that have been bound to the scope\n* `ng-binding` CSS class\n* `$binding` data property containing an array of the binding expressions\n\nYou may want to disable this in production for a significant performance boost. See\n{@link guide/production#disabling-debug-data Disabling Debug Data} for more.\n\nThe default value is true.",
            "line": " sdk/lib/angular/angular.js:7033"
        },
        {
            "message": "Missing item type\nConverts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or\n`data-`) to its normalized, camelCase form.\n\nAlso there is special case for Moz prefix starting with upper case letter.\n\nFor further information check out the guide on {@link guide/directive#matching-directives Matching Directives}",
            "line": " sdk/lib/angular/angular.js:7087"
        },
        {
            "message": "Missing item type\nAdds the CSS class value specified by the classVal parameter to the element. If animations\nare enabled then an animation will be triggered for the class addition.",
            "line": " sdk/lib/angular/angular.js:7105"
        },
        {
            "message": "Missing item type\nRemoves the CSS class value specified by the classVal parameter from the element. If\nanimations are enabled then an animation will be triggered for the class removal.",
            "line": " sdk/lib/angular/angular.js:7122"
        },
        {
            "message": "Missing item type\nAdds and removes the appropriate CSS class values to the element based on the difference\nbetween the new and old CSS class values (specified as newClasses and oldClasses).",
            "line": " sdk/lib/angular/angular.js:7139"
        },
        {
            "message": "Missing item type\nSet a normalized attribute on the element in a way such that all directives\ncan share the attribute. This function properly handles boolean attributes.",
            "line": " sdk/lib/angular/angular.js:7163"
        },
        {
            "message": "Missing item type\nObserves an interpolated attribute.\n\nThe observer function will be invoked once during the next `$digest` following\ncompilation. The observer is then invoked whenever the interpolated value\nchanges.",
            "line": " sdk/lib/angular/angular.js:7265"
        },
        {
            "message": "Missing item type\nCompile function matches each node in nodeList against the directives. Once all directives\nfor a particular node are collected their compile functions are executed. The compile\nfunctions return values - the linking functions - are combined into a composite linking\nfunction, which is the a linking function for the node.",
            "line": " sdk/lib/angular/angular.js:7431"
        },
        {
            "message": "Missing item type\nLooks for directives on the given node and adds them to the directive collection which is\nsorted.",
            "line": " sdk/lib/angular/angular.js:7570"
        },
        {
            "message": "Missing item type\nGiven a node with an directive-start it collects all of the siblings until it finds\ndirective-end.",
            "line": " sdk/lib/angular/angular.js:7680"
        },
        {
            "message": "Missing item type\nWrapper for linking function which converts normal linking function into a grouped\nlinking function.",
            "line": " sdk/lib/angular/angular.js:7712"
        },
        {
            "message": "Missing item type\nOnce the directives have been collected, their compile functions are executed. This method\nis responsible for inlining directive templates as well as terminating the application\nof the directives if the terminal directive has been reached.",
            "line": " sdk/lib/angular/angular.js:7727"
        },
        {
            "message": "Missing item type\nlooks up the directive and decorates it with exception handling and proper parameters. We\ncall this the boundDirective.",
            "line": " sdk/lib/angular/angular.js:8189"
        },
        {
            "message": "Missing item type\nlooks up the directive and returns true if it is a multi-element directive,\nand therefore requires DOM nodes between -start and -end markers to be grouped\ntogether.",
            "line": " sdk/lib/angular/angular.js:8227"
        },
        {
            "message": "Missing item type\nWhen the element is replaced with HTML template then the new attributes\non the template need to be merged with the existing attributes in the DOM.\nThe desired effect is to have both of the attributes present.",
            "line": " sdk/lib/angular/angular.js:8248"
        },
        {
            "message": "Missing item type\nSorting function for bound directives.",
            "line": " sdk/lib/angular/angular.js:8405"
        },
        {
            "message": "Missing item type\nThis is a special jqLite.replaceWith, which can replace items which\nhave no parents, provided that the containing jqLite collection is provided.",
            "line": " sdk/lib/angular/angular.js:8557"
        },
        {
            "message": "Missing item type\nConverts all accepted directives format into proper directive name.",
            "line": " sdk/lib/angular/angular.js:8763"
        },
        {
            "message": "Missing item type\nA shared object between directive compile / linking functions which contains normalized DOM\nelement attributes. The values reflect current binding state `{{ }}`. The normalization is\nneeded since all of these are treated as equivalent in Angular:\n\n```\n   <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n```",
            "line": " sdk/lib/angular/angular.js:8771"
        },
        {
            "message": "Missing item type\nA map of DOM element attribute names to the normalized name. This is\nneeded to do reverse lookup from normalized name back to actual name.",
            "line": " sdk/lib/angular/angular.js:8785"
        },
        {
            "message": "Missing item type\nSet DOM element attribute value.",
            "line": " sdk/lib/angular/angular.js:8795"
        },
        {
            "message": "Missing item type\nClosure compiler type information",
            "line": " sdk/lib/angular/angular.js:8812"
        },
        {
            "message": "Missing item type\nThe {@link ng.$controller $controller service} is used by Angular to create new\ncontrollers.\n\nThis provider allows controller registration via the\n{@link ng.$controllerProvider#register register} method.",
            "line": " sdk/lib/angular/angular.js:8877"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:8891"
        },
        {
            "message": "Missing item type\nIf called, allows `$controller` to find controller constructors on `window`",
            "line": " sdk/lib/angular/angular.js:8908"
        },
        {
            "message": "Missing item type\n`$controller` service is responsible for instantiating controllers.\n\nIt's just a simple call to {@link auto.$injector $injector}, but extracted into\na service, so that one can override this service with [BC version](https://gist.github.com/1649788).",
            "line": " sdk/lib/angular/angular.js:8920"
        },
        {
            "message": "Missing item type\nA {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.",
            "line": " sdk/lib/angular/angular.js:9035"
        },
        {
            "message": "Missing item type\nAny uncaught exception in angular expressions is delegated to this service.\nThe default implementation simply delegates to `$log.error` which logs it into\nthe browser console.\n\nIn unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n{@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n\n## Example:\n\n```js\n  angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {\n    return function(exception, cause) {\n      exception.message += ' (caused by \"' + cause + '\")';\n      throw exception;\n    };\n  });\n```\n\nThis example will override the normal action of `$exceptionHandler`, to make angular\nexceptions fail hard when they happen, instead of just logging to the console.\n\n<hr />\nNote, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`\nmethods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}\n(unless executed during a digest).\n\nIf you wish, you can manually delegate exceptions, e.g.\n`try { ... } catch(e) { $exceptionHandler(e); }`",
            "line": " sdk/lib/angular/angular.js:9066"
        },
        {
            "message": "Missing item type\nDefault {@link $http `$http`} params serializer that converts objects to strings\naccording to the following rules:\n\n* `{'foo': 'bar'}` results in `foo=bar`\n* `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)\n* `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)\n* `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D\"` (stringified and encoded representation of an object)\n\nNote that serializer will sort the request parameters alphabetically.",
            "line": " sdk/lib/angular/angular.js:9132"
        },
        {
            "message": "Missing item type\nAlternative {@link $http `$http`} params serializer that follows\njQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.\nThe serializer will also sort the params alphabetically.\n\nTo use it for serializing `$http` request parameters, set it as the `paramSerializer` property:\n\n```js\n$http({\n  url: myUrl,\n  method: 'GET',\n  params: myParams,\n  paramSerializer: '$httpParamSerializerJQLike'\n});\n```\n\nIt is also possible to set it as the default `paramSerializer` in the\n{@link $httpProvider#defaults `$httpProvider`}.\n\nAdditionally, you can inject the serializer and use it explicitly, for example to serialize\nform data for submission:\n\n```js\n.controller(function($http, $httpParamSerializerJQLike) {\n  //...\n\n  $http({\n    url: myUrl,\n    method: 'POST',\n    data: $httpParamSerializerJQLike(myData),\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n\n});\n```",
            "line": " sdk/lib/angular/angular.js:9169"
        },
        {
            "message": "Missing item type\nParse headers into key value object",
            "line": " sdk/lib/angular/angular.js:9261"
        },
        {
            "message": "Missing item type\nReturns a function that provides access to parsed headers.\n\nHeaders are lazy parsed when first requested.",
            "line": " sdk/lib/angular/angular.js:9291"
        },
        {
            "message": "Missing item type\nChain all given functions\n\nThis function is used for both request and response transforming",
            "line": " sdk/lib/angular/angular.js:9322"
        },
        {
            "message": "Missing item type\nUse `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.",
            "line": " sdk/lib/angular/angular.js:9351"
        },
        {
            "message": "Missing item type\nObject containing default values for all {@link ng.$http $http} requests.\n\n- **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}\nthat will provide the cache for all requests who set their `cache` property to `true`.\nIf you set the `defaults.cache = false` then only requests that specify their own custom\ncache object will be cached. See {@link $http#caching $http Caching} for more information.\n\n- **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.\nDefaults value is `'XSRF-TOKEN'`.\n\n- **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the\nXSRF token. Defaults value is `'X-XSRF-TOKEN'`.\n\n- **`defaults.headers`** - {Object} - Default headers for all $http requests.\nRefer to {@link ng.$http#setting-http-headers $http} for documentation on\nsetting default headers.\n    - **`defaults.headers.common`**\n    - **`defaults.headers.post`**\n    - **`defaults.headers.put`**\n    - **`defaults.headers.patch`**\n\n\n- **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function\n used to the prepare string representation of request parameters (specified as an object).\n If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.\n Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.",
            "line": " sdk/lib/angular/angular.js:9358"
        },
        {
            "message": "Missing item type\nConfigure $http service to combine processing of multiple http responses received at around\nthe same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in\nsignificant performance improvement for bigger applications that make many HTTP requests\nconcurrently (common during application bootstrap).\n\nDefaults to false. If no value is specified, returns the current configured value.",
            "line": " sdk/lib/angular/angular.js:9417"
        },
        {
            "message": "Missing item type\nArray containing service factories for all synchronous or asynchronous {@link ng.$http $http}\npre-processing of request or postprocessing of responses.\n\nThese service factories are ordered by request, i.e. they are applied in the same order as the\narray, on request, but reverse order, on response.\n\n{@link ng.$http#interceptors Interceptors detailed info}",
            "line": " sdk/lib/angular/angular.js:9444"
        },
        {
            "message": "Missing item type\nMake sure that default param serializer is exposed as a function",
            "line": " sdk/lib/angular/angular.js:9464"
        },
        {
            "message": "Missing item type\nInterceptors stored in reverse order. Inner interceptors before outer interceptors.\nThe reversal is needed so that we can build up the interception chain around the\nserver request.",
            "line": " sdk/lib/angular/angular.js:9470"
        },
        {
            "message": "Missing item type\nShortcut method to perform `GET` request.",
            "line": " sdk/lib/angular/angular.js:10146"
        },
        {
            "message": "Missing item type\nShortcut method to perform `DELETE` request.",
            "line": " sdk/lib/angular/angular.js:10158"
        },
        {
            "message": "Missing item type\nShortcut method to perform `HEAD` request.",
            "line": " sdk/lib/angular/angular.js:10170"
        },
        {
            "message": "Missing item type\nShortcut method to perform `JSONP` request.",
            "line": " sdk/lib/angular/angular.js:10182"
        },
        {
            "message": "Missing item type\nShortcut method to perform `POST` request.",
            "line": " sdk/lib/angular/angular.js:10196"
        },
        {
            "message": "Missing item type\nShortcut method to perform `PUT` request.",
            "line": " sdk/lib/angular/angular.js:10209"
        },
        {
            "message": "Missing item type\nShortcut method to perform `PATCH` request.",
            "line": " sdk/lib/angular/angular.js:10222"
        },
        {
            "message": "Missing item type\nRuntime equivalent of the `$httpProvider.defaults` property. Allows configuration of\ndefault headers, withCredentials as well as request and response transformations.\n\nSee \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.",
            "line": " sdk/lib/angular/angular.js:10236"
        },
        {
            "message": "Missing item type\nMakes the request.\n\n!!! ACCESSES CLOSURE VARS:\n$httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests",
            "line": " sdk/lib/angular/angular.js:10277"
        },
        {
            "message": "Missing item type\nCallback registered to $httpBackend():\n - caches the response if desired\n - resolves the raw $http promise\n - calls $apply",
            "line": " sdk/lib/angular/angular.js:10340"
        },
        {
            "message": "Missing item type\nResolves the raw $http promise.",
            "line": " sdk/lib/angular/angular.js:10369"
        },
        {
            "message": "Missing item type\nHTTP backend used by the {@link ng.$http service} that delegates to\nXMLHttpRequest object or JSONP and deals with browser incompatibilities.\n\nYou should never need to use this service directly, instead use the higher-level abstractions:\n{@link ng.$http $http} or {@link ngResource.$resource $resource}.\n\nDuring testing this implementation is swapped with {@link ngMock.$httpBackend mock\n$httpBackend} which can be trained with responses.",
            "line": " sdk/lib/angular/angular.js:10409"
        },
        {
            "message": "Missing item type\nUsed for configuring the interpolation markup. Defaults to `{{` and `}}`.",
            "line": " sdk/lib/angular/angular.js:10590"
        },
        {
            "message": "Missing item type\nSymbol to denote start of expression in the interpolated string. Defaults to `{{`.",
            "line": " sdk/lib/angular/angular.js:10629"
        },
        {
            "message": "Missing item type\nSymbol to denote the end of expression in the interpolated string. Defaults to `}}`.",
            "line": " sdk/lib/angular/angular.js:10647"
        },
        {
            "message": "Missing item type\nCompiles a string with markup into an interpolation function. This service is used by the\nHTML {@link ng.$compile $compile} service for data binding. See\n{@link ng.$interpolateProvider $interpolateProvider} for configuring the\ninterpolation markup.\n\n\n```js\n  var $interpolate = ...; // injected\n  var exp = $interpolate('Hello {{name | uppercase}}!');\n  expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');\n```\n\n`$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is\n`true`, the interpolation function will return `undefined` unless all embedded expressions\nevaluate to a value other than `undefined`.\n\n```js\n  var $interpolate = ...; // injected\n  var context = {greeting: 'Hello', name: undefined };\n\n  // default \"forgiving\" mode\n  var exp = $interpolate('{{greeting}} {{name}}!');\n  expect(exp(context)).toEqual('Hello !');\n\n  // \"allOrNothing\" mode\n  exp = $interpolate('{{greeting}} {{name}}!', false, null, true);\n  expect(exp(context)).toBeUndefined();\n  context.name = 'Angular';\n  expect(exp(context)).toEqual('Hello Angular!');\n```\n\n`allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.\n\n####Escaped Interpolation\n$interpolate provides a mechanism for escaping interpolation markers. Start and end markers\ncan be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).\nIt will be rendered as a regular start/end marker, and will not be interpreted as an expression\nor binding.\n\nThis enables web-servers to prevent script injection attacks and defacing attacks, to some\ndegree, while also enabling code examples to work without relying on the\n{@link ng.directive:ngNonBindable ngNonBindable} directive.\n\n**For security purposes, it is strongly encouraged that web servers escape user-supplied data,\nreplacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all\ninterpolation start/end markers with their escaped counterparts.**\n\nEscaped interpolation markers are only replaced with the actual interpolation markers in rendered\noutput when the $interpolate service processes the text. So, for HTML elements interpolated\nby {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter\nset to `true`, the interpolated text must contain an unescaped interpolation expression. As such,\nthis is typically useful only when user-data is used in rendering a template from the server, or\nwhen otherwise untrusted data is used by a directive.\n\n<example>\n <file name=\"index.html\">\n   <div ng-init=\"username='A user'\">\n     <p ng-init=\"apptitle='Escaping demo'\">{{apptitle}}: \\{\\{ username = \"defaced value\"; \\}\\}\n       </p>\n     <p><strong>{{username}}</strong> attempts to inject code which will deface the\n       application, but fails to accomplish their task, because the server has correctly\n       escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)\n       characters.</p>\n     <p>Instead, the result of the attempted script injection is visible, and can be removed\n       from the database by an administrator.</p>\n   </div>\n </file>\n</example>",
            "line": " sdk/lib/angular/angular.js:10698"
        },
        {
            "message": "Missing item type\nSymbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n\nUse {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change\nthe symbol.",
            "line": " sdk/lib/angular/angular.js:10893"
        },
        {
            "message": "Missing item type\nSymbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n\nUse {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change\nthe symbol.",
            "line": " sdk/lib/angular/angular.js:10909"
        },
        {
            "message": "Missing item type\nAngular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`\nmilliseconds.\n\nThe return value of registering an interval function is a promise. This promise will be\nnotified upon each tick of the interval, and will be resolved after `count` iterations, or\nrun indefinitely if `count` is not defined. The value of the notification will be the\nnumber of iterations that have run.\nTo cancel an interval, call `$interval.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\nmove forward by `millis` milliseconds and trigger any functions scheduled to run in that\ntime.\n\n<div class=\"alert alert-warning\">\n**Note**: Intervals created by this service must be explicitly destroyed when you are finished\nwith them.  In particular they are not automatically destroyed when a controller's scope or a\ndirective's element are destroyed.\nYou should take this into consideration and make sure to always cancel the interval at the\nappropriate moment.  See the example below for more details on how and when to do this.\n</div>",
            "line": " sdk/lib/angular/angular.js:10934"
        },
        {
            "message": "Missing item type\nCancels a task associated with the `promise`.",
            "line": " sdk/lib/angular/angular.js:11094"
        },
        {
            "message": "Missing item type\n$locale service provides localization rules for various Angular components. As of right now the\nonly public api is:\n\n* `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)",
            "line": " sdk/lib/angular/angular.js:11118"
        },
        {
            "message": "Missing item type\nEncode path using encodeUriSegment, ignoring forward slashes",
            "line": " sdk/lib/angular/angular.js:11203"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:11247"
        },
        {
            "message": "Missing item type\nLocationHtml5Url represents an url\nThis object is exposed as $location service when HTML5 mode is enabled and supported",
            "line": " sdk/lib/angular/angular.js:11281"
        },
        {
            "message": "Missing item type\nParse given html5 (regular) url string into properties",
            "line": " sdk/lib/angular/angular.js:11296"
        },
        {
            "message": "Missing item type\nCompose url and update `absUrl` property",
            "line": " sdk/lib/angular/angular.js:11317"
        },
        {
            "message": "Missing item type\nLocationHashbangUrl represents url\nThis object is exposed as $location service when developer doesn't opt into html5 mode.\nIt also serves as the base class for html5 mode fallback on legacy browsers.",
            "line": " sdk/lib/angular/angular.js:11359"
        },
        {
            "message": "Missing item type\nParse given hashbang url into properties",
            "line": " sdk/lib/angular/angular.js:11374"
        },
        {
            "message": "Missing item type\nCompose hashbang url and update `absUrl` property",
            "line": " sdk/lib/angular/angular.js:11449"
        },
        {
            "message": "Missing item type\nLocationHashbangUrl represents url\nThis object is exposed as $location service when html5 history api is enabled but the browser\ndoes not support it.",
            "line": " sdk/lib/angular/angular.js:11471"
        },
        {
            "message": "Missing item type\nAre we in html5 mode?",
            "line": " sdk/lib/angular/angular.js:11524"
        },
        {
            "message": "Missing item type\nHas any change been replacing?",
            "line": " sdk/lib/angular/angular.js:11530"
        },
        {
            "message": "Missing item type\nThis method is getter only.\n\nReturn full url representation with all segments encoded according to rules specified in\n[RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar absUrl = $location.absUrl();\n// => \"http://example.com/#/some/path?foo=bar&baz=xoxo\"\n```",
            "line": " sdk/lib/angular/angular.js:11536"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn url (e.g. `/path?a=b#hash`) when called without any parameter.\n\nChange path, search and hash, when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar url = $location.url();\n// => \"/some/path?foo=bar&baz=xoxo\"\n```",
            "line": " sdk/lib/angular/angular.js:11557"
        },
        {
            "message": "Missing item type\nThis method is getter only.\n\nReturn protocol of current url.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar protocol = $location.protocol();\n// => \"http\"\n```",
            "line": " sdk/lib/angular/angular.js:11591"
        },
        {
            "message": "Missing item type\nThis method is getter only.\n\nReturn host of current url.\n\nNote: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar host = $location.host();\n// => \"example.com\"\n\n// given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo\nhost = $location.host();\n// => \"example.com\"\nhost = location.host;\n// => \"example.com:8080\"\n```",
            "line": " sdk/lib/angular/angular.js:11611"
        },
        {
            "message": "Missing item type\nThis method is getter only.\n\nReturn port of current url.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar port = $location.port();\n// => 80\n```",
            "line": " sdk/lib/angular/angular.js:11639"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn path of current url when called without any parameter.\n\nChange path when called with parameter and return `$location`.\n\nNote: Path should always begin with forward slash (/), this method will add the forward slash\nif it is missing.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar path = $location.path();\n// => \"/some/path\"\n```",
            "line": " sdk/lib/angular/angular.js:11659"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn search part (as object) of current url when called without any parameter.\n\nChange search part when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar searchObject = $location.search();\n// => {foo: 'bar', baz: 'xoxo'}\n\n// set foo to 'yipee'\n$location.search('foo', 'yipee');\n// $location.search() => {foo: 'yipee', baz: 'xoxo'}\n```",
            "line": " sdk/lib/angular/angular.js:11688"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn hash fragment when called without any parameter.\n\nChange hash fragment when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue\nvar hash = $location.hash();\n// => \"hashValue\"\n```",
            "line": " sdk/lib/angular/angular.js:11766"
        },
        {
            "message": "Missing item type\nIf called, all changes to $location during current `$digest` will be replacing current history\nrecord, instead of adding new one.",
            "line": " sdk/lib/angular/angular.js:11791"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn the history state object when called without any parameter.\n\nChange the history state object when called with one parameter and return `$location`.\nThe state object is later passed to `pushState` or `replaceState`.\n\nNOTE: This method is supported only in HTML5 mode and only in browsers supporting\nthe HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support\nolder browsers (like IE9 or Android < 4.0), don't use this method.",
            "line": " sdk/lib/angular/angular.js:11808"
        },
        {
            "message": "Missing item type\nThe $location service parses the URL in the browser address bar (based on the\n[window.location](https://developer.mozilla.org/en/window.location)) and makes the URL\navailable to your application. Changes to the URL in the address bar are reflected into\n$location service and changes to $location are reflected into the browser address bar.\n\n**The $location service:**\n\n- Exposes the current URL in the browser address bar, so you can\n  - Watch and observe the URL.\n  - Change the URL.\n- Synchronizes the URL with the browser when the user\n  - Changes the address bar.\n  - Clicks the back or forward button (or clicks a History link).\n  - Clicks on a link.\n- Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n\nFor more information see {@link guide/$location Developer Guide: Using $location}",
            "line": " sdk/lib/angular/angular.js:11867"
        },
        {
            "message": "Missing item type\nUse the `$locationProvider` to configure how the application deep linking paths are stored.",
            "line": " sdk/lib/angular/angular.js:11893"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:11907"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:11923"
        },
        {
            "message": "Missing item type\nBroadcasted before a URL will change.\n\nThis change can be prevented by calling\n`preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more\ndetails about event object. Upon successful change\n{@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.\n\nThe `newState` and `oldState` parameters may be defined only in HTML5 mode and when\nthe browser supports the HTML5 History API.",
            "line": " sdk/lib/angular/angular.js:11966"
        },
        {
            "message": "Missing item type\nBroadcasted after a URL was changed.\n\nThe `newState` and `oldState` parameters may be defined only in HTML5 mode and when\nthe browser supports the HTML5 History API.",
            "line": " sdk/lib/angular/angular.js:11988"
        },
        {
            "message": "Missing item type\nSimple service for logging. Default implementation safely writes the message\ninto the browser's console (if present).\n\nThe main purpose of this service is to simplify debugging and troubleshooting.\n\nThe default is to log `debug` messages. You can use\n{@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.",
            "line": " sdk/lib/angular/angular.js:12180"
        },
        {
            "message": "Missing item type\nUse the `$logProvider` to configure how the application logs messages",
            "line": " sdk/lib/angular/angular.js:12218"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:12228"
        },
        {
            "message": "Missing item type\nWrite a log message",
            "line": " sdk/lib/angular/angular.js:12246"
        },
        {
            "message": "Missing item type\nWrite an information message",
            "line": " sdk/lib/angular/angular.js:12255"
        },
        {
            "message": "Missing item type\nWrite a warning message",
            "line": " sdk/lib/angular/angular.js:12264"
        },
        {
            "message": "Missing item type\nWrite an error message",
            "line": " sdk/lib/angular/angular.js:12273"
        },
        {
            "message": "Missing item type\nWrite a debug message",
            "line": " sdk/lib/angular/angular.js:12282"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:12444"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:13933"
        },
        {
            "message": "Missing item type\nConverts Angular {@link guide/expression expression} into a function.\n\n```js\n  var getter = $parse('user.name');\n  var setter = getter.assign;\n  var context = {user:{name:'angular'}};\n  var locals = {user:{name:'local'}};\n\n  expect(getter(context)).toEqual('angular');\n  setter(context, 'newValue');\n  expect(context.user.name).toEqual('newValue');\n  expect(getter(context, locals)).toEqual('local');\n```",
            "line": " sdk/lib/angular/angular.js:13991"
        },
        {
            "message": "Missing item type\n`$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}\n service.",
            "line": " sdk/lib/angular/angular.js:14032"
        },
        {
            "message": "Missing item type\nA service that helps you run functions asynchronously, and use their return values (or exceptions)\nwhen they are done processing.\n\nThis is an implementation of promises/deferred objects inspired by\n[Kris Kowal's Q](https://github.com/kriskowal/q).\n\n$q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred\nimplementations, and the other which resembles ES6 promises to some degree.\n\n# $q constructor\n\nThe streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`\nfunction as the first argument. This is similar to the native Promise implementation from ES6 Harmony,\nsee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\nWhile the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are\navailable yet.\n\nIt can be used like so:\n\n```js\n  // for the purpose of this example let's assume that variables `$q` and `okToGreet`\n  // are available in the current lexical scope (they could have been injected or passed in).\n\n  function asyncGreet(name) {\n    // perform some asynchronous operation, resolve or reject the promise when appropriate.\n    return $q(function(resolve, reject) {\n      setTimeout(function() {\n        if (okToGreet(name)) {\n          resolve('Hello, ' + name + '!');\n        } else {\n          reject('Greeting ' + name + ' is not allowed.');\n        }\n      }, 1000);\n    });\n  }\n\n  var promise = asyncGreet('Robin Hood');\n  promise.then(function(greeting) {\n    alert('Success: ' + greeting);\n  }, function(reason) {\n    alert('Failed: ' + reason);\n  });\n```\n\nNote: progress/notify callbacks are not currently supported via the ES6-style interface.\n\nHowever, the more traditional CommonJS-style usage is still available, and documented below.\n\n[The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\ninterface for interacting with an object that represents the result of an action that is\nperformed asynchronously, and may or may not be finished at any given point in time.\n\nFrom the perspective of dealing with error handling, deferred and promise APIs are to\nasynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n\n```js\n  // for the purpose of this example let's assume that variables `$q` and `okToGreet`\n  // are available in the current lexical scope (they could have been injected or passed in).\n\n  function asyncGreet(name) {\n    var deferred = $q.defer();\n\n    setTimeout(function() {\n      deferred.notify('About to greet ' + name + '.');\n\n      if (okToGreet(name)) {\n        deferred.resolve('Hello, ' + name + '!');\n      } else {\n        deferred.reject('Greeting ' + name + ' is not allowed.');\n      }\n    }, 1000);\n\n    return deferred.promise;\n  }\n\n  var promise = asyncGreet('Robin Hood');\n  promise.then(function(greeting) {\n    alert('Success: ' + greeting);\n  }, function(reason) {\n    alert('Failed: ' + reason);\n  }, function(update) {\n    alert('Got notification: ' + update);\n  });\n```\n\nAt first it might not be obvious why this extra complexity is worth the trouble. The payoff\ncomes in the way of guarantees that promise and deferred APIs make, see\nhttps://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.\n\nAdditionally the promise api allows for composition that is very hard to do with the\ntraditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\nFor more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\nsection on serial or parallel joining of promises.\n\n# The Deferred API\n\nA new instance of deferred is constructed by calling `$q.defer()`.\n\nThe purpose of the deferred object is to expose the associated Promise instance as well as APIs\nthat can be used for signaling the successful or unsuccessful completion, as well as the status\nof the task.\n\n**Methods**\n\n- `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\n  constructed via `$q.reject`, the promise will be rejected instead.\n- `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\n  resolving it with a rejection constructed via `$q.reject`.\n- `notify(value)` - provides updates on the status of the promise's execution. This may be called\n  multiple times before the promise is either resolved or rejected.\n\n**Properties**\n\n- promise – `{Promise}` – promise object associated with this deferred.\n\n\n# The Promise API\n\nA new promise instance is created when a deferred instance is created and can be retrieved by\ncalling `deferred.promise`.\n\nThe purpose of the promise object is to allow for interested parties to get access to the result\nof the deferred task when it completes.\n\n**Methods**\n\n- `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or\n  will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously\n  as soon as the result is available. The callbacks are called with a single argument: the result\n  or rejection reason. Additionally, the notify callback may be called zero or more times to\n  provide a progress indication, before the promise is resolved or rejected.\n\n  This method *returns a new promise* which is resolved or rejected via the return value of the\n  `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved\n  with the value which is resolved in that promise using\n  [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).\n  It also notifies via the return value of the `notifyCallback` method. The promise cannot be\n  resolved or rejected from the notifyCallback method.\n\n- `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`\n\n- `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,\n  but to do so without modifying the final value. This is useful to release resources or do some\n  clean-up that needs to be done whether the promise was rejected or resolved. See the [full\n  specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for\n  more information.\n\n# Chaining promises\n\nBecause calling the `then` method of a promise returns a new derived promise, it is easily\npossible to create a chain of promises:\n\n```js\n  promiseB = promiseA.then(function(result) {\n    return result + 1;\n  });\n\n  // promiseB will be resolved immediately after promiseA is resolved and its value\n  // will be the result of promiseA incremented by 1\n```\n\nIt is possible to create chains of any length and since a promise can be resolved with another\npromise (which will defer its resolution further), it is possible to pause/defer resolution of\nthe promises at any point in the chain. This makes it possible to implement powerful APIs like\n$http's response interceptors.\n\n\n# Differences between Kris Kowal's Q and $q\n\n There are two main differences:\n\n- $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n  mechanism in angular, which means faster propagation of resolution or rejection into your\n  models and avoiding unnecessary browser repaints, which would result in flickering UI.\n- Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\n  all the important functionality needed for common async tasks.\n\n # Testing\n\n ```js\n   it('should simulate promise', inject(function($q, $rootScope) {\n     var deferred = $q.defer();\n     var promise = deferred.promise;\n     var resolvedValue;\n\n     promise.then(function(value) { resolvedValue = value; });\n     expect(resolvedValue).toBeUndefined();\n\n     // Simulate resolving of promise\n     deferred.resolve(123);\n     // Note that the 'then' function does not get called synchronously.\n     // This is because we want the promise API to always be async, whether or not\n     // it got called synchronously or asynchronously.\n     expect(resolvedValue).toBeUndefined();\n\n     // Propagate promise resolution to 'then' functions using $apply().\n     $rootScope.$apply();\n     expect(resolvedValue).toEqual(123);\n   }));\n ```",
            "line": " sdk/lib/angular/angular.js:14253"
        },
        {
            "message": "Missing item type\nConstructs a promise manager.",
            "line": " sdk/lib/angular/angular.js:14484"
        },
        {
            "message": "Missing item type\nCreates a `Deferred` object which represents a task which will finish in the future.",
            "line": " sdk/lib/angular/angular.js:14507"
        },
        {
            "message": "Missing item type\nCreates a promise that is resolved as rejected with the specified `reason`. This api should be\nused to forward rejection in a chain of promises. If you are dealing with the last promise in\na promise chain, you don't need to worry about it.\n\nWhen comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n`reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\na promise error callback and you want to forward the error to the promise derived from the\ncurrent promise, you have to \"rethrow\" the error by returning a rejection constructed via\n`reject`.\n\n```js\n  promiseB = promiseA.then(function(result) {\n    // success: do something and resolve promiseB\n    //          with the old or a new result\n    return result;\n  }, function(reason) {\n    // error: handle the error if possible and\n    //        resolve promiseB with newPromiseOrValue,\n    //        otherwise forward the rejection to promiseB\n    if (canHandle(reason)) {\n     // handle the error and recover\n     return newPromiseOrValue;\n    }\n    return $q.reject(reason);\n  });\n```",
            "line": " sdk/lib/angular/angular.js:14659"
        },
        {
            "message": "Missing item type\nWraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\nThis is useful when you are dealing with an object that might or might not be a promise, or if\nthe promise comes from a source that can't be trusted.",
            "line": " sdk/lib/angular/angular.js:14729"
        },
        {
            "message": "Missing item type\nAlias of {@link ng.$q#when when} to maintain naming consistency with ES6.",
            "line": " sdk/lib/angular/angular.js:14750"
        },
        {
            "message": "Missing item type\nCombines multiple promises into a single promise that is resolved when all of the input\npromises are resolved.",
            "line": " sdk/lib/angular/angular.js:14763"
        },
        {
            "message": "Missing item type\nDESIGN NOTES\n\nThe design decisions behind the scope are heavily favored for speed and memory consumption.\n\nThe typical use of scope is to watch the expressions, which most of the time return the same\nvalue as last time so we optimize the operation.\n\nClosures construction is expensive in terms of speed as well as memory:\n  - No closures, instead use prototypical inheritance for API\n  - Internal state needs to be stored on scope directly, which means that private state is\n    exposed as $$____ properties\n\nLoop operations are optimized by using while(count--) { ... }\n  - this means that in order to keep the same order of execution as addition we have to add\n    items to the array at the beginning (unshift) instead of at the end (push)\n\nChild scopes are created and removed often\n  - Using an array would be slow since inserts in middle are expensive so we use linked list\n\nThere are few watches then a lot of observers. This is why you don't want the observer to be\nimplemented in the same way as watch. Watch requires return of initialization function which\nare expensive to construct.",
            "line": " sdk/lib/angular/angular.js:14905"
        },
        {
            "message": "Missing item type\nProvider for the $rootScope service.",
            "line": " sdk/lib/angular/angular.js:14931"
        },
        {
            "message": "Missing item type\nSets the number of `$digest` iterations the scope should attempt to execute before giving up and\nassuming that the model is unstable.\n\nThe current default is 10 iterations.\n\nIn complex applications it's possible that the dependencies between `$watch`s will result in\nseveral digest iterations. However if an application needs more than the default 10 digest\niterations for its model to stabilize then you should investigate what is causing the model to\ncontinuously change during the digest.\n\nIncreasing the TTL could have performance implications, so you should not change it without\nproper justification.",
            "line": " sdk/lib/angular/angular.js:14939"
        },
        {
            "message": "Missing item type\nEvery application has a single root {@link ng.$rootScope.Scope scope}.\nAll other scopes are descendant scopes of the root scope. Scopes provide separation\nbetween the model and the view, via a mechanism for watching the model for changes.\nThey also provide an event emission/broadcast and subscription facility. See the\n{@link guide/scope developer guide on scopes}.",
            "line": " sdk/lib/angular/angular.js:14961"
        },
        {
            "message": "Missing item type\nA root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n{@link auto.$injector $injector}. Child scopes are created using the\n{@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\ncompiled HTML template is executed.)\n\nHere is a simple scope snippet to show how you can interact with the scope.\n```html\n<file src=\"./test/ng/rootScopeSpec.js\" tag=\"docs1\" />\n```\n\n# Inheritance\nA scope can inherit from a parent scope, as in this example:\n```js\n        var parent = $rootScope;\n        var child = parent.$new();\n\n        parent.salutation = \"Hello\";\n        expect(child.salutation).toEqual('Hello');\n\n        child.salutation = \"Welcome\";\n        expect(child.salutation).toEqual('Welcome');\n        expect(parent.salutation).toEqual('Hello');\n```\n\nWhen interacting with `Scope` in tests, additional helper methods are available on the\ninstances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional\ndetails.",
            "line": " sdk/lib/angular/angular.js:15006"
        },
        {
            "message": "Missing item type\nUnique scope ID (monotonically increasing) useful for debugging.",
            "line": " sdk/lib/angular/angular.js:15062"
        },
        {
            "message": "Missing item type\nReference to the parent scope.",
            "line": " sdk/lib/angular/angular.js:15070"
        },
        {
            "message": "Missing item type\nReference to the root scope.",
            "line": " sdk/lib/angular/angular.js:15078"
        },
        {
            "message": "Missing item type\nCreates a new child {@link ng.$rootScope.Scope scope}.\n\nThe parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.\nThe scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n\n{@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is\ndesired for the scope and its child scopes to be permanently detached from the parent and\nthus stop participating in model change detection and listener notification by invoking.",
            "line": " sdk/lib/angular/angular.js:15088"
        },
        {
            "message": "Missing item type\nRegisters a `listener` callback to be executed whenever the `watchExpression` changes.\n\n- The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest\n  $digest()} and should return the value that will be watched. (Since\n  {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the\n  `watchExpression` can execute multiple times per\n  {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n- The `listener` is called only when the value from the current `watchExpression` and the\n  previous call to `watchExpression` are not equal (with the exception of the initial run,\n  see below). Inequality is determined according to reference inequality,\n  [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n   via the `!==` Javascript operator, unless `objectEquality == true`\n  (see next point)\n- When `objectEquality == true`, inequality of the `watchExpression` is determined\n  according to the {@link angular.equals} function. To save the value of the object for\n  later comparison, the {@link angular.copy} function is used. This therefore means that\n  watching complex objects will have adverse memory and performance implications.\n- The watch `listener` may change the model, which may trigger other `listener`s to fire.\n  This is achieved by rerunning the watchers until no changes are detected. The rerun\n  iteration limit is 10 to prevent an infinite loop deadlock.\n\n\nIf you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\nyou can register a `watchExpression` function with no `listener`. (Since `watchExpression`\ncan execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a\nchange is detected, be prepared for multiple calls to your listener.)\n\nAfter a watcher is registered with the scope, the `listener` fn is called asynchronously\n(via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\nwatcher. In rare cases, this is undesirable because the listener is called when the result\nof `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\ncan compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\nlistener was called due to initialization.\n\n\n\n# Example\n```js\n          // let's assume that scope was dependency injected as the $rootScope\n          var scope = $rootScope;\n          scope.name = 'misko';\n          scope.counter = 0;\n\n          expect(scope.counter).toEqual(0);\n          scope.$watch('name', function(newValue, oldValue) {\n            scope.counter = scope.counter + 1;\n          });\n          expect(scope.counter).toEqual(0);\n\n          scope.$digest();\n          // the listener is always called during the first $digest loop after it was registered\n          expect(scope.counter).toEqual(1);\n\n          scope.$digest();\n          // but now it will not be called unless the value changes\n          expect(scope.counter).toEqual(1);\n\n          scope.name = 'adam';\n          scope.$digest();\n          expect(scope.counter).toEqual(2);\n\n\n\n          // Using a function as a watchExpression\n          var food;\n          scope.foodCounter = 0;\n          expect(scope.foodCounter).toEqual(0);\n          scope.$watch(\n            // This function returns the value being watched. It is called for each turn of the $digest loop\n            function() { return food; },\n            // This is the change listener, called when the value returned from the above function changes\n            function(newValue, oldValue) {\n              if ( newValue !== oldValue ) {\n                // Only increment the counter if the value changed\n                scope.foodCounter = scope.foodCounter + 1;\n              }\n            }\n          );\n          // No digest has been run so the counter will be zero\n          expect(scope.foodCounter).toEqual(0);\n\n          // Run the digest but since food has not changed count will still be zero\n          scope.$digest();\n          expect(scope.foodCounter).toEqual(0);\n\n          // Update food and run digest.  Now the counter will increment\n          food = 'cheeseburger';\n          scope.$digest();\n          expect(scope.foodCounter).toEqual(1);\n\n```",
            "line": " sdk/lib/angular/angular.js:15152"
        },
        {
            "message": "Missing item type\nA variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.\nIf any one expression in the collection changes the `listener` is executed.\n\n- The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every\n  call to $digest() to see if any items changes.\n- The `listener` is called whenever any expression in the `watchExpressions` array changes.",
            "line": " sdk/lib/angular/angular.js:15306"
        },
        {
            "message": "Missing item type\nShallow watches the properties of an object and fires whenever any of the properties change\n(for arrays, this implies watching the array items; for object maps, this implies watching\nthe properties). If a change is detected, the `listener` callback is fired.\n\n- The `obj` collection is observed via standard $watch operation and is examined on every\n  call to $digest() to see if any items have been added, removed, or moved.\n- The `listener` is called whenever anything within the `obj` has changed. Examples include\n  adding, removing, and moving items belonging to an object or array.\n\n\n# Example\n```js\n         $scope.names = ['igor', 'matias', 'misko', 'james'];\n         $scope.dataCount = 4;\n\n         $scope.$watchCollection('names', function(newNames, oldNames) {\n           $scope.dataCount = newNames.length;\n         });\n\n         expect($scope.dataCount).toEqual(4);\n         $scope.$digest();\n\n         //still at 4 ... no changes\n         expect($scope.dataCount).toEqual(4);\n\n         $scope.names.pop();\n         $scope.$digest();\n\n         //now there's been a change\n         expect($scope.dataCount).toEqual(3);\n```",
            "line": " sdk/lib/angular/angular.js:15390"
        },
        {
            "message": "Missing item type\nProcesses all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and\nits children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change\nthe model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}\nuntil no more listeners are firing. This means that it is possible to get into an infinite\nloop. This function will throw `'Maximum iteration limit exceeded.'` if the number of\niterations exceeds 10.\n\nUsually, you don't call `$digest()` directly in\n{@link ng.directive:ngController controllers} or in\n{@link ng.$compileProvider#directive directives}.\nInstead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within\na {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.\n\nIf you want to be notified whenever `$digest()` is called,\nyou can register a `watchExpression` function with\n{@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.\n\nIn unit tests, you may need to call `$digest()` to simulate the scope life cycle.\n\n# Example\n```js\n          var scope = ...;\n          scope.name = 'misko';\n          scope.counter = 0;\n\n          expect(scope.counter).toEqual(0);\n          scope.$watch('name', function(newValue, oldValue) {\n            scope.counter = scope.counter + 1;\n          });\n          expect(scope.counter).toEqual(0);\n\n          scope.$digest();\n          // the listener is always called during the first $digest loop after it was registered\n          expect(scope.counter).toEqual(1);\n\n          scope.$digest();\n          // but now it will not be called unless the value changes\n          expect(scope.counter).toEqual(1);\n\n          scope.name = 'adam';\n          scope.$digest();\n          expect(scope.counter).toEqual(2);\n```",
            "line": " sdk/lib/angular/angular.js:15577"
        },
        {
            "message": "Missing item type\nBroadcasted when a scope and its children are being destroyed.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
            "line": " sdk/lib/angular/angular.js:15741"
        },
        {
            "message": "Missing item type\nRemoves the current scope (and all of its children) from the parent scope. Removal implies\nthat calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\npropagate to the current scope and its children. Removal also implies that the current\nscope is eligible for garbage collection.\n\nThe `$destroy()` is usually used by directives such as\n{@link ng.directive:ngRepeat ngRepeat} for managing the\nunrolling of the loop.\n\nJust before a scope is destroyed, a `$destroy` event is broadcasted on this scope.\nApplication code can register a `$destroy` event handler that will give it a chance to\nperform any necessary cleanup.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
            "line": " sdk/lib/angular/angular.js:15753"
        },
        {
            "message": "Missing item type\nExecutes the `expression` on the current scope and returns the result. Any exceptions in\nthe expression are propagated (uncaught). This is useful when evaluating Angular\nexpressions.\n\n# Example\n```js\n          var scope = ng.$rootScope.Scope();\n          scope.a = 1;\n          scope.b = 2;\n\n          expect(scope.$eval('a+b')).toEqual(3);\n          expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n```",
            "line": " sdk/lib/angular/angular.js:15817"
        },
        {
            "message": "Missing item type\nExecutes the expression on the current scope at a later point in time.\n\nThe `$evalAsync` makes no guarantees as to when the `expression` will be executed, only\nthat:\n\n  - it will execute after the function that scheduled the evaluation (preferably before DOM\n    rendering).\n  - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n    `expression` execution.\n\nAny exceptions from the execution of the expression are forwarded to the\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\n__Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle\nwill be scheduled. However, it is encouraged to always call code that changes the model\nfrom within an `$apply` call. That includes code evaluated via `$evalAsync`.",
            "line": " sdk/lib/angular/angular.js:15849"
        },
        {
            "message": "Missing item type\n`$apply()` is used to execute an expression in angular from outside of the angular\nframework. (For example from browser DOM events, setTimeout, XHR or third party libraries).\nBecause we are calling into the angular framework we need to perform proper scope life\ncycle of {@link ng.$exceptionHandler exception handling},\n{@link ng.$rootScope.Scope#$digest executing watches}.\n\n## Life cycle\n\n# Pseudo-Code of `$apply()`\n```js\n          function $apply(expr) {\n            try {\n              return $eval(expr);\n            } catch (e) {\n              $exceptionHandler(e);\n            } finally {\n              $root.$digest();\n            }\n          }\n```\n\n\nScope's `$apply()` method transitions through the following stages:\n\n1. The {@link guide/expression expression} is executed using the\n   {@link ng.$rootScope.Scope#$eval $eval()} method.\n2. Any exceptions from the execution of the expression are forwarded to the\n   {@link ng.$exceptionHandler $exceptionHandler} service.\n3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the\n   expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.",
            "line": " sdk/lib/angular/angular.js:15897"
        },
        {
            "message": "Missing item type\nSchedule the invocation of $apply to occur at a later time. The actual time difference\nvaries across browsers, but is typically around ~10 milliseconds.\n\nThis can be used to queue up multiple expressions which need to be evaluated in the same\ndigest.",
            "line": " sdk/lib/angular/angular.js:15959"
        },
        {
            "message": "Missing item type\nListens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for\ndiscussion of event life cycle.\n\nThe event listener function format is: `function(event, args...)`. The `event` object\npassed into the listener has the following attributes:\n\n  - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or\n    `$broadcast`-ed.\n  - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the\n    event propagates through the scope hierarchy, this property is set to null.\n  - `name` - `{string}`: name of the event.\n  - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel\n    further event propagation (available only for events that were `$emit`-ed).\n  - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag\n    to true.\n  - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.",
            "line": " sdk/lib/angular/angular.js:15986"
        },
        {
            "message": "Missing item type\nDispatches an event `name` upwards through the scope hierarchy notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$emit` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event traverses upwards toward the root scope and calls all\nregistered listeners along the way. The event will stop propagating if one of the listeners\ncancels it.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
            "line": " sdk/lib/angular/angular.js:16039"
        },
        {
            "message": "Missing item type\nDispatches an event `name` downwards to all child scopes (and their children) notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$broadcast` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event propagates to all direct and indirect scopes of the current\nscope and calls all registered listeners along the way. The event cannot be canceled.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
            "line": " sdk/lib/angular/angular.js:16112"
        },
        {
            "message": "Missing item type\nfunction used as an initial value for watchers.\nbecause it's unique we can easily tell it apart from other values",
            "line": " sdk/lib/angular/angular.js:16226"
        },
        {
            "message": "Missing item type\nPrivate service to sanitize uris for links and images. Used by $compile and $sanitize.",
            "line": " sdk/lib/angular/angular.js:16253"
        },
        {
            "message": "Missing item type\nRetrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "line": " sdk/lib/angular/angular.js:16261"
        },
        {
            "message": "Missing item type\nRetrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "line": " sdk/lib/angular/angular.js:16286"
        },
        {
            "message": "Missing item type\n`$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\nContextual Escaping (SCE)} services to AngularJS.\n\nTypically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\nthe `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is\nbecause, while the `$sce` provides numerous shorthand methods, etc., you really only need to\noverride 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\nwork because `$sce` delegates to `$sceDelegate` for these operations.\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n\nThe default instance of `$sceDelegate` should work out of the box with little pain.  While you\ncan override it completely to change the behavior of `$sce`, the common case would\ninvolve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\nyour own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as\ntemplates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist\n$sceDelegateProvider.resourceUrlWhitelist} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}",
            "line": " sdk/lib/angular/angular.js:16387"
        },
        {
            "message": "Missing item type\nThe `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n$sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure\nthat the URLs used for sourcing Angular templates are safe.  Refer {@link\nng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and\n{@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}\n\nFor the general details about this service in Angular, read the main page for {@link ng.$sce\nStrict Contextual Escaping (SCE)}.\n\n**Example**:  Consider the following case. <a name=\"example\"></a>\n\n- your app is hosted at url `http://myapp.example.com/`\n- but some of your templates are hosted on other domains you control such as\n  `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.\n- and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n\nHere is what a secure configuration for this scenario might look like:\n\n```\n angular.module('myApp', []).config(function($sceDelegateProvider) {\n   $sceDelegateProvider.resourceUrlWhitelist([\n     // Allow same origin resource loads.\n     'self',\n     // Allow loading from our assets domain.  Notice the difference between * and **.\n     'http://srv*.assets.example.com/**'\n   ]);\n\n   // The blacklist overrides the whitelist so the open redirect here is blocked.\n   $sceDelegateProvider.resourceUrlBlacklist([\n     'http://myapp.example.com/clickThru**'\n   ]);\n });\n```",
            "line": " sdk/lib/angular/angular.js:16414"
        },
        {
            "message": "Missing item type\nSets/Gets the whitelist of trusted resource URLs.",
            "line": " sdk/lib/angular/angular.js:16461"
        },
        {
            "message": "Missing item type\nSets/Gets the blacklist of trusted resource URLs.",
            "line": " sdk/lib/angular/angular.js:16490"
        },
        {
            "message": "Missing item type\nReturns an object that is trusted by angular for use in specified strict\ncontextual escaping contexts (such as ng-bind-html, ng-include, any src\nattribute interpolation, any dom event binding attribute interpolation\nsuch as for onclick,  etc.) that uses the provided value.\nSee {@link ng.$sce $sce} for enabling strict contextual escaping.",
            "line": " sdk/lib/angular/angular.js:16593"
        },
        {
            "message": "Missing item type\nIf the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs\n`$sceDelegate.trustAs`}, returns the value that had been passed to {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.\n\nIf the passed parameter is not a value that had been returned by {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.",
            "line": " sdk/lib/angular/angular.js:16630"
        },
        {
            "message": "Missing item type\nTakes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and\nreturns the originally supplied value if the queried context type is a supertype of the\ncreated type.  If this condition isn't satisfied, throws an exception.",
            "line": " sdk/lib/angular/angular.js:16656"
        },
        {
            "message": "Missing item type\nThe $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.\n-   enable/disable Strict Contextual Escaping (SCE) in a module\n-   override the default implementation with a custom delegate\n\nRead more about {@link ng.$sce Strict Contextual Escaping (SCE)}.",
            "line": " sdk/lib/angular/angular.js:16703"
        },
        {
            "message": "Missing item type\n`$sce` is a service that provides Strict Contextual Escaping services to AngularJS.\n\n# Strict Contextual Escaping\n\nStrict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain\ncontexts to result in a value that is marked as safe to use for that context.  One example of\nsuch a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer\nto these contexts as privileged or SCE contexts.\n\nAs of version 1.2, Angular ships with SCE enabled by default.\n\nNote:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow\none to execute arbitrary javascript by the use of the expression() syntax.  Refer\n<http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.\nYou can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`\nto the top of your HTML document.\n\nSCE assists in writing code in way that (a) is secure by default and (b) makes auditing for\nsecurity vulnerabilities such as XSS, clickjacking, etc. a lot easier.\n\nHere's an example of a binding in a privileged context:\n\n```\n<input ng-model=\"userHtml\" aria-label=\"User input\">\n<div ng-bind-html=\"userHtml\"></div>\n```\n\nNotice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE\ndisabled, this application allows the user to render arbitrary HTML into the DIV.\nIn a more realistic example, one may be rendering user comments, blog articles, etc. via\nbindings.  (HTML is just one example of a context where rendering user controlled input creates\nsecurity vulnerabilities.)\n\nFor the case of HTML, you might use a library, either on the client side, or on the server side,\nto sanitize unsafe HTML before binding to the value and rendering it in the document.\n\nHow would you ensure that every place that used these types of bindings was bound to a value that\nwas sanitized by your library (or returned as safe for rendering by your server?)  How can you\nensure that you didn't accidentally delete the line that sanitized the value, or renamed some\nproperties/fields and forgot to update the binding to the sanitized value?\n\nTo be secure by default, you want to ensure that any such bindings are disallowed unless you can\ndetermine that something explicitly says it's safe to use a value for binding in that\ncontext.  You can then audit your code (a simple grep would do) to ensure that this is only done\nfor those values that you can easily tell are safe - because they were received from your server,\nsanitized by your library, etc.  You can organize your codebase to help with this - perhaps\nallowing only the files in a specific directory to do this.  Ensuring that the internal API\nexposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.\n\nIn the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}\n(and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to\nobtain values that will be accepted by SCE / privileged contexts.\n\n\n## How does it work?\n\nIn privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted\n$sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link\nng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the\n{@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.\n\nAs an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link\nng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly\nsimplified):\n\n```\nvar ngBindHtmlDirective = ['$sce', function($sce) {\n  return function(scope, element, attr) {\n    scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\n      element.html(value || '');\n    });\n  };\n}];\n```\n\n## Impact on loading templates\n\nThis applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as\n`templateUrl`'s specified by {@link guide/directive directives}.\n\nBy default, Angular only loads templates from the same domain and protocol as the application\ndocument.  This is done by calling {@link ng.$sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or\nprotocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist\nthem} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.\n\n*Please note*:\nThe browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy apply in addition to this and may further restrict whether the template is successfully\nloaded.  This means that without the right CORS policy, loading templates from a different domain\nwon't work on all browsers.  Also, loading templates from `file://` URL does not work on some\nbrowsers.\n\n## This feels like too much overhead\n\nIt's important to remember that SCE only applies to interpolation expressions.\n\nIf your expressions are constant literals, they're automatically trusted and you don't need to\ncall `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.\n`<div ng-bind-html=\"'<b>implicitly trusted</b>'\"></div>`) just works.\n\nAdditionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them\nthrough {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.\n\nThe included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load\ntemplates in `ng-include` from your application's domain without having to even know about SCE.\nIt blocks loading templates from other domains or loading templates over http from an https\nserved document.  You can change these by setting your own custom {@link\nng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.\n\nThis significantly reduces the overhead.  It is far easier to pay the small overhead and have an\napplication that's secure and can be audited to verify that with much more ease than bolting\nsecurity onto an application later.\n\n<a name=\"contexts\"></a>\n## What trusted context types are supported?\n\n| Context             | Notes          |\n|---------------------|----------------|\n| `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |\n| `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |\n| `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |\n| `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |\n| `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |\n\n## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name=\"resourceUrlPatternItem\"></a>\n\n Each element in these arrays must be one of the following:\n\n - **'self'**\n   - The special **string**, `'self'`, can be used to match against all URLs of the **same\n     domain** as the application document using the **same protocol**.\n - **String** (except the special value `'self'`)\n   - The string is matched against the full *normalized / absolute URL* of the resource\n     being tested (substring matches are not good enough.)\n   - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters\n     match themselves.\n   - `*`: matches zero or more occurrences of any character other than one of the following 6\n     characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use\n     in a whitelist.\n   - `**`: matches zero or more occurrences of *any* character.  As such, it's not\n     not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.\n     http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might\n     not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.\n     http://foo.example.com/templates/**).\n - **RegExp** (*see caveat below*)\n   - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax\n     (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to\n     accidentally introduce a bug when one updates a complex expression (imho, all regexes should\n     have good test coverage.).  For instance, the use of `.` in the regex is correct only in a\n     small number of cases.  A `.` character in the regex used when matching the scheme or a\n     subdomain could be matched against a `:` or literal `.` that was likely not intended.   It\n     is highly recommended to use the string patterns and only fall back to regular expressions\n     if they as a last resort.\n   - The regular expression must be an instance of RegExp (i.e. not a string.)  It is\n     matched against the **entire** *normalized / absolute URL* of the resource being tested\n     (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags\n     present on the RegExp (such as multiline, global, ignoreCase) are ignored.\n   - If you are generating your JavaScript from some other templating engine (not\n     recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),\n     remember to escape your regular expression (and be aware that you might need more than\n     one level of escaping depending on your templating engine and the way you interpolated\n     the value.)  Do make use of your platform's escaping mechanism as it might be good\n     enough before coding your own.  e.g. Ruby has\n     [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)\n     and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).\n     Javascript lacks a similar built in function for escaping.  Take a look at Google\n     Closure library's [goog.string.regExpEscape(s)](\n     http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.\n\n## Show me an example using SCE.\n\n<example module=\"mySceApp\" deps=\"angular-sanitize.js\">\n<file name=\"index.html\">\n  <div ng-controller=\"AppController as myCtrl\">\n    <i ng-bind-html=\"myCtrl.explicitlyTrustedHtml\" id=\"explicitlyTrustedHtml\"></i><br><br>\n    <b>User comments</b><br>\n    By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when\n    $sanitize is available.  If $sanitize isn't available, this results in an error instead of an\n    exploit.\n    <div class=\"well\">\n      <div ng-repeat=\"userComment in myCtrl.userComments\">\n        <b>{{userComment.name}}</b>:\n        <span ng-bind-html=\"userComment.htmlComment\" class=\"htmlComment\"></span>\n        <br>\n      </div>\n    </div>\n  </div>\n</file>\n\n<file name=\"script.js\">\n  angular.module('mySceApp', ['ngSanitize'])\n    .controller('AppController', ['$http', '$templateCache', '$sce',\n      function($http, $templateCache, $sce) {\n        var self = this;\n        $http.get(\"test_data.json\", {cache: $templateCache}).success(function(userComments) {\n          self.userComments = userComments;\n        });\n        self.explicitlyTrustedHtml = $sce.trustAsHtml(\n            '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n            'sanitization.&quot;\">Hover over this text.</span>');\n      }]);\n</file>\n\n<file name=\"test_data.json\">\n[\n  { \"name\": \"Alice\",\n    \"htmlComment\":\n        \"<span onmouseover='this.textContent=\\\"PWN3D!\\\"'>Is <i>anyone</i> reading this?</span>\"\n  },\n  { \"name\": \"Bob\",\n    \"htmlComment\": \"<i>Yes!</i>  Am I the only other one?\"\n  }\n]\n</file>\n\n<file name=\"protractor.js\" type=\"protractor\">\n  describe('SCE doc demo', function() {\n    it('should sanitize untrusted values', function() {\n      expect(element.all(by.css('.htmlComment')).first().getInnerHtml())\n          .toBe('<span>Is <i>anyone</i> reading this?</span>');\n    });\n\n    it('should NOT sanitize explicitly trusted values', function() {\n      expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(\n          '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n          'sanitization.&quot;\">Hover over this text.</span>');\n    });\n  });\n</file>\n</example>\n\n\n\n## Can I disable SCE completely?\n\nYes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits\nfor little coding overhead.  It will be much harder to take an SCE disabled application and\neither secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE\nfor cases where you have a lot of existing code that was written before SCE was introduced and\nyou're migrating them a module at a time.\n\nThat said, here's how you can completely disable SCE:\n\n```\nangular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {\n  // Completely disable SCE.  For demonstration purposes only!\n  // Do not use in new projects.\n  $sceProvider.enabled(false);\n});\n```",
            "line": " sdk/lib/angular/angular.js:16717"
        },
        {
            "message": "Missing item type\nEnables/disables SCE and returns the current value.",
            "line": " sdk/lib/angular/angular.js:16987"
        },
        {
            "message": "Missing item type\nReturns a boolean indicating if SCE is enabled.",
            "line": " sdk/lib/angular/angular.js:17065"
        },
        {
            "message": "Missing item type\nConverts Angular {@link guide/expression expression} into a function.  This is like {@link\nng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it\nwraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,\n*result*)}",
            "line": " sdk/lib/angular/angular.js:17088"
        },
        {
            "message": "Missing item type\nDelegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,\nreturns an object that is trusted by angular for use in specified strict contextual\nescaping contexts (such as ng-bind-html, ng-include, any src attribute\ninterpolation, any dom event binding attribute interpolation such as for onclick,  etc.)\nthat uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual\nescaping.",
            "line": " sdk/lib/angular/angular.js:17118"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.trustAsHtml(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}",
            "line": " sdk/lib/angular/angular.js:17137"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.trustAsUrl(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}",
            "line": " sdk/lib/angular/angular.js:17152"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.trustAsResourceUrl(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}",
            "line": " sdk/lib/angular/angular.js:17167"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.trustAsJs(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}",
            "line": " sdk/lib/angular/angular.js:17182"
        },
        {
            "message": "Missing item type\nDelegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,\ntakes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the\noriginally supplied value if the queried context type is a supertype of the created type.\nIf this condition isn't satisfied, throws an exception.",
            "line": " sdk/lib/angular/angular.js:17197"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedHtml(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}",
            "line": " sdk/lib/angular/angular.js:17215"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedCss(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}",
            "line": " sdk/lib/angular/angular.js:17227"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedUrl(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}",
            "line": " sdk/lib/angular/angular.js:17239"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedResourceUrl(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}",
            "line": " sdk/lib/angular/angular.js:17251"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedJs(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}",
            "line": " sdk/lib/angular/angular.js:17263"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsHtml(expression string)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}",
            "line": " sdk/lib/angular/angular.js:17275"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsCss(value)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}",
            "line": " sdk/lib/angular/angular.js:17292"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsUrl(value)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}",
            "line": " sdk/lib/angular/angular.js:17309"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsResourceUrl(value)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}",
            "line": " sdk/lib/angular/angular.js:17326"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsJs(value)` →\n    {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}",
            "line": " sdk/lib/angular/angular.js:17343"
        },
        {
            "message": "Missing item type\nThe private $$testability service provides a collection of methods for use when debugging\nor by automated test and debugging tools.",
            "line": " sdk/lib/angular/angular.js:17547"
        },
        {
            "message": "Missing item type\nReturns an array of elements that are bound (via ng-bind or {{}})\nto expressions matching the input.",
            "line": " sdk/lib/angular/angular.js:17556"
        },
        {
            "message": "Missing item type\nReturns an array of elements that are two-way found via ng-model to\nexpressions matching the input.",
            "line": " sdk/lib/angular/angular.js:17591"
        },
        {
            "message": "Missing item type\nShortcut for getting the location in a browser agnostic way. Returns\n    the path, search, and hash. (e.g. /path?a=b#hash)",
            "line": " sdk/lib/angular/angular.js:17615"
        },
        {
            "message": "Missing item type\nShortcut for navigating to a location without doing a full page reload.",
            "line": " sdk/lib/angular/angular.js:17626"
        },
        {
            "message": "Missing item type\nCalls the callback when $timeout and $http requests are completed.",
            "line": " sdk/lib/angular/angular.js:17642"
        },
        {
            "message": "Missing item type\nAngular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\nblock and delegates any exceptions to\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\nThe return value of calling `$timeout` is a promise, which will be resolved when\nthe delay has passed and the timeout function, if provided, is executed.\n\nTo cancel a timeout request, call `$timeout.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\nsynchronously flush the queue of deferred functions.\n\nIf you only want a promise that will be resolved after some specified delay\nthen you can call `$timeout` without the `fn` function.",
            "line": " sdk/lib/angular/angular.js:17665"
        },
        {
            "message": "Missing item type\nCancels a task associated with the `promise`. As a result of this, the promise will be\nresolved with a rejection.",
            "line": " sdk/lib/angular/angular.js:17728"
        },
        {
            "message": "Missing item type\nNormalizes and parses a URL.",
            "line": " sdk/lib/angular/angular.js:17764"
        },
        {
            "message": "Missing item type\nParse a request URL and determine whether this is a same-origin request as the application document.",
            "line": " sdk/lib/angular/angular.js:17843"
        },
        {
            "message": "Missing item type\nA reference to the browser's `window` object. While `window`\nis globally available in JavaScript, it causes testability problems, because\nit is a global variable. In angular we always refer to it through the\n`$window` service, so it may be overridden, removed or mocked for testing.\n\nExpressions, like the one defined for the `ngClick` directive in the example\nbelow, are evaluated with respect to the current scope.  Therefore, there is\nno risk of inadvertently coding in a dependency on a global value in such an\nexpression.",
            "line": " sdk/lib/angular/angular.js:17856"
        },
        {
            "message": "Missing item type\nThis is a private service for reading cookies used by $http and ngCookies",
            "line": " sdk/lib/angular/angular.js:17901"
        },
        {
            "message": "Missing item type\nFilters are just functions which transform input to an output. However filters need to be\nDependency Injected. To achieve this a filter definition consists of a factory function which is\nannotated with dependencies and is responsible for creating a filter function.\n\n<div class=\"alert alert-warning\">\n**Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\nNames with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\nyour filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n(`myapp_subsection_filterx`).\n</div>\n\n```js\n  // Filter registration\n  function MyModule($provide, $filterProvider) {\n    // create a service to demonstrate injection (not always needed)\n    $provide.value('greet', function(name){\n      return 'Hello ' + name + '!';\n    });\n\n    // register a filter factory which uses the\n    // greet service to demonstrate DI.\n    $filterProvider.register('greet', function(greet){\n      // return the filter function which uses the greet service\n      // to generate salutation\n      return function(text) {\n        // filters need to be forgiving so check input validity\n        return text && greet(text) || text;\n      };\n    });\n  }\n```\n\nThe filter function is registered with the `$injector` under the filter name suffix with\n`Filter`.\n\n```js\n  it('should be the same instance', inject(\n    function($filterProvider) {\n      $filterProvider.register('reverse', function(){\n        return ...;\n      });\n    },\n    function($filter, reverseFilter) {\n      expect($filter('reverse')).toBe(reverseFilter);\n    });\n```\n\n\nFor more information about how angular filters work, and how to create your own filters, see\n{@link guide/filter Filters} in the Angular Developer Guide.",
            "line": " sdk/lib/angular/angular.js:17967"
        },
        {
            "message": "Missing item type\nFilters are used for formatting data displayed to the user.\n\nThe general syntax in templates is as follows:\n\n        {{ expression [| filter_name[:parameter_value] ... ] }}",
            "line": " sdk/lib/angular/angular.js:18024"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/angular/angular.js:18059"
        },
        {
            "message": "Missing item type\nSelects a subset of items from `array` and returns it as a new array.",
            "line": " sdk/lib/angular/angular.js:18118"
        },
        {
            "message": "Missing item type\nFormats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\nsymbol for current locale is used.",
            "line": " sdk/lib/angular/angular.js:18373"
        },
        {
            "message": "Missing item type\nFormats a number as text.\n\nIf the input is null or undefined, it will just be returned.\nIf the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.\nIf the input is not a number an empty string is returned.",
            "line": " sdk/lib/angular/angular.js:18445"
        },
        {
            "message": "Missing item type\nFormats `date` to a string based on the requested `format`.\n\n  `format` string can be composed of the following elements:\n\n  * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n  * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n  * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n  * `'MMMM'`: Month in year (January-December)\n  * `'MMM'`: Month in year (Jan-Dec)\n  * `'MM'`: Month in year, padded (01-12)\n  * `'M'`: Month in year (1-12)\n  * `'dd'`: Day in month, padded (01-31)\n  * `'d'`: Day in month (1-31)\n  * `'EEEE'`: Day in Week,(Sunday-Saturday)\n  * `'EEE'`: Day in Week, (Sun-Sat)\n  * `'HH'`: Hour in day, padded (00-23)\n  * `'H'`: Hour in day (0-23)\n  * `'hh'`: Hour in AM/PM, padded (01-12)\n  * `'h'`: Hour in AM/PM, (1-12)\n  * `'mm'`: Minute in hour, padded (00-59)\n  * `'m'`: Minute in hour (0-59)\n  * `'ss'`: Second in minute, padded (00-59)\n  * `'s'`: Second in minute (0-59)\n  * `'sss'`: Millisecond in second, padded (000-999)\n  * `'a'`: AM/PM marker\n  * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n  * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year\n  * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year\n  * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')\n  * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')\n\n  `format` string can also be one of the following predefined\n  {@link guide/i18n localizable formats}:\n\n  * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n    (e.g. Sep 3, 2010 12:05:08 PM)\n  * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)\n  * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale\n    (e.g. Friday, September 3, 2010)\n  * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)\n  * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n  * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n  * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)\n  * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)\n\n  `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.\n  `\"h 'in the morning'\"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence\n  (e.g. `\"h 'o''clock'\"`).",
            "line": " sdk/lib/angular/angular.js:18720"
        },
        {
            "message": "Missing item type\nAllows you to convert a JavaScript object into JSON string.\n\n  This filter is mostly useful for debugging. When using the double curly {{value}} notation\n  the binding is automatically converted to JSON.",
            "line": " sdk/lib/angular/angular.js:18890"
        },
        {
            "message": "Missing item type\nConverts string to lowercase.",
            "line": " sdk/lib/angular/angular.js:18931"
        },
        {
            "message": "Missing item type\nConverts string to uppercase.",
            "line": " sdk/lib/angular/angular.js:18942"
        },
        {
            "message": "Missing item type\nCreates a new array or string containing only a specified number of elements. The elements\nare taken from either the beginning or the end of the source array, string or number, as specified by\nthe value and sign (positive or negative) of `limit`. If a number is used as input, it is\nconverted to a string.",
            "line": " sdk/lib/angular/angular.js:18952"
        },
        {
            "message": "Missing item type\nOrders a specified `array` by the `expression` predicate. It is ordered alphabetically\nfor strings and numerically for numbers. Note: if you notice numbers are not being sorted\nas expected, make sure they are actually being saved as numbers and not strings.",
            "line": " sdk/lib/angular/angular.js:19077"
        },
        {
            "message": "Missing item type\nModifies the default behavior of the html A tag so that the default action is prevented when\nthe href attribute is empty.\n\nThis change permits the easy creation of action links with the `ngClick` directive\nwithout changing the location or causing page reloads, e.g.:\n`<a href=\"\" ng-click=\"list.addItem()\">Add Item</a>`",
            "line": " sdk/lib/angular/angular.js:19375"
        },
        {
            "message": "Missing item type\nUsing Angular markup like `{{hash}}` in an href attribute will\nmake the link go to the wrong URL if the user clicks it before\nAngular has a chance to replace the `{{hash}}` markup with its\nvalue. Until Angular replaces the markup the link will be broken\nand will most likely return a 404 error. The `ngHref` directive\nsolves this problem.\n\nThe wrong way to write it:\n```html\n<a href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n```\n\nThe correct way to write it:\n```html\n<a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n```",
            "line": " sdk/lib/angular/angular.js:19410"
        },
        {
            "message": "Missing item type\nUsing Angular markup like `{{hash}}` in a `src` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrc` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img src=\"http://www.gravatar.com/avatar/{{hash}}\" alt=\"Description\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\" alt=\"Description\" />\n```",
            "line": " sdk/lib/angular/angular.js:19509"
        },
        {
            "message": "Missing item type\nUsing Angular markup like `{{hash}}` in a `srcset` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrcset` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\" alt=\"Description\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\" alt=\"Description\" />\n```",
            "line": " sdk/lib/angular/angular.js:19535"
        },
        {
            "message": "Missing item type\nThis directive sets the `disabled` attribute on the element if the\n{@link guide/expression expression} inside `ngDisabled` evaluates to truthy.\n\nA special directive is necessary because we cannot use interpolation inside the `disabled`\nattribute.  The following example would make the button enabled on Chrome/Firefox\nbut not on older IEs:\n\n```html\n<!-- See below for an example of ng-disabled being used correctly -->\n<div ng-init=\"isDisabled = false\">\n <button disabled=\"{{isDisabled}}\">Disabled</button>\n</div>\n```\n\nThis is because the HTML specification does not require browsers to preserve the values of\nboolean attributes such as `disabled` (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.",
            "line": " sdk/lib/angular/angular.js:19561"
        },
        {
            "message": "Missing item type\nSets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.\n\nNote that this directive should not be used together with {@link ngModel `ngModel`},\nas this can lead to unexpected behavior.\n\n### Why do we need `ngChecked`?\n\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as checked. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngChecked` directive solves this problem for the `checked` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " sdk/lib/angular/angular.js:19609"
        },
        {
            "message": "Missing item type\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as readonly. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngReadonly` directive solves this problem for the `readonly` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " sdk/lib/angular/angular.js:19651"
        },
        {
            "message": "Missing item type\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as selected. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngSelected` directive solves this problem for the `selected` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " sdk/lib/angular/angular.js:19686"
        },
        {
            "message": "Missing item type\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as open. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngOpen` directive solves this problem for the `open` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " sdk/lib/angular/angular.js:19724"
        },
        {
            "message": "Missing item type\nRollback all form controls pending updates to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. This method is typically needed by the reset button of\na form that uses `ng-model-options` to pend updates.",
            "line": " sdk/lib/angular/angular.js:19935"
        },
        {
            "message": "Missing item type\nCommit all form controls pending updates to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. This method is rarely needed as `NgModelController`\nusually handles calling this in response to input events.",
            "line": " sdk/lib/angular/angular.js:19952"
        },
        {
            "message": "Missing item type\nRegister a control with the form.\n\nInput elements using ngModelController do this automatically when they are linked.",
            "line": " sdk/lib/angular/angular.js:19969"
        },
        {
            "message": "Missing item type\nDeregister a control from the form.\n\nInput elements using ngModelController do this automatically when they are destroyed.",
            "line": " sdk/lib/angular/angular.js:20000"
        },
        {
            "message": "Missing item type\nSets the validity of a form control.\n\nThis method will also propagate to parent forms.",
            "line": " sdk/lib/angular/angular.js:20027"
        },
        {
            "message": "Missing item type\nSets the form to a dirty state.\n\nThis method can be called to add the 'ng-dirty' class and set the form to a dirty\nstate (ng-dirty class). This method will also propagate to parent forms.",
            "line": " sdk/lib/angular/angular.js:20064"
        },
        {
            "message": "Missing item type\nSets the form to its pristine state.\n\nThis method can be called to remove the 'ng-dirty' class and set the form to its pristine\nstate (ng-pristine class). This method will also propagate to all the controls contained\nin this form.\n\nSetting a form back to a pristine state is often useful when we want to 'reuse' a form after\nsaving or resetting it.",
            "line": " sdk/lib/angular/angular.js:20082"
        },
        {
            "message": "Missing item type\nSets the form to its untouched state.\n\nThis method can be called to remove the 'ng-touched' class and set the form controls to their\nuntouched state (ng-untouched class).\n\nSetting a form controls back to their untouched state is often useful when setting the form\nback to its pristine state.",
            "line": " sdk/lib/angular/angular.js:20106"
        },
        {
            "message": "Missing item type\nSets the form to its submitted state.",
            "line": " sdk/lib/angular/angular.js:20125"
        },
        {
            "message": "Missing item type\nNestable alias of {@link ng.directive:form `form`} directive. HTML\ndoes not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\nsub-group of controls needs to be determined.\n\nNote: the purpose of `ngForm` is to group controls,\nbut not to be a replacement for the `<form>` tag with all of its capabilities\n(e.g. posting to the server, ...).",
            "line": " sdk/lib/angular/angular.js:20139"
        },
        {
            "message": "Missing item type\nDirective that instantiates\n{@link form.FormController FormController}.\n\nIf the `name` attribute is specified, the form controller is published onto the current scope under\nthis name.\n\n# Alias: {@link ng.directive:ngForm `ngForm`}\n\nIn Angular, forms can be nested. This means that the outer form is valid when all of the child\nforms are valid as well. However, browsers do not allow nesting of `<form>` elements, so\nAngular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to\n`<form>` but can be nested.  This allows you to have nested forms, which is very useful when\nusing Angular validation directives in forms that are dynamically generated using the\n{@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`\nattribute of input elements using interpolation, you have to wrap each set of repeated inputs in an\n`ngForm` directive and nest these in an outer `form` element.\n\n\n# CSS classes\n - `ng-valid` is set if the form is valid.\n - `ng-invalid` is set if the form is invalid.\n - `ng-pristine` is set if the form is pristine.\n - `ng-dirty` is set if the form is dirty.\n - `ng-submitted` is set if the form was submitted.\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n\n# Submitting a form and preventing the default action\n\nSince the role of forms in client-side Angular applications is different than in classical\nroundtrip apps, it is desirable for the browser not to translate the form submission into a full\npage reload that sends the data to the server. Instead some javascript logic should be triggered\nto handle the form submission in an application-specific way.\n\nFor this reason, Angular prevents the default action (form submission to the server) unless the\n`<form>` element has an `action` attribute specified.\n\nYou can use one of the following two ways to specify what javascript method should be called when\na form is submitted:\n\n- {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n- {@link ng.directive:ngClick ngClick} directive on the first\n button or input field of type submit (input[type=submit])\n\nTo prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}\nor {@link ng.directive:ngClick ngClick} directives.\nThis is because of the following form submission rules in the HTML specification:\n\n- If a form has only one input field then hitting enter in this field triggers form submit\n(`ngSubmit`)\n- if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter\ndoesn't trigger submit\n- if a form has one or more input fields and one or more buttons or input[type=submit] then\nhitting enter in any of the input fields will trigger the click handler on the *first* button or\ninput[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n\nAny pending `ngModelOptions` changes will take place immediately when an enclosing form is\nsubmitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\nto have access to the updated model.\n\n## Animation Hooks\n\nAnimations in ngForm are triggered when any of the associated CSS classes are added and removed.\nThese classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any\nother validations that are performed within the form. Animations in ngForm are similar to how\nthey work in ngClass and animations can be hooked into using CSS transitions, keyframes as well\nas JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style a form element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-form {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-form.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre>",
            "line": " sdk/lib/angular/angular.js:20158"
        },
        {
            "message": "Missing item type\nStandard HTML text input with angular data binding, inherited by most of the `input` elements.",
            "line": " sdk/lib/angular/angular.js:20398"
        },
        {
            "message": "Missing item type\nInput with date validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601\ndate format (yyyy-MM-dd), for example: `2009-01-06`. Since many\nmodern browsers do not yet support this input type, it is important to provide cues to users on the\nexpected input format via a placeholder or label.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "line": " sdk/lib/angular/angular.js:20494"
        },
        {
            "message": "Missing item type\nInput with datetime validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nlocal datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "line": " sdk/lib/angular/angular.js:20591"
        },
        {
            "message": "Missing item type\nInput with time validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nlocal time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a\nDate object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "line": " sdk/lib/angular/angular.js:20686"
        },
        {
            "message": "Missing item type\nInput with week-of-the-year validation and transformation to Date. In browsers that do not yet support\nthe HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nweek format (yyyy-W##), for example: `2013-W02`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "line": " sdk/lib/angular/angular.js:20782"
        },
        {
            "message": "Missing item type\nInput with month validation and transformation. In browsers that do not yet support\nthe HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nmonth format (yyyy-MM), for example: `2009-01`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\nIf the model is not set to the first of the month, the next view to model update will set it\nto the first of the month.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
            "line": " sdk/lib/angular/angular.js:20877"
        },
        {
            "message": "Missing item type\nText input with number validation and transformation. Sets the `number` validation\nerror if not a valid number.\n\n<div class=\"alert alert-warning\">\nThe model must always be of type `number` otherwise Angular will throw an error.\nBe aware that a string containing a number is not enough. See the {@link ngModel:numfmt}\nerror docs for more information and an example of how to convert your model if necessary.\n</div>\n\n## Issues with HTML5 constraint validation\n\nIn browsers that follow the\n[HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),\n`input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.\nIf a non-number is entered in the input, the browser will report the value as an empty string,\nwhich means the view / model values in `ngModel` and subsequently the scope value\nwill also be an empty string.",
            "line": " sdk/lib/angular/angular.js:20974"
        },
        {
            "message": "Missing item type\nText input with URL validation. Sets the `url` validation error key if the content is not a\nvalid URL.\n\n<div class=\"alert alert-warning\">\n**Note:** `input[url]` uses a regex to validate urls that is derived from the regex\nused in Chromium. If you need stricter validation, you can use `ng-pattern` or modify\nthe built-in validators (see the {@link guide/forms Forms guide})\n</div>",
            "line": " sdk/lib/angular/angular.js:21084"
        },
        {
            "message": "Missing item type\nText input with email validation. Sets the `email` validation error key if not a valid email\naddress.\n\n<div class=\"alert alert-warning\">\n**Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex\nused in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can\nuse `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})\n</div>",
            "line": " sdk/lib/angular/angular.js:21183"
        },
        {
            "message": "Missing item type\nHTML radio button.",
            "line": " sdk/lib/angular/angular.js:21281"
        },
        {
            "message": "Missing item type\nHTML checkbox.",
            "line": " sdk/lib/angular/angular.js:21347"
        },
        {
            "message": "Missing item type\nHTML textarea element control with angular data-binding. The data-binding and validation\nproperties of this element are exactly the same as those of the\n{@link ng.directive:input input element}.",
            "line": " sdk/lib/angular/angular.js:21823"
        },
        {
            "message": "Missing item type\nHTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,\ninput state control, and validation.\nInput control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.\n\n<div class=\"alert alert-warning\">\n**Note:** Not every feature offered is available for all input types.\nSpecifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.\n</div>",
            "line": " sdk/lib/angular/angular.js:21859"
        },
        {
            "message": "Missing item type\nBinds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},\nso that when the element is selected, the {@link ngModel `ngModel`} of that element is set to\nthe bound value.\n\n`ngValue` is useful when dynamically generating lists of radio buttons using\n{@link ngRepeat `ngRepeat`}, as shown below.\n\nLikewise, `ngValue` can be used to generate `<option>` elements for\nthe {@link select `select`} element. In that case however, only strings are supported\nfor the `value `attribute, so the resulting `ngModel` will always be a string.\nSupport for `select` models with non-string values is available via `ngOptions`.",
            "line": " sdk/lib/angular/angular.js:22015"
        },
        {
            "message": "Missing item type\nThe `ngBind` attribute tells Angular to replace the text content of the specified HTML element\nwith the value of a given expression, and to update the text content when the value of that\nexpression changes.\n\nTypically, you don't use `ngBind` directly, but instead you use the double curly markup like\n`{{ expression }}` which is similar but less verbose.\n\nIt is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily\ndisplayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an\nelement attribute, it makes the bindings invisible to the user while the page is loading.\n\nAn alternative solution to this problem would be using the\n{@link ng.directive:ngCloak ngCloak} directive.",
            "line": " sdk/lib/angular/angular.js:22092"
        },
        {
            "message": "Missing item type\nThe `ngBindTemplate` directive specifies that the element\ntext content should be replaced with the interpolation of the template\nin the `ngBindTemplate` attribute.\nUnlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`\nexpressions. This directive is needed since some HTML elements\n(such as TITLE and OPTION) cannot contain SPAN elements.",
            "line": " sdk/lib/angular/angular.js:22160"
        },
        {
            "message": "Missing item type\nEvaluates the expression and inserts the resulting HTML into the element in a secure way. By default,\nthe resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.\nTo utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link\nngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}\nin your module's dependencies, you need to include \"angular-sanitize.js\" in your application.\n\nYou may also bypass sanitization for values you know are safe. To do so, bind to\nan explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example\nunder {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.\n\nNote: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you\nwill have an exception (instead of an exploit.)",
            "line": " sdk/lib/angular/angular.js:22228"
        },
        {
            "message": "Missing item type\nEvaluate the given expression when the user changes the input.\nThe expression is evaluated immediately, unlike the JavaScript onchange event\nwhich only triggers at the end of a change (usually, when the user leaves the\nform element or presses the return key).\n\nThe `ngChange` expression is only evaluated when a change in the input value causes\na new value to be committed to the model.\n\nIt will not be evaluated:\n* if the value returned from the `$parsers` transformation pipeline has not changed\n* if the input has continued to be invalid since the model will stay `null`\n* if the model is changed programmatically and not by a change to the input value\n\n\nNote, this directive requires `ngModel` to be present.",
            "line": " sdk/lib/angular/angular.js:22298"
        },
        {
            "message": "Missing item type\nThe `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding\nan expression that represents all classes to be added.\n\nThe directive operates in three different ways, depending on which of three types the expression\nevaluates to:\n\n1. If the expression evaluates to a string, the string should be one or more space-delimited class\nnames.\n\n2. If the expression evaluates to an object, then for each key-value pair of the\nobject with a truthy value the corresponding key is used as a class name.\n\n3. If the expression evaluates to an array, each element of the array should either be a string as in\ntype 1 or an object as in type 2. This means that you can mix strings and objects together in an array\nto give you more control over what CSS classes appear. See the code below for an example of this.\n\n\nThe directive won't add duplicate classes if a particular class was already set.\n\nWhen the expression changes, the previously added classes are removed and only then are the\nnew classes added.",
            "line": " sdk/lib/angular/angular.js:22494"
        },
        {
            "message": "Missing item type\nThe `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
            "line": " sdk/lib/angular/angular.js:22674"
        },
        {
            "message": "Missing item type\nThe `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
            "line": " sdk/lib/angular/angular.js:22722"
        },
        {
            "message": "Missing item type\nThe `ngCloak` directive is used to prevent the Angular html template from being briefly\ndisplayed by the browser in its raw (uncompiled) form while your application is loading. Use this\ndirective to avoid the undesirable flicker effect caused by the html template display.\n\nThe directive can be applied to the `<body>` element, but the preferred usage is to apply\nmultiple `ngCloak` directives to small portions of the page to permit progressive rendering\nof the browser view.\n\n`ngCloak` works in cooperation with the following css rule embedded within `angular.js` and\n`angular.min.js`.\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```css\n[ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n  display: none !important;\n}\n```\n\nWhen this css rule is loaded by the browser, all html elements (including their children) that\nare tagged with the `ngCloak` directive are hidden. When Angular encounters this directive\nduring the compilation of the template it deletes the `ngCloak` element attribute, making\nthe compiled element visible.\n\nFor the best result, the `angular.js` script must be loaded in the head section of the html\ndocument; alternatively, the css rule above must be included in the external stylesheet of the\napplication.",
            "line": " sdk/lib/angular/angular.js:22770"
        },
        {
            "message": "Missing item type\nThe `ngController` directive attaches a controller class to the view. This is a key aspect of how angular\nsupports the principles behind the Model-View-Controller design pattern.\n\nMVC components in angular:\n\n* Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties\n  are accessed through bindings.\n* View — The template (HTML with data bindings) that is rendered into the View.\n* Controller — The `ngController` directive specifies a Controller class; the class contains business\n  logic behind the application to decorate the scope with functions and values\n\nNote that you can also attach controllers to the DOM by declaring it in a route definition\nvia the {@link ngRoute.$route $route} service. A common mistake is to declare the controller\nagain using `ng-controller` in the template itself.  This will cause the controller to be attached\nand executed twice.",
            "line": " sdk/lib/angular/angular.js:22829"
        },
        {
            "message": "Missing item type\nEnables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n\nThis is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.\n\nCSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).\nFor Angular to be CSP compatible there are only two things that we need to do differently:\n\n- don't use `Function` constructor to generate optimized value getters\n- don't inject custom stylesheet into the document\n\nAngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`\ndirective will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will\nevaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will\nbe raised.\n\nCSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically\nincludes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).\nTo make those directives work in CSP mode, include the `angular-csp.css` manually.\n\nAngular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This\nautodetection however triggers a CSP error to be logged in the console:\n\n```\nRefused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of\nscript in the following Content Security Policy directive: \"default-src 'self'\". Note that\n'script-src' was not explicitly set, so 'default-src' is used as a fallback.\n```\n\nThis error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`\ndirective on the root element of the application or on the `angular.js` script tag, whichever\nappears first in the html document.\n\n*Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*",
            "line": " sdk/lib/angular/angular.js:23064"
        },
        {
            "message": "Missing item type\nThe ngClick directive allows you to specify custom behavior when\nan element is clicked.",
            "line": " sdk/lib/angular/angular.js:23237"
        },
        {
            "message": "Missing item type\nThe `ngDblclick` directive allows you to specify custom behavior on a dblclick event.",
            "line": " sdk/lib/angular/angular.js:23313"
        },
        {
            "message": "Missing item type\nThe ngMousedown directive allows you to specify custom behavior on mousedown event.",
            "line": " sdk/lib/angular/angular.js:23337"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mouseup event.",
            "line": " sdk/lib/angular/angular.js:23361"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mouseover event.",
            "line": " sdk/lib/angular/angular.js:23384"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mouseenter event.",
            "line": " sdk/lib/angular/angular.js:23408"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mouseleave event.",
            "line": " sdk/lib/angular/angular.js:23432"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mousemove event.",
            "line": " sdk/lib/angular/angular.js:23456"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on keydown event.",
            "line": " sdk/lib/angular/angular.js:23480"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on keyup event.",
            "line": " sdk/lib/angular/angular.js:23502"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on keypress event.",
            "line": " sdk/lib/angular/angular.js:23529"
        },
        {
            "message": "Missing item type\nEnables binding angular expressions to onsubmit events.\n\nAdditionally it prevents the default action (which for form means sending the request to the\nserver and reloading the current page), but only if the form does not contain `action`,\n`data-action`, or `x-action` attributes.\n\n<div class=\"alert alert-warning\">\n**Warning:** Be careful not to cause \"double-submission\" by using both the `ngClick` and\n`ngSubmit` handlers together. See the\n{@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}\nfor a detailed discussion of when `ngSubmit` may be triggered.\n</div>",
            "line": " sdk/lib/angular/angular.js:23551"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on focus event.\n\nNote: As the `focus` event is executed synchronously when calling `input.focus()`\nAngularJS executes the expression using `scope.$evalAsync` if the event is fired\nduring an `$apply` to ensure a consistent state.",
            "line": " sdk/lib/angular/angular.js:23614"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on blur event.\n\nA [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when\nan element has lost focus.\n\nNote: As the `blur` event is executed synchronously also during DOM manipulations\n(e.g. removing a focussed input),\nAngularJS executes the expression using `scope.$evalAsync` if the event is fired\nduring an `$apply` to ensure a consistent state.",
            "line": " sdk/lib/angular/angular.js:23634"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on copy event.",
            "line": " sdk/lib/angular/angular.js:23658"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on cut event.",
            "line": " sdk/lib/angular/angular.js:23679"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on paste event.",
            "line": " sdk/lib/angular/angular.js:23700"
        },
        {
            "message": "Missing item type\nThe `ngIf` directive removes or recreates a portion of the DOM tree based on an\n{expression}. If the expression assigned to `ngIf` evaluates to a false\nvalue then the element is removed from the DOM, otherwise a clone of the\nelement is reinserted into the DOM.\n\n`ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the\nelement in the DOM rather than changing its visibility via the `display` css property.  A common\ncase when this difference is significant is when using css selectors that rely on an element's\nposition within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.\n\nNote that when an element is removed using `ngIf` its scope is destroyed and a new scope\nis created when the element is restored.  The scope created within `ngIf` inherits from\nits parent scope using\n[prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).\nAn important implication of this is if `ngModel` is used within `ngIf` to bind to\na javascript primitive defined in the parent scope. In this case any modifications made to the\nvariable within the child scope will override (hide) the value in the parent scope.\n\nAlso, `ngIf` recreates elements using their compiled state. An example of this behavior\nis if an element's class attribute is directly modified after it's compiled, using something like\njQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element\nthe added class will be lost because the original compiled state is used to regenerate the element.\n\nAdditionally, you can provide animations via the `ngAnimate` module to animate the `enter`\nand `leave` effects.",
            "line": " sdk/lib/angular/angular.js:23721"
        },
        {
            "message": "Missing item type\nFetches, compiles and includes an external HTML fragment.\n\nBy default, the template URL is restricted to the same domain and protocol as the\napplication document. This is done by calling {@link $sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols\nyou may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or\n{@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link\nng.$sce Strict Contextual Escaping}.\n\nIn addition, the browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy may further restrict whether the template is successfully loaded.\nFor example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`\naccess on some browsers.",
            "line": " sdk/lib/angular/angular.js:23846"
        },
        {
            "message": "Missing item type\nEmitted every time the ngInclude content is requested.",
            "line": " sdk/lib/angular/angular.js:23990"
        },
        {
            "message": "Missing item type\nEmitted every time the ngInclude content is reloaded.",
            "line": " sdk/lib/angular/angular.js:24002"
        },
        {
            "message": "Missing item type\nEmitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)",
            "line": " sdk/lib/angular/angular.js:24014"
        },
        {
            "message": "Missing item type\nThe `ngInit` directive allows you to evaluate an expression in the\ncurrent scope.\n\n<div class=\"alert alert-danger\">\nThe only appropriate use of `ngInit` is for aliasing special properties of\n{@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you\nshould use {@link guide/controller controllers} rather than `ngInit`\nto initialize values on a scope.\n</div>\n<div class=\"alert alert-warning\">\n**Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make\nsure you have parenthesis for correct precedence:\n<pre class=\"prettyprint\">\n`<div ng-init=\"test1 = (data | orderBy:'name')\"></div>`\n</pre>\n</div>",
            "line": " sdk/lib/angular/angular.js:24140"
        },
        {
            "message": "Missing item type\nText input that converts between a delimited string and an array of strings. The default\ndelimiter is a comma followed by a space - equivalent to `ng-list=\", \"`. You can specify a custom\ndelimiter as the value of the `ngList` attribute - for example, `ng-list=\" | \"`.\n\nThe behaviour of the directive is affected by the use of the `ngTrim` attribute.\n* If `ngTrim` is set to `\"false\"` then whitespace around both the separator and each\n  list item is respected. This implies that the user of the directive is responsible for\n  dealing with whitespace but also allows you to use whitespace as a delimiter, such as a\n  tab or newline character.\n* Otherwise whitespace around the delimiter is ignored when splitting (although it is respected\n  when joining the list items back together) and whitespace around each list item is stripped\n  before it is added to the model.\n\n### Example with Validation\n\n<example name=\"ngList-directive\" module=\"listExample\">\n  <file name=\"app.js\">\n     angular.module('listExample', [])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.names = ['morpheus', 'neo', 'trinity'];\n       }]);\n  </file>\n  <file name=\"index.html\">\n   <form name=\"myForm\" ng-controller=\"ExampleController\">\n     <label>List: <input name=\"namesInput\" ng-model=\"names\" ng-list required></label>\n     <span role=\"alert\">\n       <span class=\"error\" ng-show=\"myForm.namesInput.$error.required\">\n       Required!</span>\n     </span>\n     <br>\n     <tt>names = {{names}}</tt><br/>\n     <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n     <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n    </form>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    var listInput = element(by.model('names'));\n    var names = element(by.exactBinding('names'));\n    var valid = element(by.binding('myForm.namesInput.$valid'));\n    var error = element(by.css('span.error'));\n\n    it('should initialize to model', function() {\n      expect(names.getText()).toContain('[\"morpheus\",\"neo\",\"trinity\"]');\n      expect(valid.getText()).toContain('true');\n      expect(error.getCssValue('display')).toBe('none');\n    });\n\n    it('should be invalid if empty', function() {\n      listInput.clear();\n      listInput.sendKeys('');\n\n      expect(names.getText()).toContain('');\n      expect(valid.getText()).toContain('false');\n      expect(error.getCssValue('display')).not.toBe('none');\n    });\n  </file>\n</example>\n\n### Example - splitting on whitespace\n<example name=\"ngList-directive-newlines\">\n  <file name=\"index.html\">\n   <textarea ng-model=\"list\" ng-list=\"&#10;\" ng-trim=\"false\"></textarea>\n   <pre>{{ list | json }}</pre>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it(\"should split the text by newlines\", function() {\n      var listInput = element(by.model('list'));\n      var output = element(by.binding('list | json'));\n      listInput.sendKeys('abc\\ndef\\nghi');\n      expect(output.getText()).toContain('[\\n  \"abc\",\\n  \"def\",\\n  \"ghi\"\\n]');\n    });\n  </file>\n</example>",
            "line": " sdk/lib/angular/angular.js:24207"
        },
        {
            "message": "Missing item type\nCalled when the view needs to be updated. It is expected that the user of the ng-model\ndirective will implement this method.\n\nThe `$render()` method is invoked in the following situations:\n\n* `$rollbackViewValue()` is called.  If we are rolling back the view value to the last\n  committed value then `$render()` is called to update the input control.\n* The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and\n  the `$viewValue` are different from last time.\n\nSince `ng-model` does not do a deep watch, `$render()` is only invoked if the values of\n`$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`\nor `$viewValue` are objects (rather than a string or number) then `$render()` will not be\ninvoked if you only change a property on the objects.",
            "line": " sdk/lib/angular/angular.js:24608"
        },
        {
            "message": "Missing item type\nThis is called when we need to determine if the value of an input is empty.\n\nFor instance, the required directive does this to work out if the input has data or not.\n\nThe default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.\n\nYou can override this for input directives whose concept of being empty is different from the\ndefault. The `checkboxInputType` directive does this because in its case a value of `false`\nimplies empty.",
            "line": " sdk/lib/angular/angular.js:24630"
        },
        {
            "message": "Missing item type\nChange the validity state, and notify the form.\n\nThis method can be called within $parsers/$formatters or a custom validation implementation.\nHowever, in most cases it should be sufficient to use the `ngModel.$validators` and\n`ngModel.$asyncValidators` collections which will call `$setValidity` automatically.",
            "line": " sdk/lib/angular/angular.js:24655"
        },
        {
            "message": "Missing item type\nSets the control to its pristine state.\n\nThis method can be called to remove the `ng-dirty` class and set the control to its pristine\nstate (`ng-pristine` class). A model is considered to be pristine when the control\nhas not been changed from when first compiled.",
            "line": " sdk/lib/angular/angular.js:24690"
        },
        {
            "message": "Missing item type\nSets the control to its dirty state.\n\nThis method can be called to remove the `ng-pristine` class and set the control to its dirty\nstate (`ng-dirty` class). A model is considered to be dirty when the control has been changed\nfrom when first compiled.",
            "line": " sdk/lib/angular/angular.js:24708"
        },
        {
            "message": "Missing item type\nSets the control to its untouched state.\n\nThis method can be called to remove the `ng-touched` class and set the control to its\nuntouched state (`ng-untouched` class). Upon compilation, a model is set as untouched\nby default, however this function can be used to restore that state if the model has\nalready been touched by the user.",
            "line": " sdk/lib/angular/angular.js:24727"
        },
        {
            "message": "Missing item type\nSets the control to its touched state.\n\nThis method can be called to remove the `ng-untouched` class and set the control to its\ntouched state (`ng-touched` class). A model is considered to be touched when the user has\nfirst focused the control element and then shifted focus away from the control (blur event).",
            "line": " sdk/lib/angular/angular.js:24745"
        },
        {
            "message": "Missing item type\nCancel an update and reset the input element's value to prevent an update to the `$modelValue`,\nwhich may be caused by a pending debounced event or because the input is waiting for a some\nfuture event.\n\nIf you have an input that uses `ng-model-options` to set up debounced events or events such\nas blur you can have a situation where there is a period when the `$viewValue`\nis out of synch with the ngModel's `$modelValue`.\n\nIn this case, you can run into difficulties if you try to update the ngModel's `$modelValue`\nprogrammatically before these debounced/future events have resolved/occurred, because Angular's\ndirty checking mechanism is not able to tell whether the model has actually changed or not.\n\nThe `$rollbackViewValue()` method should be called before programmatically changing the model of an\ninput which may have such events pending. This is important in order to make sure that the\ninput field will be updated with the new model value and any pending operations are cancelled.\n\n<example name=\"ng-model-cancel-update\" module=\"cancel-update-example\">\n  <file name=\"app.js\">\n    angular.module('cancel-update-example', [])\n\n    .controller('CancelUpdateController', ['$scope', function($scope) {\n      $scope.resetWithCancel = function(e) {\n        if (e.keyCode == 27) {\n          $scope.myForm.myInput1.$rollbackViewValue();\n          $scope.myValue = '';\n        }\n      };\n      $scope.resetWithoutCancel = function(e) {\n        if (e.keyCode == 27) {\n          $scope.myValue = '';\n        }\n      };\n    }]);\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"CancelUpdateController\">\n      <p>Try typing something in each input.  See that the model only updates when you\n         blur off the input.\n       </p>\n       <p>Now see what happens if you start typing then press the Escape key</p>\n\n      <form name=\"myForm\" ng-model-options=\"{ updateOn: 'blur' }\">\n        <p id=\"inputDescription1\">With $rollbackViewValue()</p>\n        <input name=\"myInput1\" aria-describedby=\"inputDescription1\" ng-model=\"myValue\"\n               ng-keydown=\"resetWithCancel($event)\"><br/>\n        myValue: \"{{ myValue }}\"\n\n        <p id=\"inputDescription2\">Without $rollbackViewValue()</p>\n        <input name=\"myInput2\" aria-describedby=\"inputDescription2\" ng-model=\"myValue\"\n               ng-keydown=\"resetWithoutCancel($event)\"><br/>\n        myValue: \"{{ myValue }}\"\n      </form>\n    </div>\n  </file>\n</example>",
            "line": " sdk/lib/angular/angular.js:24762"
        },
        {
            "message": "Missing item type\nRuns each of the registered validators (first synchronous validators and then\nasynchronous validators).\nIf the validity changes to invalid, the model will be set to `undefined`,\nunless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.\nIf the validity changes to valid, it will set the model to the last available valid\n`$modelValue`, i.e. either the last parsed value or the last value set from the scope.",
            "line": " sdk/lib/angular/angular.js:24829"
        },
        {
            "message": "Missing item type\nCommit a pending update to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. this method is rarely needed as `NgModelController`\nusually handles calling this in response to input events.",
            "line": " sdk/lib/angular/angular.js:24968"
        },
        {
            "message": "Missing item type\nUpdate the view value.\n\nThis method should be called when an input directive want to change the view value; typically,\nthis is done from within a DOM event handler.\n\nFor example {@link ng.directive:input input} calls it when the value of the input changes and\n{@link ng.directive:select select} calls it when an option is selected.\n\nIf the new `value` is an object (rather than a string or a number), we should make a copy of the\nobject before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep\nwatch of objects, it only looks for a change of identity. If you only change the property of\nthe object then ngModel will not realise that the object has changed and will not invoke the\n`$parsers` and `$validators` pipelines.\n\nFor this reason, you should not change properties of the copy once it has been passed to\n`$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.\n\nWhen this method is called, the new `value` will be staged for committing through the `$parsers`\nand `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged\nvalue sent directly for processing, finally to be applied to `$modelValue` and then the\n**expression** specified in the `ng-model` attribute.\n\nLastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.\n\nIn case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`\nand the `default` trigger is not listed, all those actions will remain pending until one of the\n`updateOn` events is triggered on the DOM element.\nAll these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}\ndirective is used with a custom debounce for this particular event.\n\nNote that calling this function does not trigger a `$digest`.",
            "line": " sdk/lib/angular/angular.js:25057"
        },
        {
            "message": "Missing item type\nThe `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a\nproperty on the scope using {@link ngModel.NgModelController NgModelController},\nwhich is created and exposed by this directive.\n\n`ngModel` is responsible for:\n\n- Binding the view into the model, which other directives such as `input`, `textarea` or `select`\n  require.\n- Providing validation behavior (i.e. required, number, email, url).\n- Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).\n- Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.\n- Registering the control with its parent {@link ng.directive:form form}.\n\nNote: `ngModel` will try to bind to the property given by evaluating the expression on the\ncurrent scope. If the property doesn't already exist on this scope, it will be created\nimplicitly and added to the scope.\n\nFor best practices on using `ngModel`, see:\n\n - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)\n\nFor basic examples, how to use `ngModel`, see:\n\n - {@link ng.directive:input input}\n   - {@link input[text] text}\n   - {@link input[checkbox] checkbox}\n   - {@link input[radio] radio}\n   - {@link input[number] number}\n   - {@link input[email] email}\n   - {@link input[url] url}\n   - {@link input[date] date}\n   - {@link input[datetime-local] datetime-local}\n   - {@link input[time] time}\n   - {@link input[month] month}\n   - {@link input[week] week}\n - {@link ng.directive:select select}\n - {@link ng.directive:textarea textarea}\n\n# CSS classes\nThe following CSS classes are added and removed on the associated input/select/textarea element\ndepending on the validity of the model.\n\n - `ng-valid`: the model is valid\n - `ng-invalid`: the model is invalid\n - `ng-valid-[key]`: for each valid key added by `$setValidity`\n - `ng-invalid-[key]`: for each invalid key added by `$setValidity`\n - `ng-pristine`: the control hasn't been interacted with yet\n - `ng-dirty`: the control has been interacted with\n - `ng-touched`: the control has been blurred\n - `ng-untouched`: the control hasn't been blurred\n - `ng-pending`: any `$asyncValidators` are unfulfilled\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n## Animation Hooks\n\nAnimations within models are triggered when any of the associated CSS classes are added and removed\non the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,\n`.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.\nThe animations that are triggered within ngModel are similar to how they work in ngClass and\nanimations can be hooked into using CSS transitions, keyframes as well as JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style an input element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-input {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-input.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre>",
            "line": " sdk/lib/angular/angular.js:25174"
        },
        {
            "message": "Missing item type\nAllows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of\nevents that will trigger a model update and/or a debouncing delay so that the actual update only\ntakes place when a timer expires; this timer will be reset after another change takes place.\n\nGiven the nature of `ngModelOptions`, the value displayed inside input fields in the view might\nbe different from the value in the actual model. This means that if you update the model you\nshould also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in\norder to make sure it is synchronized with the model and that any debounced action is canceled.\n\nThe easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}\nmethod is by making sure the input is placed inside a form that has a `name` attribute. This is\nimportant because `form` controllers are published to the related scope under the name in their\n`name` attribute.\n\nAny pending changes will take place immediately when an enclosing form is submitted via the\n`submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\nto have access to the updated model.\n\n`ngModelOptions` has an effect on the element it's declared on and its descendants.",
            "line": " sdk/lib/angular/angular.js:25400"
        },
        {
            "message": "Missing item type\nThe `ngNonBindable` directive tells Angular not to compile or bind the contents of the current\nDOM element. This is useful if the element contains what appears to be Angular directives and\nbindings but which should be ignored by Angular. This could be the case if you have a site that\ndisplays snippets of code, for instance.",
            "line": " sdk/lib/angular/angular.js:25690"
        },
        {
            "message": "Missing item type\nThe `ngOptions` attribute can be used to dynamically generate a list of `<option>`\nelements for the `<select>` element using the array or object obtained by evaluating the\n`ngOptions` comprehension expression.\n\nIn many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a\nsimilar result. However, `ngOptions` provides some benefits such as reducing memory and\nincreasing speed by not creating a new scope for each repeated instance, as well as providing\nmore flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the\ncomprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound\n to a non-string value. This is because an option element can only be bound to string values at\npresent.\n\nWhen an item in the `<select>` menu is selected, the array element or object property\nrepresented by the selected option will be bound to the model identified by the `ngModel`\ndirective.\n\nOptionally, a single hard-coded `<option>` element, with the value set to an empty string, can\nbe nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\noption. See example below for demonstration.\n\n## Complex Models (objects or collections)\n\n**Note:** By default, `ngModel` watches the model by reference, not value. This is important when\nbinding any input directive to a model that is an object or a collection.\n\nSince this is a common situation for `ngOptions` the directive additionally watches the model using\n`$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in\nthe options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual\nobject/collection has not changed identity but only a property on the object or an item in the collection\nchanges.\n\nNote that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection\nif the model is an array). This means that changing a property deeper inside the object/collection that the\nfirst level will not trigger a re-rendering.\n\n\n## `select` **`as`**\n\nUsing `select` **`as`** will bind the result of the `select` expression to the model, but\nthe value of the `<select>` and `<option>` html elements will be either the index (for array data sources)\nor property name (for object data sources) of the value within the collection. If a **`track by`** expression\nis used, the result of that expression will be set as the value of the `option` and `select` elements.\n\n\n### `select` **`as`** and **`track by`**\n\n<div class=\"alert alert-warning\">\nDo not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.\n</div>\n\nConsider the following example:\n\n```html\n<select ng-options=\"item.subItem as item.label for item in values track by item.id\" ng-model=\"selected\">\n```\n\n```js\n$scope.values = [{\n  id: 1,\n  label: 'aLabel',\n  subItem: { name: 'aSubItem' }\n}, {\n  id: 2,\n  label: 'bLabel',\n  subItem: { name: 'bSubItem' }\n}];\n\n$scope.selected = { name: 'aSubItem' };\n```\n\nWith the purpose of preserving the selection, the **`track by`** expression is always applied to the element\nof the data source (to `item` in this example). To calculate whether an element is selected, we do the\nfollowing:\n\n1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`\n2. Apply **`track by`** to the already selected value in `ngModel`.\n   In the example: this is not possible as **`track by`** refers to `item.id`, but the selected\n   value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to\n   a wrong object, the selected element can't be found, `<select>` is always reset to the \"not\n   selected\" option.",
            "line": " sdk/lib/angular/angular.js:25728"
        },
        {
            "message": "Missing item type\n`ngPluralize` is a directive that displays messages according to en-US localization rules.\nThese rules are bundled with angular.js, but can be overridden\n(see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\nby specifying the mappings between\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nand the strings to be displayed.\n\n# Plural categories and explicit number rules\nThere are two\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nin Angular's default en-US locale: \"one\" and \"other\".\n\nWhile a plural category may match many numbers (for example, in en-US locale, \"other\" can match\nany number that is not 1), an explicit number rule can only match one number. For example, the\nexplicit number rule for \"3\" matches the number 3. There are examples of plural categories\nand explicit number rules throughout the rest of this documentation.\n\n# Configuring ngPluralize\nYou configure ngPluralize by providing 2 attributes: `count` and `when`.\nYou can also provide an optional attribute, `offset`.\n\nThe value of the `count` attribute can be either a string or an {@link guide/expression\nAngular expression}; these are evaluated on the current scope for its bound value.\n\nThe `when` attribute specifies the mappings between plural categories and the actual\nstring to be displayed. The value of the attribute should be a JSON object.\n\nThe following example shows how to configure ngPluralize:\n\n```html\n<ng-pluralize count=\"personCount\"\n                when=\"{'0': 'Nobody is viewing.',\n                     'one': '1 person is viewing.',\n                     'other': '{} people are viewing.'}\">\n</ng-pluralize>\n```\n\nIn the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\nspecify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\nwould be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\nother numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\nshow \"a dozen people are viewing\".\n\nYou can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted\ninto pluralized strings. In the previous example, Angular will replace `{}` with\n<span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\nfor <span ng-non-bindable>{{numberExpression}}</span>.\n\nIf no rule is defined for a category, then an empty string is displayed and a warning is generated.\nNote that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.\n\n# Configuring ngPluralize with offset\nThe `offset` attribute allows further customization of pluralized text, which can result in\na better user experience. For example, instead of the message \"4 people are viewing this document\",\nyou might display \"John, Kate and 2 others are viewing this document\".\nThe offset attribute allows you to offset a number by any desired value.\nLet's take a look at an example:\n\n```html\n<ng-pluralize count=\"personCount\" offset=2\n              when=\"{'0': 'Nobody is viewing.',\n                     '1': '{{person1}} is viewing.',\n                     '2': '{{person1}} and {{person2}} are viewing.',\n                     'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                     'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n</ng-pluralize>\n```\n\nNotice that we are still using two plural categories(one, other), but we added\nthree explicit number rules 0, 1 and 2.\nWhen one person, perhaps John, views the document, \"John is viewing\" will be shown.\nWhen three people view the document, no explicit number rule is found, so\nan offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\nIn this case, plural category 'one' is matched and \"John, Mary and one other person are viewing\"\nis shown.\n\nNote that when you specify offsets, you must provide explicit number rules for\nnumbers from 0 up to and including the offset. If you use an offset of 3, for example,\nyou must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\nplural categories \"one\" and \"other\".",
            "line": " sdk/lib/angular/angular.js:26450"
        },
        {
            "message": "Missing item type\nThe `ngRepeat` directive instantiates a template once per item from a collection. Each template\ninstance gets its own scope, where the given loop variable is set to the current collection item,\nand `$index` is set to the item index or key.\n\nSpecial properties are exposed on the local scope of each template instance, including:\n\n| Variable  | Type            | Details                                                                     |\n|-----------|-----------------|-----------------------------------------------------------------------------|\n| `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |\n| `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |\n| `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |\n| `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |\n| `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |\n| `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |\n\nCreating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.\nThis may be useful when, for instance, nesting ngRepeats.\n\n\n# Iterating over object properties\n\nIt is possible to get `ngRepeat` to iterate over the properties of an object using the following\nsyntax:\n\n```js\n<div ng-repeat=\"(key, value) in myObj\"> ... </div>\n```\n\nYou need to be aware that the JavaScript specification does not define the order of keys\nreturned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive\nused to sort the keys alphabetically.)\n\nVersion 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser\nwhen running `for key in myObj`. It seems that browsers generally follow the strategy of providing\nkeys in the order in which they were defined, although there are exceptions when keys are deleted\nand reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues\n\nIf this is not desired, the recommended workaround is to convert your object into an array\nthat is sorted into the order that you prefer before providing it to `ngRepeat`.  You could\ndo this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)\nor implement a `$watch` on the object yourself.\n\n\n# Tracking and Duplicates\n\nWhen the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:\n\n* When an item is added, a new instance of the template is added to the DOM.\n* When an item is removed, its template instance is removed from the DOM.\n* When items are reordered, their respective templates are reordered in the DOM.\n\nBy default, `ngRepeat` does not allow duplicate items in arrays. This is because when\nthere are duplicates, it is not possible to maintain a one-to-one mapping between collection\nitems and DOM elements.\n\nIf you do need to repeat duplicate items, you can substitute the default tracking behavior\nwith your own using the `track by` expression.\n\nFor example, you may track items by the index of each item in the collection, using the\nspecial scope property `$index`:\n```html\n   <div ng-repeat=\"n in [42, 42, 43, 43] track by $index\">\n     {{n}}\n   </div>\n```\n\nYou may use arbitrary expressions in `track by`, including references to custom functions\non the scope:\n```html\n   <div ng-repeat=\"n in [42, 42, 43, 43] track by myTrackingFunction(n)\">\n     {{n}}\n   </div>\n```\n\nIf you are working with objects that have an identifier property, you can track\nby the identifier instead of the whole object. Should you reload your data later, `ngRepeat`\nwill not have to rebuild the DOM elements for items it has already rendered, even if the\nJavaScript objects in the collection have been substituted for new ones:\n```html\n   <div ng-repeat=\"model in collection track by model.id\">\n     {{model.name}}\n   </div>\n```\n\nWhen no `track by` expression is provided, it is equivalent to tracking by the built-in\n`$id` function, which tracks items by their identity:\n```html\n   <div ng-repeat=\"obj in collection track by $id(obj)\">\n     {{obj.prop}}\n   </div>\n```\n\n<div class=\"alert alert-warning\">\n**Note:** `track by` must always be the last expression:\n</div>\n```\n<div ng-repeat=\"model in collection | orderBy: 'id' as filtered_result track by model.id\">\n    {{model.name}}\n</div>\n```\n\n# Special repeat start and end points\nTo repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending\nthe range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.\nThe **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)\nup to and including the ending HTML tag where **ng-repeat-end** is placed.\n\nThe example below makes use of this feature:\n```html\n  <header ng-repeat-start=\"item in items\">\n    Header {{ item }}\n  </header>\n  <div class=\"body\">\n    Body {{ item }}\n  </div>\n  <footer ng-repeat-end>\n    Footer {{ item }}\n  </footer>\n```\n\nAnd with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:\n```html\n  <header>\n    Header A\n  </header>\n  <div class=\"body\">\n    Body A\n  </div>\n  <footer>\n    Footer A\n  </footer>\n  <header>\n    Header B\n  </header>\n  <div class=\"body\">\n    Body B\n  </div>\n  <footer>\n    Footer B\n  </footer>\n```\n\nThe custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such\nas **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).",
            "line": " sdk/lib/angular/angular.js:26689"
        },
        {
            "message": "Missing item type\nThe `ngShow` directive shows or hides the given HTML element based on the expression\nprovided to the `ngShow` attribute. The element is shown or hidden by removing or adding\nthe `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is visible) -->\n<div ng-show=\"myValue\"></div>\n\n<!-- when $scope.myValue is falsy (element is hidden) -->\n<div ng-show=\"myValue\" class=\"ng-hide\"></div>\n```\n\nWhen the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class\nattribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding `.ng-hide`\n\nBy default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope\nwith extra animation classes that can be added.\n\n```css\n.ng-hide:not(.ng-hide-animate) {\n  /&#42; this is just another form of hiding an element &#42;/\n  display: block!important;\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with `ngShow`\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass except that\nyou must also include the !important flag to override the display property\nso that you can perform an animation when the element is hidden during the time of the animation.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  /&#42; this is required as of 1.3x to properly\n     apply all styling in a show/hide animation &#42;/\n  transition: 0s linear all;\n}\n\n.my-element.ng-hide-add-active,\n.my-element.ng-hide-remove-active {\n  /&#42; the transition is defined in the active class &#42;/\n  transition: 1s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
            "line": " sdk/lib/angular/angular.js:27219"
        },
        {
            "message": "Missing item type\nThe `ngHide` directive shows or hides the given HTML element based on the expression\nprovided to the `ngHide` attribute. The element is shown or hidden by removing or adding\nthe `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is hidden) -->\n<div ng-hide=\"myValue\" class=\"ng-hide\"></div>\n\n<!-- when $scope.myValue is falsy (element is visible) -->\n<div ng-hide=\"myValue\"></div>\n```\n\nWhen the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class\nattribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding `.ng-hide`\n\nBy default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass in CSS:\n\n```css\n.ng-hide {\n  /&#42; this is just another form of hiding an element &#42;/\n  display: block!important;\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with `ngHide`\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`\nCSS class is added and removed for you instead of your own CSS class.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  transition: 0.5s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
            "line": " sdk/lib/angular/angular.js:27395"
        },
        {
            "message": "Missing item type\nThe `ngStyle` directive allows you to set CSS style on an HTML element conditionally.",
            "line": " sdk/lib/angular/angular.js:27554"
        },
        {
            "message": "Missing item type\nThe `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.\nElements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location\nas specified in the template.\n\nThe directive itself works similar to ngInclude, however, instead of downloading template code (or loading it\nfrom the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element\nmatches the value obtained from the evaluated expression. In other words, you define a container element\n(where you place the directive), place an expression on the **`on=\"...\"` attribute**\n(or the **`ng-switch=\"...\"` attribute**), define any inner elements inside of the directive and place\na when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on\nexpression is evaluated. If a matching expression is not found via a when attribute then an element with the default\nattribute is displayed.\n\n<div class=\"alert alert-info\">\nBe aware that the attribute values to match against cannot be expressions. They are interpreted\nas literal string values to match against.\nFor example, **`ng-switch-when=\"someVal\"`** will match against the string `\"someVal\"` not against the\nvalue of the expression `$scope.someVal`.\n</div>",
            "line": " sdk/lib/angular/angular.js:27609"
        },
        {
            "message": "Missing item type\nDirective that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n\nAny existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.",
            "line": " sdk/lib/angular/angular.js:27813"
        },
        {
            "message": "Missing item type\nLoad the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the\ntemplate can be used by {@link ng.directive:ngInclude `ngInclude`},\n{@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the\n`<script>` element must be specified as `text/ng-template`, and a cache name for the template must be\nassigned through the element's `id`, which can then be used as a directive's `templateUrl`.",
            "line": " sdk/lib/angular/angular.js:27885"
        },
        {
            "message": "Missing item type\nThe controller for the `<select>` directive. This provides support for reading\nand writing the selected value(s) of the control and also coordinates dynamically\nadded `<option>` elements, perhaps by an `ngRepeat` directive.",
            "line": " sdk/lib/angular/angular.js:27935"
        },
        {
            "message": "Missing item type\nHTML `SELECT` element with angular data-binding.\n\nIn many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions\nngOptions} to achieve a similar result. However, `ngOptions` provides some benefits such as reducing\nmemory and increasing speed by not creating a new scope for each repeated instance, as well as providing\nmore flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the\ncomprehension expression.\n\nWhen an item in the `<select>` menu is selected, the array element or object property\nrepresented by the selected option will be bound to the model identified by the `ngModel`\ndirective.\n\nIf the viewValue contains a value that doesn't match any of the options then the control\nwill automatically add an \"unknown\" option, which it then removes when this is resolved.\n\nOptionally, a single hard-coded `<option>` element, with the value set to an empty string, can\nbe nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\noption. See example below for demonstration.\n\n<div class=\"alert alert-info\">\nThe value of a `select` directive used without `ngOptions` is always a string.\nWhen the model needs to be bound to a non-string value, you must either explictly convert it\nusing a directive (see example below) or use `ngOptions` to specify the set of options.\nThis is because an option element can only be bound to string values at present.\n</div>\n\n### Example (binding `select` to a non-string value)\n\n<example name=\"select-with-non-string-options\" module=\"nonStringSelect\">\n  <file name=\"index.html\">\n    <select ng-model=\"model.id\" convert-to-number>\n      <option value=\"0\">Zero</option>\n      <option value=\"1\">One</option>\n      <option value=\"2\">Two</option>\n    </select>\n    {{ model }}\n  </file>\n  <file name=\"app.js\">\n    angular.module('nonStringSelect', [])\n      .run(function($rootScope) {\n        $rootScope.model = { id: 2 };\n      })\n      .directive('convertToNumber', function() {\n        return {\n          require: 'ngModel',\n          link: function(scope, element, attrs, ngModel) {\n            ngModel.$parsers.push(function(val) {\n              return parseInt(val, 10);\n            });\n            ngModel.$formatters.push(function(val) {\n              return '' + val;\n            });\n          }\n        };\n      });\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should initialize to model', function() {\n      var select = element(by.css('select'));\n      expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');\n    });\n  </file>\n</example>",
            "line": " sdk/lib/angular/angular.js:28033"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:15"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:22"
        },
        {
            "message": "Missing item type",
            "line": " sdk/lib/ngStorage/ngStorage-0.3.7.js:31"
        },
        {
            "message": "Missing item type\nHelper Functions",
            "line": " sdk/model/model.factory.js:283"
        },
        {
            "message": "Missing item type\nHELPER METHODS",
            "line": " sdk/model/registry.service.js:5"
        }
    ]
}